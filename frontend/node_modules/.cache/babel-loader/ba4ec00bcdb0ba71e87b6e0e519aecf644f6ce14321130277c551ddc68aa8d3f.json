{"ast":null,"code":"import _objectSpread from\"C:/Users/ilker/Desktop/aibrands/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import api from'../utils/api';export const socialMediaChannelsAPI={// Get platform configurations\ngetPlatforms:async()=>{const response=await api.get('/api/social-media/platforms');return response.data;},// Telegram helpers\ndiscoverTelegramChats:async bot_token=>{const response=await api.post('/api/social-media/telegram/discover',{bot_token});return response.data;},getTelegramChatInfo:async(bot_token,chat_id)=>{const response=await api.post('/api/social-media/telegram/chat-info',{bot_token,chat_id});return response.data;},// Get channels with filtering and pagination\ngetChannels:async function(){let page=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;let per_page=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;let platform=arguments.length>2?arguments[2]:undefined;let brand_id=arguments.length>3?arguments[3]:undefined;let search=arguments.length>4?arguments[4]:undefined;const params=new URLSearchParams({page:page.toString(),per_page:per_page.toString()});if(platform)params.append('platform',platform);if(brand_id)params.append('brand_id',brand_id.toString());if(search)params.append('search',search);const response=await api.get(\"/api/social-media/channels?\".concat(params.toString()));return response.data;},// Get single channel\ngetChannel:async channelId=>{const response=await api.get(\"/api/social-media/channels/\".concat(channelId));return response.data;},// Get channel statistics\ngetStatistics:async()=>{const response=await api.get('/api/social-media/channels/statistics');return response.data;},// Create a new channel\ncreateChannel:async channelData=>{const response=await api.post('/api/social-media/channels',channelData);return response.data;},// Update a channel\nupdateChannel:async(channelId,channelData)=>{const response=await api.put(\"/api/social-media/channels/\".concat(channelId),channelData);return response.data;},// Delete a channel\ndeleteChannel:async channelId=>{await api.delete(\"/api/social-media/channels/\".concat(channelId));},// Toggle channel status\ntoggleChannelStatus:async channelId=>{const response=await api.patch(\"/api/social-media/channels/\".concat(channelId,\"/toggle\"));return response.data;},// Health check\ntestHealth:async channelId=>{const response=await api.post(\"/api/social-media/channels/\".concat(channelId,\"/health\"));return response.data;},// Token rotate\nrotateToken:async(channelId,token)=>{const response=await api.post(\"/api/social-media/channels/\".concat(channelId,\"/rotate-token\"),{token});return response.data;},// Refresh channel info\nrefreshChannelInfo:async channelId=>{const response=await api.post(\"/api/social-media/channels/\".concat(channelId,\"/refresh-info\"));return response.data;},// YENİ YAPI: Bot seçerek kanal ekle\naddChannelByBot:async request=>{const payload=_objectSpread(_objectSpread(_objectSpread(_objectSpread({telegram_bot_id:request.telegram_bot_id,brand_id:request.brand_id},request.channel_identifier&&{channel_identifier:request.channel_identifier}),request.channel_identifiers&&{channel_identifiers:request.channel_identifiers}),request.step&&{step:request.step}),request.channel_username&&{channel_username:request.channel_username});const response=await api.post('/api/social-media/channels/add-by-bot',payload);return response.data;},// LEGACY: Add channel by username or chat_id (eski yöntem)\naddChannelByUsername:async(botToken,channelUsername,brandId,chatId)=>{const payload={bot_token:botToken,brand_id:brandId};if(chatId){payload.chat_id=chatId;}if(channelUsername){payload.channel_username=channelUsername;}const response=await api.post('/api/social-media/channels/add-by-username',payload);return response.data;},// Assign users to channel\nassignUsersToChannel:async(channelId,userIds)=>{const response=await api.put(\"/api/social-media/channels/\".concat(channelId,\"/assign-users\"),{user_ids:userIds});return response.data;},// Get assigned users for channel\ngetChannelAssignedUsers:async channelId=>{const response=await api.get(\"/api/social-media/channels/\".concat(channelId,\"/assigned-users\"));return response.data;},// Assign channel to brand and users\nassignChannel:async(channelId,data)=>{const response=await api.post(\"/api/social-media/channels/\".concat(channelId,\"/assign\"),data);return response.data;}};","map":{"version":3,"names":["api","socialMediaChannelsAPI","getPlatforms","response","get","data","discoverTelegramChats","bot_token","post","getTelegramChatInfo","chat_id","getChannels","page","arguments","length","undefined","per_page","platform","brand_id","search","params","URLSearchParams","toString","append","concat","getChannel","channelId","getStatistics","createChannel","channelData","updateChannel","put","deleteChannel","delete","toggleChannelStatus","patch","testHealth","rotateToken","token","refreshChannelInfo","addChannelByBot","request","payload","_objectSpread","telegram_bot_id","channel_identifier","channel_identifiers","step","channel_username","addChannelByUsername","botToken","channelUsername","brandId","chatId","assignUsersToChannel","userIds","user_ids","getChannelAssignedUsers","assignChannel"],"sources":["C:/Users/ilker/Desktop/aibrands/frontend/src/api/socialMediaChannels.ts"],"sourcesContent":["import api from '../utils/api';\n\nexport interface SocialMediaChannel {\n  id: number;\n  name: string;\n  platform: string;\n  type: string;\n  channel_id: string;\n  chat_id: string;\n  channel_username?: string;\n  member_count: number;\n  is_active: boolean;\n  telegram_bot_id?: number;\n  brand_id: number;\n  created_by: number;\n  updated_by: number;\n  created_at: string;\n  updated_at: string;\n  avatar_url?: string;\n  last_post_at?: string;\n  brand_name?: string;\n  last_activity?: string;\n  assigned_user_ids?: number[];  // Add for assign users modal\n  bot_token?: string;  // Add for token display\n}\n\nexport interface SocialMediaChannelCreate {\n  name: string;\n  platform: 'telegram';\n  type: 'group' | 'channel';\n  channel_id: string;\n  member_count?: number;\n  is_active?: boolean;\n  // Telegram specific\n  bot_token?: string;\n  chat_id?: string;\n  brand_id: number;\n}\n\nexport interface SocialMediaChannelUpdate {\n  name?: string;\n  platform?: 'telegram';\n  type?: 'group' | 'channel';\n  channel_id?: string;\n  member_count?: number;\n  is_active?: boolean;\n  // Telegram specific\n  bot_token?: string;\n  chat_id?: string;\n}\n\nexport interface SocialMediaChannelListResponse {\n  channels: SocialMediaChannel[];\n  total: number;\n  page: number;\n  per_page: number;\n  total_pages: number;\n}\n\nexport interface ChannelStatistics {\n  total_channels: number;\n  telegram_channels: number;\n  active_channels: number;\n  total_members: number;\n}\n\nexport const socialMediaChannelsAPI = {\n  // Get platform configurations\n  getPlatforms: async (): Promise<any> => {\n    const response = await api.get('/api/social-media/platforms');\n    return response.data;\n  },\n\n  // Telegram helpers\n  discoverTelegramChats: async (bot_token: string): Promise<{ \n    success: boolean;\n    chats: Array<{ \n      chat_id: string; \n      type?: string; \n      title?: string; \n      username?: string;\n      member_count?: number;\n      description?: string;\n      invite_link?: string;\n      is_admin?: boolean;\n    }>;\n    message?: string;\n    instructions?: string[];\n    bot_info?: {\n      id: number;\n      username: string;\n      first_name: string;\n      can_join_groups: boolean;\n      can_read_all_group_messages: boolean;\n    };\n  }> => {\n    const response = await api.post('/api/social-media/telegram/discover', { bot_token });\n    return response.data;\n  },\n  getTelegramChatInfo: async (bot_token: string, chat_id: string): Promise<{ chat_id: string; type?: string; title?: string; username?: string; member_count?: number }> => {\n    const response = await api.post('/api/social-media/telegram/chat-info', { bot_token, chat_id });\n    return response.data;\n  },\n\n  // Get channels with filtering and pagination\n  getChannels: async (\n    page: number = 1,\n    per_page: number = 10,\n    platform?: string,\n    brand_id?: number,\n    search?: string\n  ): Promise<SocialMediaChannelListResponse> => {\n    const params = new URLSearchParams({\n      page: page.toString(),\n      per_page: per_page.toString(),\n    });\n\n    if (platform) params.append('platform', platform);\n    if (brand_id) params.append('brand_id', brand_id.toString());\n    if (search) params.append('search', search);\n\n    const response = await api.get(`/api/social-media/channels?${params.toString()}`);\n    return response.data;\n  },\n\n  // Get single channel\n  getChannel: async (channelId: number): Promise<SocialMediaChannel> => {\n    const response = await api.get(`/api/social-media/channels/${channelId}`);\n    return response.data;\n  },\n\n  // Get channel statistics\n  getStatistics: async (): Promise<ChannelStatistics> => {\n    const response = await api.get('/api/social-media/channels/statistics');\n    return response.data;\n  },\n\n  // Create a new channel\n  createChannel: async (channelData: SocialMediaChannelCreate): Promise<SocialMediaChannel> => {\n    const response = await api.post('/api/social-media/channels', channelData);\n    return response.data;\n  },\n\n  // Update a channel\n  updateChannel: async (channelId: number, channelData: SocialMediaChannelUpdate): Promise<SocialMediaChannel> => {\n    const response = await api.put(`/api/social-media/channels/${channelId}`, channelData);\n    return response.data;\n  },\n\n  // Delete a channel\n  deleteChannel: async (channelId: number): Promise<void> => {\n    await api.delete(`/api/social-media/channels/${channelId}`);\n  },\n\n  // Toggle channel status\n  toggleChannelStatus: async (channelId: number): Promise<{ message: string; is_active: boolean }> => {\n    const response = await api.patch(`/api/social-media/channels/${channelId}/toggle`);\n    return response.data;\n  },\n\n  // Health check\n  testHealth: async (\n    channelId: number\n  ): Promise<{ connection_status: 'connected' | 'disconnected' | 'error'; test_message_sent: boolean; test_message_error?: string | null }> => {\n    const response = await api.post(`/api/social-media/channels/${channelId}/health`);\n    return response.data;\n  },\n\n  // Token rotate\n  rotateToken: async (channelId: number, token: string): Promise<{ message: string; token_preview: string }> => {\n    const response = await api.post(`/api/social-media/channels/${channelId}/rotate-token`, { token });\n    return response.data;\n  },\n\n  // Refresh channel info\n  refreshChannelInfo: async (channelId: number): Promise<SocialMediaChannel> => {\n    const response = await api.post(`/api/social-media/channels/${channelId}/refresh-info`);\n    return response.data;\n  },\n\n  // YENİ YAPI: Bot seçerek kanal ekle\n  addChannelByBot: async (request: {\n    telegram_bot_id: number;\n    channel_identifier?: string;\n    channel_identifiers?: string[];  // Bulk için\n    brand_id: number;\n    step?: string;\n    channel_username?: string;\n  }) => {\n    const payload = {\n      telegram_bot_id: request.telegram_bot_id,\n      brand_id: request.brand_id,\n      ...(request.channel_identifier && { channel_identifier: request.channel_identifier }),\n      ...(request.channel_identifiers && { channel_identifiers: request.channel_identifiers }),\n      ...(request.step && { step: request.step }),\n      ...(request.channel_username && { channel_username: request.channel_username }),\n    };\n\n    const response = await api.post('/api/social-media/channels/add-by-bot', payload);\n    return response.data;\n  },\n\n  // LEGACY: Add channel by username or chat_id (eski yöntem)\n  addChannelByUsername: async (botToken: string, channelUsername: string | null, brandId: number, chatId?: string): Promise<{\n    success: boolean;\n    message: string;\n    channel: {\n      id: number;\n      name: string;\n      username: string;\n      chat_id: string;\n      member_count: number;\n      type: string;\n    };\n  }> => {\n    const payload: any = { bot_token: botToken, brand_id: brandId };\n    if (chatId) {\n      payload.chat_id = chatId;\n    }\n    if (channelUsername) {\n      payload.channel_username = channelUsername;\n    }\n    const response = await api.post('/api/social-media/channels/add-by-username', payload);\n    return response.data;\n  },\n\n  // Assign users to channel\n  assignUsersToChannel: async (channelId: number, userIds: number[]): Promise<any> => {\n    const response = await api.put(`/api/social-media/channels/${channelId}/assign-users`, { user_ids: userIds });\n    return response.data;\n  },\n\n  // Get assigned users for channel\n  getChannelAssignedUsers: async (channelId: number): Promise<any> => {\n    const response = await api.get(`/api/social-media/channels/${channelId}/assigned-users`);\n    return response.data;\n  },\n\n  // Assign channel to brand and users\n  assignChannel: async (channelId: number, data: { brand_id?: number; user_ids?: number[] }): Promise<any> => {\n    const response = await api.post(`/api/social-media/channels/${channelId}/assign`, data);\n    return response.data;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}