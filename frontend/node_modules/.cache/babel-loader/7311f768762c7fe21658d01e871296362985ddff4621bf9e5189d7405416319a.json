{"ast":null,"code":"import _objectSpread from\"C:/Users/ilker/Desktop/aibrands/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import api from'../utils/api';export const usersAPI={getUsers:async function(){let page=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;let per_page=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;let role=arguments.length>2?arguments[2]:undefined;let brand_id=arguments.length>3?arguments[3]:undefined;const params=new URLSearchParams({page:page.toString(),per_page:per_page.toString()});if(role)params.append('role',role);if(brand_id)params.append('brand_id',brand_id.toString());const response=await api.get(\"/api/users?\".concat(params));return response.data;},getUser:async userId=>{const response=await api.get(\"/api/users/\".concat(userId));return response.data;},createUser:async data=>{const response=await api.post('/api/users',data);return response.data;},updateUser:async function(userId,data){let sendEmail=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;const response=await api.put(\"/api/users/\".concat(userId),_objectSpread(_objectSpread({},data),{},{send_email:sendEmail}));return response.data;},updatePassword:async(userId,data)=>{const response=await api.put(\"/api/users/\".concat(userId,\"/password\"),data);return response.data;},activateUser:async userId=>{const response=await api.put(\"/api/users/\".concat(userId,\"/activate\"));return response.data;},deactivateUser:async userId=>{const response=await api.put(\"/api/users/\".concat(userId,\"/deactivate\"));return response.data;},assignBrand:async(userId,brandId)=>{const response=await api.post(\"/api/users/\".concat(userId,\"/assign-brand/\").concat(brandId));return response.data;},removeBrand:async(userId,brandId)=>{const response=await api.delete(\"/api/users/\".concat(userId,\"/remove-brand/\").concat(brandId));return response.data;},// Kullanıcı aktivite durumu\ngetUserActivities:async()=>{const response=await api.get('/api/users/activities');return response.data;},// Çevrimiçi kullanıcıları getir\ngetOnlineUsers:async()=>{const response=await api.get('/api/users/online');return response.data;},// Kullanıcı durumunu güncelle (heartbeat)\nupdateUserStatus:async(status,current_action)=>{const response=await api.post('/api/users/status',{status,current_action});return response.data;},// Sistem istatistikleri\ngetSystemStats:async()=>{const response=await api.get('/api/users/system-stats');return response.data;}};","map":{"version":3,"names":["api","usersAPI","getUsers","page","arguments","length","undefined","per_page","role","brand_id","params","URLSearchParams","toString","append","response","get","concat","data","getUser","userId","createUser","post","updateUser","sendEmail","put","_objectSpread","send_email","updatePassword","activateUser","deactivateUser","assignBrand","brandId","removeBrand","delete","getUserActivities","getOnlineUsers","updateUserStatus","status","current_action","getSystemStats"],"sources":["C:/Users/ilker/Desktop/aibrands/frontend/src/api/users.ts"],"sourcesContent":["import api from '../utils/api';\n\nexport interface User {\n  id: number;\n  email: string;\n  first_name: string;\n  last_name: string;\n  role: string;\n  role_id: number;\n  brand_ids: number[];\n  is_active: boolean;\n  is_2fa_enabled: boolean;\n  last_login: string | null;\n  failed_login_attempts?: number;\n  created_at: string;\n  updated_at: string;\n  last_seen_at?: string;\n  is_online?: boolean;\n}\n\nexport interface UserActivity {\n  id: number;\n  email: string;\n  first_name: string;\n  last_name: string;\n  role: string;\n  brand_names: string[];\n  is_online: boolean;\n  last_seen_at: string;\n  status: 'online' | 'away' | 'offline';\n  current_action?: string;\n}\n\nexport interface UserCreate {\n  email: string;\n  password: string;\n  first_name: string;\n  last_name: string;\n  role_id: number;\n  brand_ids?: number[];\n}\n\nexport interface UserUpdate {\n  first_name?: string;\n  last_name?: string;\n  email?: string;\n  role_id?: number;\n  brand_ids?: number[];\n  is_active?: boolean;\n}\n\nexport interface UserPasswordUpdate {\n  current_password?: string;\n  new_password: string;\n}\n\nexport interface UserListResponse {\n  users: User[];\n  total: number;\n  page: number;\n  per_page: number;\n}\n\nexport const usersAPI = {\n  getUsers: async (page = 1, per_page = 10, role?: string, brand_id?: number): Promise<UserListResponse> => {\n    const params = new URLSearchParams({\n      page: page.toString(),\n      per_page: per_page.toString(),\n    });\n    \n    if (role) params.append('role', role);\n    if (brand_id) params.append('brand_id', brand_id.toString());\n    \n    const response = await api.get(`/api/users?${params}`);\n    return response.data;\n  },\n\n  getUser: async (userId: number): Promise<User> => {\n    const response = await api.get(`/api/users/${userId}`);\n    return response.data;\n  },\n\n  createUser: async (data: UserCreate): Promise<User> => {\n    const response = await api.post('/api/users', data);\n    return response.data;\n  },\n\n  updateUser: async (userId: number, data: UserUpdate, sendEmail: boolean = true): Promise<User> => {\n    const response = await api.put(`/api/users/${userId}`, { ...data, send_email: sendEmail });\n    return response.data;\n  },\n\n  updatePassword: async (userId: number, data: UserPasswordUpdate): Promise<{ message: string }> => {\n    const response = await api.put(`/api/users/${userId}/password`, data);\n    return response.data;\n  },\n\n  activateUser: async (userId: number): Promise<{ message: string }> => {\n    const response = await api.put(`/api/users/${userId}/activate`);\n    return response.data;\n  },\n\n  deactivateUser: async (userId: number): Promise<{ message: string }> => {\n    const response = await api.put(`/api/users/${userId}/deactivate`);\n    return response.data;\n  },\n\n  assignBrand: async (userId: number, brandId: number): Promise<{ message: string }> => {\n    const response = await api.post(`/api/users/${userId}/assign-brand/${brandId}`);\n    return response.data;\n  },\n\n  removeBrand: async (userId: number, brandId: number): Promise<{ message: string }> => {\n    const response = await api.delete(`/api/users/${userId}/remove-brand/${brandId}`);\n    return response.data;\n  },\n\n\n  // Kullanıcı aktivite durumu\n  getUserActivities: async (): Promise<UserActivity[]> => {\n    const response = await api.get('/api/users/activities');\n    return response.data;\n  },\n\n  // Çevrimiçi kullanıcıları getir\n  getOnlineUsers: async (): Promise<UserActivity[]> => {\n    const response = await api.get('/api/users/online');\n    return response.data;\n  },\n\n  // Kullanıcı durumunu güncelle (heartbeat)\n  updateUserStatus: async (status: 'online' | 'away', current_action?: string): Promise<{ message: string }> => {\n    const response = await api.post('/api/users/status', { status, current_action });\n    return response.data;\n  },\n\n  // Sistem istatistikleri\n  getSystemStats: async (): Promise<{\n    total_users: number;\n    online_users: number;\n    active_today: number;\n    system_status: string;\n    last_update: string;\n  }> => {\n    const response = await api.get('/api/users/system-stats');\n    return response.data;\n  },\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}