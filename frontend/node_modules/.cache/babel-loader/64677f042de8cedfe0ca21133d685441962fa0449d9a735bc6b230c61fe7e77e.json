{"ast":null,"code":"import api from'../../utils/api';export const brandsAPI={// Get all brands with pagination and filtering\ngetBrands:async function(){let page=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;let perPage=arguments.length>1&&arguments[1]!==undefined?arguments[1]:20;let search=arguments.length>2?arguments[2]:undefined;let category=arguments.length>3?arguments[3]:undefined;let isActive=arguments.length>4?arguments[4]:undefined;const params=new URLSearchParams({page:page.toString(),per_page:perPage.toString()});if(search)params.append('search',search);if(category)params.append('category',category);if(isActive!==undefined)params.append('is_active',isActive.toString());const response=await api.get(\"/api/brands?\".concat(params));return response.data;},// Get brand by ID\ngetBrand:async id=>{const response=await api.get(\"/api/brands/\".concat(id));return response.data;},// Create new brand\ncreateBrand:async brandData=>{const response=await api.post('/api/brands',brandData);return response.data;},// Update brand\nupdateBrand:async(id,brandData)=>{const response=await api.put(\"/api/brands/\".concat(id),brandData);return response.data;},// Delete brand\ndeleteBrand:async id=>{const response=await api.delete(\"/api/brands/\".concat(id));return response.data;},// Get brand categories\ngetBrandCategories:async()=>{const response=await api.get('/api/brands/categories');return response.data;},// Get brands by user access\ngetUserBrands:async()=>{const response=await api.get('/api/brands/user');return response.data;},// Assign template to brands\nassignTemplateToBrands:async(templateId,brandIds)=>{const response=await api.post('/api/brands/assign-template',{template_id:templateId,brand_ids:brandIds});return response.data;},// Get brand templates\ngetBrandTemplates:async brandId=>{const response=await api.get(\"/api/brands/\".concat(brandId,\"/templates\"));return response.data;},// Get brand statistics\ngetBrandStats:async brandId=>{const response=await api.get(\"/api/brands/\".concat(brandId,\"/stats\"));return response.data;}};","map":{"version":3,"names":["api","brandsAPI","getBrands","page","arguments","length","undefined","perPage","search","category","isActive","params","URLSearchParams","toString","per_page","append","response","get","concat","data","getBrand","id","createBrand","brandData","post","updateBrand","put","deleteBrand","delete","getBrandCategories","getUserBrands","assignTemplateToBrands","templateId","brandIds","template_id","brand_ids","getBrandTemplates","brandId","getBrandStats"],"sources":["C:/Users/ilker/Desktop/aibrands/frontend/src/services/api/brands.ts"],"sourcesContent":["import api from '../../utils/api';\r\n\r\nexport interface Brand {\r\n  id: number;\r\n  name: string;\r\n  logo?: string;\r\n  description?: string;\r\n  category: string;\r\n  isActive: boolean;\r\n  userCount: number;\r\n  templateCount: number;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface BrandCreateRequest {\r\n  name: string;\r\n  description?: string;\r\n  category: string;\r\n  logo?: string;\r\n}\r\n\r\nexport interface BrandUpdateRequest {\r\n  name?: string;\r\n  description?: string;\r\n  category?: string;\r\n  logo?: string;\r\n  isActive?: boolean;\r\n}\r\n\r\nexport interface BrandsResponse {\r\n  brands: Brand[];\r\n  total: number;\r\n  page: number;\r\n  per_page: number;\r\n  total_pages: number;\r\n}\r\n\r\nexport const brandsAPI = {\r\n  // Get all brands with pagination and filtering\r\n  getBrands: async (\r\n    page: number = 1,\r\n    perPage: number = 20,\r\n    search?: string,\r\n    category?: string,\r\n    isActive?: boolean\r\n  ): Promise<BrandsResponse> => {\r\n    const params = new URLSearchParams({\r\n      page: page.toString(),\r\n      per_page: perPage.toString(),\r\n    });\r\n    \r\n    if (search) params.append('search', search);\r\n    if (category) params.append('category', category);\r\n    if (isActive !== undefined) params.append('is_active', isActive.toString());\r\n    \r\n    const response = await api.get(`/api/brands?${params}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get brand by ID\r\n  getBrand: async (id: number): Promise<Brand> => {\r\n    const response = await api.get(`/api/brands/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Create new brand\r\n  createBrand: async (brandData: BrandCreateRequest): Promise<Brand> => {\r\n    const response = await api.post('/api/brands', brandData);\r\n    return response.data;\r\n  },\r\n\r\n  // Update brand\r\n  updateBrand: async (id: number, brandData: BrandUpdateRequest): Promise<Brand> => {\r\n    const response = await api.put(`/api/brands/${id}`, brandData);\r\n    return response.data;\r\n  },\r\n\r\n  // Delete brand\r\n  deleteBrand: async (id: number): Promise<{ success: boolean; message: string }> => {\r\n    const response = await api.delete(`/api/brands/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get brand categories\r\n  getBrandCategories: async (): Promise<string[]> => {\r\n    const response = await api.get('/api/brands/categories');\r\n    return response.data;\r\n  },\r\n\r\n  // Get brands by user access\r\n  getUserBrands: async (): Promise<Brand[]> => {\r\n    const response = await api.get('/api/brands/user');\r\n    return response.data;\r\n  },\r\n\r\n  // Assign template to brands\r\n  assignTemplateToBrands: async (\r\n    templateId: string,\r\n    brandIds: number[]\r\n  ): Promise<{ success: boolean; message: string }> => {\r\n    const response = await api.post('/api/brands/assign-template', {\r\n      template_id: templateId,\r\n      brand_ids: brandIds\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Get brand templates\r\n  getBrandTemplates: async (brandId: number): Promise<any[]> => {\r\n    const response = await api.get(`/api/brands/${brandId}/templates`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get brand statistics\r\n  getBrandStats: async (brandId: number): Promise<{\r\n    totalUsers: number;\r\n    totalTemplates: number;\r\n    totalProducts: number;\r\n    activeTemplates: number;\r\n  }> => {\r\n    const response = await api.get(`/api/brands/${brandId}/stats`);\r\n    return response.data;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}