{"ast":null,"code":"import api from '../utils/api';\nexport const settingsAPI = {\n  getSettings: async () => {\n    // Use authenticated endpoint to get all settings (sensitive values masked for non-super-admin)\n    const response = await api.get('/api/settings/');\n    return response.data;\n  },\n  getSetting: async keyName => {\n    const response = await api.get(`/api/settings/${keyName}`);\n    return response.data;\n  },\n  updateSetting: async (keyName, value, category = 'general') => {\n    const response = await api.post(`/api/settings/${category}/${keyName}`, null, {\n      params: {\n        value\n      }\n    });\n    return response.data;\n  },\n  getCategorySettings: async category => {\n    const response = await api.get(`/api/settings/category/${category}`);\n    return response.data.settings || [];\n  },\n  updateCategorySetting: async (category, key, value) => {\n    await api.post(`/api/settings/${category}/${key}`, null, {\n      params: {\n        value\n      }\n    });\n  },\n  updateSettings: async settings => {\n    await api.put('/api/settings/bulk', {\n      settings\n    });\n  },\n  resetSetting: async keyName => {\n    const response = await api.post(`/api/settings/${keyName}/reset`);\n    return response.data;\n  },\n  getSystemInfo: async () => {\n    const response = await api.get('/api/settings/system-info');\n    return response.data;\n  },\n  testEmail: async testData => {\n    await api.post('/api/settings/test-email', testData);\n  }\n};","map":{"version":3,"names":["api","settingsAPI","getSettings","response","get","data","getSetting","keyName","updateSetting","value","category","post","params","getCategorySettings","settings","updateCategorySetting","key","updateSettings","put","resetSetting","getSystemInfo","testEmail","testData"],"sources":["C:/Users/ilker/Desktop/aibrands/frontend/src/api/settings.ts"],"sourcesContent":["import api from '../utils/api';\n\nexport interface Setting {\n  id: number;\n  category: string;\n  key: string;\n  value: string;\n  description: string;\n  is_active: boolean;\n  is_sensitive: boolean;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface SettingUpdate {\n  key: string;\n  value: string;\n}\n\nexport interface SettingsResponse {\n  settings: Setting[];\n  total: number;\n}\n\nexport interface CategorySettingsResponse {\n  category: string;\n  settings: Setting[];\n}\n\nexport const settingsAPI = {\n  getSettings: async (): Promise<SettingsResponse> => {\n    // Use authenticated endpoint to get all settings (sensitive values masked for non-super-admin)\n    const response = await api.get('/api/settings/');\n    return response.data;\n  },\n\n  getSetting: async (keyName: string): Promise<Setting> => {\n    const response = await api.get(`/api/settings/${keyName}`);\n    return response.data;\n  },\n\n  updateSetting: async (keyName: string, value: string, category: string = 'general'): Promise<Setting> => {\n    const response = await api.post(`/api/settings/${category}/${keyName}`, null, {\n      params: { value }\n    });\n    return response.data;\n  },\n\n  getCategorySettings: async (category: string): Promise<Setting[]> => {\n    const response = await api.get(`/api/settings/category/${category}`);\n    return response.data.settings || [];\n  },\n\n  updateCategorySetting: async (category: string, key: string, value: string): Promise<void> => {\n    await api.post(`/api/settings/${category}/${key}`, null, {\n      params: { value }\n    });\n  },\n\n  updateSettings: async (settings: SettingUpdate[]): Promise<void> => {\n    await api.put('/api/settings/bulk', { settings });\n  },\n\n  resetSetting: async (keyName: string): Promise<Setting> => {\n    const response = await api.post(`/api/settings/${keyName}/reset`);\n    return response.data;\n  },\n\n  getSystemInfo: async (): Promise<{\n    database_version: string;\n    platform_version: string;\n    last_updated: string;\n    total_users: number;\n    total_brands: number;\n    total_branches: number;\n  }> => {\n    const response = await api.get('/api/settings/system-info');\n    return response.data;\n  },\n\n  testEmail: async (testData: {\n    to_email: string;\n    subject: string;\n    message: string;\n  }): Promise<void> => {\n    await api.post('/api/settings/test-email', testData);\n  },\n};\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,cAAc;AA6B9B,OAAO,MAAMC,WAAW,GAAG;EACzBC,WAAW,EAAE,MAAAA,CAAA,KAAuC;IAClD;IACA,MAAMC,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,gBAAgB,CAAC;IAChD,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC;EAEDC,UAAU,EAAE,MAAOC,OAAe,IAAuB;IACvD,MAAMJ,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,iBAAiBG,OAAO,EAAE,CAAC;IAC1D,OAAOJ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAEDG,aAAa,EAAE,MAAAA,CAAOD,OAAe,EAAEE,KAAa,EAAEC,QAAgB,GAAG,SAAS,KAAuB;IACvG,MAAMP,QAAQ,GAAG,MAAMH,GAAG,CAACW,IAAI,CAAC,iBAAiBD,QAAQ,IAAIH,OAAO,EAAE,EAAE,IAAI,EAAE;MAC5EK,MAAM,EAAE;QAAEH;MAAM;IAClB,CAAC,CAAC;IACF,OAAON,QAAQ,CAACE,IAAI;EACtB,CAAC;EAEDQ,mBAAmB,EAAE,MAAOH,QAAgB,IAAyB;IACnE,MAAMP,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,0BAA0BM,QAAQ,EAAE,CAAC;IACpE,OAAOP,QAAQ,CAACE,IAAI,CAACS,QAAQ,IAAI,EAAE;EACrC,CAAC;EAEDC,qBAAqB,EAAE,MAAAA,CAAOL,QAAgB,EAAEM,GAAW,EAAEP,KAAa,KAAoB;IAC5F,MAAMT,GAAG,CAACW,IAAI,CAAC,iBAAiBD,QAAQ,IAAIM,GAAG,EAAE,EAAE,IAAI,EAAE;MACvDJ,MAAM,EAAE;QAAEH;MAAM;IAClB,CAAC,CAAC;EACJ,CAAC;EAEDQ,cAAc,EAAE,MAAOH,QAAyB,IAAoB;IAClE,MAAMd,GAAG,CAACkB,GAAG,CAAC,oBAAoB,EAAE;MAAEJ;IAAS,CAAC,CAAC;EACnD,CAAC;EAEDK,YAAY,EAAE,MAAOZ,OAAe,IAAuB;IACzD,MAAMJ,QAAQ,GAAG,MAAMH,GAAG,CAACW,IAAI,CAAC,iBAAiBJ,OAAO,QAAQ,CAAC;IACjE,OAAOJ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAEDe,aAAa,EAAE,MAAAA,CAAA,KAOT;IACJ,MAAMjB,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,2BAA2B,CAAC;IAC3D,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC;EAEDgB,SAAS,EAAE,MAAOC,QAIjB,IAAoB;IACnB,MAAMtB,GAAG,CAACW,IAAI,CAAC,0BAA0B,EAAEW,QAAQ,CAAC;EACtD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}