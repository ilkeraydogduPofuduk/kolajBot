{"ast":null,"code":"import api from '../../utils/api';\nexport const brandsAPI = {\n  // Get all brands with pagination and filtering\n  getBrands: async (page = 1, perPage = 20, search, category, isActive) => {\n    const params = new URLSearchParams({\n      page: page.toString(),\n      per_page: perPage.toString()\n    });\n    if (search) params.append('search', search);\n    if (category) params.append('category', category);\n    if (isActive !== undefined) params.append('is_active', isActive.toString());\n    const response = await api.get(`/api/brands?${params}`);\n    return response.data;\n  },\n  // Get brand by ID\n  getBrand: async id => {\n    const response = await api.get(`/api/brands/${id}`);\n    return response.data;\n  },\n  // Create new brand\n  createBrand: async brandData => {\n    const response = await api.post('/api/brands', brandData);\n    return response.data;\n  },\n  // Update brand\n  updateBrand: async (id, brandData) => {\n    const response = await api.put(`/api/brands/${id}`, brandData);\n    return response.data;\n  },\n  // Delete brand\n  deleteBrand: async id => {\n    const response = await api.delete(`/api/brands/${id}`);\n    return response.data;\n  },\n  // Get brand categories\n  getBrandCategories: async () => {\n    const response = await api.get('/api/brands/categories');\n    return response.data;\n  },\n  // Get brands by user access\n  getUserBrands: async () => {\n    const response = await api.get('/api/brands/user');\n    return response.data;\n  },\n  // Assign template to brands\n  assignTemplateToBrands: async (templateId, brandIds) => {\n    const response = await api.post('/api/brands/assign-template', {\n      template_id: templateId,\n      brand_ids: brandIds\n    });\n    return response.data;\n  },\n  // Get brand templates\n  getBrandTemplates: async brandId => {\n    const response = await api.get(`/api/brands/${brandId}/templates`);\n    return response.data;\n  },\n  // Get brand statistics\n  getBrandStats: async brandId => {\n    const response = await api.get(`/api/brands/${brandId}/stats`);\n    return response.data;\n  }\n};","map":{"version":3,"names":["api","brandsAPI","getBrands","page","perPage","search","category","isActive","params","URLSearchParams","toString","per_page","append","undefined","response","get","data","getBrand","id","createBrand","brandData","post","updateBrand","put","deleteBrand","delete","getBrandCategories","getUserBrands","assignTemplateToBrands","templateId","brandIds","template_id","brand_ids","getBrandTemplates","brandId","getBrandStats"],"sources":["C:/Users/ilker/Desktop/aibrands/frontend/src/services/api/brands.ts"],"sourcesContent":["import api from '../../utils/api';\r\n\r\nexport interface Brand {\r\n  id: number;\r\n  name: string;\r\n  logo?: string;\r\n  description?: string;\r\n  category: string;\r\n  isActive: boolean;\r\n  userCount: number;\r\n  templateCount: number;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface BrandCreateRequest {\r\n  name: string;\r\n  description?: string;\r\n  category: string;\r\n  logo?: string;\r\n}\r\n\r\nexport interface BrandUpdateRequest {\r\n  name?: string;\r\n  description?: string;\r\n  category?: string;\r\n  logo?: string;\r\n  isActive?: boolean;\r\n}\r\n\r\nexport interface BrandsResponse {\r\n  brands: Brand[];\r\n  total: number;\r\n  page: number;\r\n  per_page: number;\r\n  total_pages: number;\r\n}\r\n\r\nexport const brandsAPI = {\r\n  // Get all brands with pagination and filtering\r\n  getBrands: async (\r\n    page: number = 1,\r\n    perPage: number = 20,\r\n    search?: string,\r\n    category?: string,\r\n    isActive?: boolean\r\n  ): Promise<BrandsResponse> => {\r\n    const params = new URLSearchParams({\r\n      page: page.toString(),\r\n      per_page: perPage.toString(),\r\n    });\r\n    \r\n    if (search) params.append('search', search);\r\n    if (category) params.append('category', category);\r\n    if (isActive !== undefined) params.append('is_active', isActive.toString());\r\n    \r\n    const response = await api.get(`/api/brands?${params}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get brand by ID\r\n  getBrand: async (id: number): Promise<Brand> => {\r\n    const response = await api.get(`/api/brands/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Create new brand\r\n  createBrand: async (brandData: BrandCreateRequest): Promise<Brand> => {\r\n    const response = await api.post('/api/brands', brandData);\r\n    return response.data;\r\n  },\r\n\r\n  // Update brand\r\n  updateBrand: async (id: number, brandData: BrandUpdateRequest): Promise<Brand> => {\r\n    const response = await api.put(`/api/brands/${id}`, brandData);\r\n    return response.data;\r\n  },\r\n\r\n  // Delete brand\r\n  deleteBrand: async (id: number): Promise<{ success: boolean; message: string }> => {\r\n    const response = await api.delete(`/api/brands/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get brand categories\r\n  getBrandCategories: async (): Promise<string[]> => {\r\n    const response = await api.get('/api/brands/categories');\r\n    return response.data;\r\n  },\r\n\r\n  // Get brands by user access\r\n  getUserBrands: async (): Promise<Brand[]> => {\r\n    const response = await api.get('/api/brands/user');\r\n    return response.data;\r\n  },\r\n\r\n  // Assign template to brands\r\n  assignTemplateToBrands: async (\r\n    templateId: string,\r\n    brandIds: number[]\r\n  ): Promise<{ success: boolean; message: string }> => {\r\n    const response = await api.post('/api/brands/assign-template', {\r\n      template_id: templateId,\r\n      brand_ids: brandIds\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Get brand templates\r\n  getBrandTemplates: async (brandId: number): Promise<any[]> => {\r\n    const response = await api.get(`/api/brands/${brandId}/templates`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get brand statistics\r\n  getBrandStats: async (brandId: number): Promise<{\r\n    totalUsers: number;\r\n    totalTemplates: number;\r\n    totalProducts: number;\r\n    activeTemplates: number;\r\n  }> => {\r\n    const response = await api.get(`/api/brands/${brandId}/stats`);\r\n    return response.data;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}