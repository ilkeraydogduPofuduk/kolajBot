{"ast":null,"code":"import api from'../../utils/api';export const templatesAPI={// Get all templates with pagination and filtering\ngetTemplates:async function(){let page=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;let perPage=arguments.length>1&&arguments[1]!==undefined?arguments[1]:20;let search=arguments.length>2?arguments[2]:undefined;let category=arguments.length>3?arguments[3]:undefined;let templateType=arguments.length>4?arguments[4]:undefined;let visibility=arguments.length>5?arguments[5]:undefined;let isMaster=arguments.length>6?arguments[6]:undefined;const params=new URLSearchParams({page:page.toString(),per_page:perPage.toString()});if(search)params.append('search',search);if(category)params.append('category',category);if(templateType)params.append('template_type',templateType);if(visibility)params.append('visibility',visibility);if(isMaster!==undefined)params.append('is_master',isMaster.toString());const response=await api.get(\"/api/templates?\".concat(params));return response.data;},// Get template by ID\ngetTemplate:async id=>{const response=await api.get(\"/api/templates/\".concat(id));return response.data;},// Create new template\ncreateTemplate:async templateData=>{const response=await api.post('/api/templates',templateData);return response.data;},// Update template\nupdateTemplate:async(id,templateData)=>{const response=await api.put(\"/api/templates/\".concat(id),templateData);return response.data;},// Delete template\ndeleteTemplate:async id=>{const response=await api.delete(\"/api/templates/\".concat(id));return response.data;},// Get user's templates\ngetUserTemplates:async()=>{const response=await api.get('/api/templates/user');return response.data;},// Get master templates (gallery)\ngetMasterTemplates:async()=>{const response=await api.get('/api/templates/master');return response.data;},// Copy template\ncopyTemplate:async(id,newName)=>{const response=await api.post(\"/api/templates/\".concat(id,\"/copy\"),{name:newName});return response.data;},// Generate template from data\ngenerateTemplate:async(templateId,data)=>{const response=await api.post(\"/api/templates/\".concat(templateId,\"/generate\"),{data});return response.data;},// Preview template with data\npreviewTemplate:async(templateId,data)=>{const response=await api.post(\"/api/templates/\".concat(templateId,\"/preview\"),{data});return response.data;},// Export template\nexportTemplate:async(templateId,format,data)=>{const response=await api.post(\"/api/templates/\".concat(templateId,\"/export\"),{format,data});return response.data;},// Get template categories\ngetTemplateCategories:async()=>{const response=await api.get('/api/templates/categories');return response.data;},// Get template statistics\ngetTemplateStats:async templateId=>{const response=await api.get(\"/api/templates/\".concat(templateId,\"/stats\"));return response.data;},// Save template as draft\nsaveDraft:async templateData=>{const response=await api.post('/api/templates/draft',templateData);return response.data;},// Load draft\nloadDraft:async draftId=>{const response=await api.get(\"/api/templates/draft/\".concat(draftId));return response.data;},// Get user drafts\ngetUserDrafts:async()=>{const response=await api.get('/api/templates/drafts');return response.data;}};","map":{"version":3,"names":["api","templatesAPI","getTemplates","page","arguments","length","undefined","perPage","search","category","templateType","visibility","isMaster","params","URLSearchParams","toString","per_page","append","response","get","concat","data","getTemplate","id","createTemplate","templateData","post","updateTemplate","put","deleteTemplate","delete","getUserTemplates","getMasterTemplates","copyTemplate","newName","name","generateTemplate","templateId","previewTemplate","exportTemplate","format","getTemplateCategories","getTemplateStats","saveDraft","loadDraft","draftId","getUserDrafts"],"sources":["C:/Users/ilker/Desktop/aibrands/frontend/src/services/api/templates.ts"],"sourcesContent":["import api from '../../utils/api';\r\n\r\nexport interface Template {\r\n  id: string;\r\n  name: string;\r\n  description?: string;\r\n  template_type: 'collage' | 'social_media' | 'banner' | 'poster';\r\n  type?: string; // For backward compatibility\r\n  template_data: any;\r\n  canvas_data?: any;\r\n  thumbnail?: string;\r\n  is_active: boolean;\r\n  is_auto_generated: boolean;\r\n  is_master_template: boolean;\r\n  product_id?: number;\r\n  brand_id?: number;\r\n  created_by: number;\r\n  visibility: 'PUBLIC' | 'PRIVATE' | 'BRAND_ONLY';\r\n  category?: string;\r\n  subcategory?: string;\r\n  placeholders: Placeholder[];\r\n  assigned_brands: number[];\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface Placeholder {\r\n  id: string;\r\n  name: string;\r\n  type: 'text' | 'image' | 'number' | 'date' | 'boolean' | 'array';\r\n  value?: any;\r\n  placeholder: string;\r\n  required: boolean;\r\n  validation?: {\r\n    min?: number;\r\n    max?: number;\r\n    pattern?: string;\r\n    message?: string;\r\n  };\r\n  category: 'product' | 'brand' | 'contact' | 'general';\r\n}\r\n\r\nexport interface TemplateCreateRequest {\r\n  name: string;\r\n  description?: string;\r\n  template_type: string;\r\n  template_data: any;\r\n  canvas_data?: any;\r\n  category?: string;\r\n  subcategory?: string;\r\n  placeholders: Placeholder[];\r\n  visibility: 'PUBLIC' | 'PRIVATE' | 'BRAND_ONLY';\r\n}\r\n\r\nexport interface TemplateUpdateRequest {\r\n  name?: string;\r\n  description?: string;\r\n  template_data?: any;\r\n  canvas_data?: any;\r\n  placeholders?: Placeholder[];\r\n  visibility?: 'PUBLIC' | 'PRIVATE' | 'BRAND_ONLY';\r\n  is_active?: boolean;\r\n}\r\n\r\nexport interface TemplatesResponse {\r\n  templates: Template[];\r\n  total: number;\r\n  page: number;\r\n  per_page: number;\r\n  total_pages: number;\r\n}\r\n\r\nexport interface TemplatePreviewData {\r\n  [key: string]: any;\r\n}\r\n\r\nexport const templatesAPI = {\r\n  // Get all templates with pagination and filtering\r\n  getTemplates: async (\r\n    page: number = 1,\r\n    perPage: number = 20,\r\n    search?: string,\r\n    category?: string,\r\n    templateType?: string,\r\n    visibility?: string,\r\n    isMaster?: boolean\r\n  ): Promise<TemplatesResponse> => {\r\n    const params = new URLSearchParams({\r\n      page: page.toString(),\r\n      per_page: perPage.toString(),\r\n    });\r\n    \r\n    if (search) params.append('search', search);\r\n    if (category) params.append('category', category);\r\n    if (templateType) params.append('template_type', templateType);\r\n    if (visibility) params.append('visibility', visibility);\r\n    if (isMaster !== undefined) params.append('is_master', isMaster.toString());\r\n    \r\n    const response = await api.get(`/api/templates?${params}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get template by ID\r\n  getTemplate: async (id: string): Promise<Template> => {\r\n    const response = await api.get(`/api/templates/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Create new template\r\n  createTemplate: async (templateData: TemplateCreateRequest): Promise<Template> => {\r\n    const response = await api.post('/api/templates', templateData);\r\n    return response.data;\r\n  },\r\n\r\n  // Update template\r\n  updateTemplate: async (id: string, templateData: TemplateUpdateRequest): Promise<Template> => {\r\n    const response = await api.put(`/api/templates/${id}`, templateData);\r\n    return response.data;\r\n  },\r\n\r\n  // Delete template\r\n  deleteTemplate: async (id: string): Promise<{ success: boolean; message: string }> => {\r\n    const response = await api.delete(`/api/templates/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get user's templates\r\n  getUserTemplates: async (): Promise<Template[]> => {\r\n    const response = await api.get('/api/templates/user');\r\n    return response.data;\r\n  },\r\n\r\n  // Get master templates (gallery)\r\n  getMasterTemplates: async (): Promise<Template[]> => {\r\n    const response = await api.get('/api/templates/master');\r\n    return response.data;\r\n  },\r\n\r\n  // Copy template\r\n  copyTemplate: async (id: string, newName?: string): Promise<Template> => {\r\n    const response = await api.post(`/api/templates/${id}/copy`, { name: newName });\r\n    return response.data;\r\n  },\r\n\r\n  // Generate template from data\r\n  generateTemplate: async (\r\n    templateId: string,\r\n    data: TemplatePreviewData\r\n  ): Promise<{ success: boolean; result: any; error?: string }> => {\r\n    const response = await api.post(`/api/templates/${templateId}/generate`, { data });\r\n    return response.data;\r\n  },\r\n\r\n  // Preview template with data\r\n  previewTemplate: async (\r\n    templateId: string,\r\n    data: TemplatePreviewData\r\n  ): Promise<{ success: boolean; preview_url: string; error?: string }> => {\r\n    const response = await api.post(`/api/templates/${templateId}/preview`, { data });\r\n    return response.data;\r\n  },\r\n\r\n  // Export template\r\n  exportTemplate: async (\r\n    templateId: string,\r\n    format: 'png' | 'jpg' | 'pdf',\r\n    data?: TemplatePreviewData\r\n  ): Promise<{ success: boolean; download_url: string; error?: string }> => {\r\n    const response = await api.post(`/api/templates/${templateId}/export`, { \r\n      format, \r\n      data \r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Get template categories\r\n  getTemplateCategories: async (): Promise<string[]> => {\r\n    const response = await api.get('/api/templates/categories');\r\n    return response.data;\r\n  },\r\n\r\n  // Get template statistics\r\n  getTemplateStats: async (templateId: string): Promise<{\r\n    usage_count: number;\r\n    assigned_brands: number;\r\n    last_used: string;\r\n    generation_count: number;\r\n  }> => {\r\n    const response = await api.get(`/api/templates/${templateId}/stats`);\r\n    return response.data;\r\n  },\r\n\r\n  // Save template as draft\r\n  saveDraft: async (templateData: any): Promise<{ success: boolean; draft_id: string }> => {\r\n    const response = await api.post('/api/templates/draft', templateData);\r\n    return response.data;\r\n  },\r\n\r\n  // Load draft\r\n  loadDraft: async (draftId: string): Promise<any> => {\r\n    const response = await api.get(`/api/templates/draft/${draftId}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get user drafts\r\n  getUserDrafts: async (): Promise<any[]> => {\r\n    const response = await api.get('/api/templates/drafts');\r\n    return response.data;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}