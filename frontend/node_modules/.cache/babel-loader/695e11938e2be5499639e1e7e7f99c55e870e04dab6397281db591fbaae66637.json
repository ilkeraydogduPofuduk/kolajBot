{"ast":null,"code":"import api from'../utils/api';export const productsAPI={// Get products list\ngetProducts:async function(){let page=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;let per_page=arguments.length>1&&arguments[1]!==undefined?arguments[1]:20;let brand_id=arguments.length>2?arguments[2]:undefined;let search=arguments.length>3?arguments[3]:undefined;let filters=arguments.length>4?arguments[4]:undefined;const params=new URLSearchParams({page:page.toString(),per_page:per_page.toString()});if(brand_id)params.append('brand_id',brand_id.toString());if(search)params.append('search',search);// Add filters\nif(filters){if(filters.product_type)params.append('product_type',filters.product_type);if(filters.color)params.append('color',filters.color);if(filters.size_range)params.append('size_range',filters.size_range);if(filters.price_min)params.append('price_min',filters.price_min);if(filters.price_max)params.append('price_max',filters.price_max);if(filters.incomplete!==undefined)params.append('incomplete',filters.incomplete.toString());if(filters.has_second_product!==undefined)params.append('has_second_product',filters.has_second_product.toString());}const url=\"/api/products?\".concat(params.toString());const response=await api.get(url);return response.data;},// Get single product\ngetProduct:async productId=>{const response=await api.get(\"/api/products/\".concat(productId));return response.data;},// Upload product images (V2 - Enterprise) - Otomatik marka tespiti\nuploadProductImages:async files=>{const formData=new FormData();files.forEach(file=>{formData.append('files',file);});// FINAL: En temiz ve hızlı upload endpoint - marka tespiti otomatik\nconst response=await api.post('/api/products/upload-v2',formData,{headers:{'Content-Type':'multipart/form-data'}});return response.data;},// Get upload job status\ngetUploadJobStatus:async jobId=>{const response=await api.get(\"/api/products/upload-status/\".concat(jobId));return response.data;},// Get product images\ngetProductImages:async productId=>{const response=await api.get(\"/api/products/\".concat(productId,\"/images\"));return response.data;},// Process product with AI\nprocessProductAI:async productId=>{const response=await api.post(\"/api/products/\".concat(productId,\"/process\"));return response.data;},// Get product templates\ngetProductTemplates:async productId=>{const response=await api.get(\"/api/products/\".concat(productId,\"/templates\"));return response.data;},// Generate product template\ngenerateTemplate:async(productId,templateName)=>{const formData=new FormData();formData.append('template_name',templateName);const response=await api.post(\"/api/products/\".concat(productId,\"/generate-template\"),formData,{headers:{'Content-Type':'multipart/form-data'}});return response.data;},// Complete product info (for missing fields)\ncompleteProductInfo:async(productId,completionData)=>{const response=await api.put(\"/api/products/\".concat(productId),completionData);return response.data;},// Complete multiple products info (bulk)\ncompleteProductsBulk:async completionData=>{const response=await api.put('/api/products/complete-bulk',completionData);return response.data;},// Update product\nupdateProduct:async(productId,updateData)=>{const response=await api.put(\"/api/products/\".concat(productId),updateData);return response.data;},// Get filter options\ngetFilterOptions:async()=>{const response=await api.get('/api/products/filter-options');return response.data;}};","map":{"version":3,"names":["api","productsAPI","getProducts","page","arguments","length","undefined","per_page","brand_id","search","filters","params","URLSearchParams","toString","append","product_type","color","size_range","price_min","price_max","incomplete","has_second_product","url","concat","response","get","data","getProduct","productId","uploadProductImages","files","formData","FormData","forEach","file","post","headers","getUploadJobStatus","jobId","getProductImages","processProductAI","getProductTemplates","generateTemplate","templateName","completeProductInfo","completionData","put","completeProductsBulk","updateProduct","updateData","getFilterOptions"],"sources":["C:/Users/ilker/Desktop/aibrands/frontend/src/api/products.ts"],"sourcesContent":["import api from '../utils/api';\r\n\r\nexport interface Product {\r\n  id: number;\r\n  name: string;\r\n  code: string;\r\n  color: string;\r\n  product_type?: string;\r\n  size_range?: string;\r\n  price?: number;\r\n  currency: string;\r\n  // İkinci ürün bilgileri (eğer görselde 2 etiket varsa)\r\n  has_second_product?: boolean;\r\n  code_2?: string;\r\n  color_2?: string;\r\n  product_type_2?: string;\r\n  size_range_2?: string;\r\n  price_2?: number;\r\n  currency_2?: string;\r\n  brand_id: number;\r\n  brand_name?: string;\r\n  brand?: {\r\n    id: number;\r\n    name: string;\r\n  };\r\n  ai_extracted_data?: any;\r\n  is_active: boolean;\r\n  is_processed: boolean;\r\n  created_at: string;\r\n  updated_at: string;\r\n  images?: ProductImage[];\r\n  templates?: ProductTemplate[];\r\n}\r\n\r\nexport interface ProductImage {\r\n  id: number;\r\n  product_id: number;\r\n  filename: string;\r\n  original_filename: string;\r\n  file_path: string;\r\n  file_size?: number;\r\n  mime_type?: string;\r\n  image_type: string;\r\n  angle?: string;\r\n  angle_number?: number;\r\n  is_cover_image: boolean;\r\n  ai_analysis?: any;\r\n  is_active: boolean;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface ProductTemplate {\r\n  id: number;\r\n  product_id: number;\r\n  name: string;\r\n  template_type: string;\r\n  template_data: any;\r\n  generated_image_path?: string;\r\n  is_active: boolean;\r\n  is_default: boolean;\r\n  brand_id: number;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface ProductListResponse {\r\n  products: Product[];\r\n  total: number;\r\n  page: number;\r\n  per_page: number;\r\n  total_pages: number;\r\n}\r\n\r\nexport interface IncompleteProduct {\r\n  product_id: number;\r\n  code: string;\r\n  color: string;\r\n  missing_fields: string[];\r\n}\r\n\r\nexport interface ProductUploadResponse {\r\n  success: boolean;\r\n  message: string;\r\n  uploaded_files: number;\r\n  products_created: number;\r\n  incomplete_products: IncompleteProduct[];\r\n  products: Product[];\r\n  job_id?: number; // Optional job ID for background processing\r\n}\r\n\r\nexport interface ProductFilters {\r\n  product_type?: string;\r\n  color?: string;\r\n  size_range?: string;\r\n  price_min?: string;\r\n  price_max?: string;\r\n  incomplete?: boolean;\r\n  has_second_product?: boolean;\r\n}\r\n\r\nexport const productsAPI = {\r\n  // Get products list\r\n  getProducts: async (\r\n    page: number = 1,\r\n    per_page: number = 20,\r\n    brand_id?: number,\r\n    search?: string,\r\n    filters?: ProductFilters\r\n  ): Promise<ProductListResponse> => {\r\n    const params = new URLSearchParams({\r\n      page: page.toString(),\r\n      per_page: per_page.toString(),\r\n    });\r\n\r\n    if (brand_id) params.append('brand_id', brand_id.toString());\r\n    if (search) params.append('search', search);\r\n    \r\n    // Add filters\r\n    if (filters) {\r\n      if (filters.product_type) params.append('product_type', filters.product_type);\r\n      if (filters.color) params.append('color', filters.color);\r\n      if (filters.size_range) params.append('size_range', filters.size_range);\r\n      if (filters.price_min) params.append('price_min', filters.price_min);\r\n      if (filters.price_max) params.append('price_max', filters.price_max);\r\n      if (filters.incomplete !== undefined) params.append('incomplete', filters.incomplete.toString());\r\n      if (filters.has_second_product !== undefined) params.append('has_second_product', filters.has_second_product.toString());\r\n    }\r\n\r\n    const url = `/api/products?${params.toString()}`;\r\n    const response = await api.get(url);\r\n    return response.data;\r\n  },\r\n\r\n  // Get single product\r\n  getProduct: async (productId: number): Promise<Product> => {\r\n    const response = await api.get(`/api/products/${productId}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Upload product images (V2 - Enterprise) - Otomatik marka tespiti\r\n  uploadProductImages: async (\r\n    files: File[]\r\n  ): Promise<ProductUploadResponse> => {\r\n    const formData = new FormData();\r\n    \r\n    files.forEach(file => {\r\n      formData.append('files', file);\r\n    });\r\n\r\n    // FINAL: En temiz ve hızlı upload endpoint - marka tespiti otomatik\r\n    const response = await api.post('/api/products/upload-v2', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    return response.data;\r\n  },\r\n  \r\n  // Get upload job status\r\n  getUploadJobStatus: async (jobId: number): Promise<any> => {\r\n    const response = await api.get(`/api/products/upload-status/${jobId}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get product images\r\n  getProductImages: async (productId: number): Promise<ProductImage[]> => {\r\n    const response = await api.get(`/api/products/${productId}/images`);\r\n    return response.data;\r\n  },\r\n\r\n  // Process product with AI\r\n  processProductAI: async (productId: number): Promise<{ success: boolean; message: string }> => {\r\n    const response = await api.post(`/api/products/${productId}/process`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get product templates\r\n  getProductTemplates: async (productId: number): Promise<ProductTemplate[]> => {\r\n    const response = await api.get(`/api/products/${productId}/templates`);\r\n    return response.data;\r\n  },\r\n\r\n  // Generate product template\r\n  generateTemplate: async (\r\n    productId: number,\r\n    templateName: string\r\n  ): Promise<{ success: boolean; message: string }> => {\r\n    const formData = new FormData();\r\n    formData.append('template_name', templateName);\r\n\r\n    const response = await api.post(`/api/products/${productId}/generate-template`, formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Complete product info (for missing fields)\r\n  completeProductInfo: async (\r\n    productId: number,\r\n    completionData: {\r\n      color?: string;\r\n      product_type?: string;\r\n      size_range?: string;\r\n      price?: number;\r\n    }\r\n  ): Promise<{ success: boolean; message: string; product: Product }> => {\r\n    const response = await api.put(`/api/products/${productId}`, completionData);\r\n    return response.data;\r\n  },\r\n\r\n  // Complete multiple products info (bulk)\r\n  completeProductsBulk: async (\r\n    completionData: Array<{\r\n      product_id: number;\r\n      product_type?: string;\r\n      size_range?: string;\r\n      price?: number;\r\n    }>\r\n  ): Promise<{ success: boolean; message: string; updated_count: number }> => {\r\n    const response = await api.put('/api/products/complete-bulk', completionData);\r\n    return response.data;\r\n  },\r\n\r\n  // Update product\r\n  updateProduct: async (\r\n    productId: number,\r\n    updateData: {\r\n      color?: string;\r\n      product_type?: string;\r\n      size_range?: string;\r\n      price?: number;\r\n      brand_id?: number;\r\n    }\r\n  ): Promise<{ success: boolean; message: string; product: Product }> => {\r\n    const response = await api.put(`/api/products/${productId}`, updateData);\r\n    return response.data;\r\n  },\r\n\r\n  // Get filter options\r\n  getFilterOptions: async (): Promise<{\r\n    product_types: string[];\r\n    colors: string[];\r\n    size_ranges: string[];\r\n    brands: string[];\r\n  }> => {\r\n    const response = await api.get('/api/products/filter-options');\r\n    return response.data;\r\n  },\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}