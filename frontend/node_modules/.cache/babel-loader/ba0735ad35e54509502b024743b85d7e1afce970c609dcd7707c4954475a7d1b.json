{"ast":null,"code":"/**\r\n * Telegram Bots API\r\n * Admin: Bot token yönetimi\r\n */import api from'../utils/api';export const telegramBotsAPI={/**\r\n   * Bot listesini getir\r\n   */async getBots(){const response=await api.get('/api/telegram-bots');return response.data;},/**\r\n   * Belirli bir botu getir\r\n   */async getBot(botId){const response=await api.get(\"/api/telegram-bots/\".concat(botId));return response.data;},/**\r\n   * Yeni bot ekle (Sadece Admin)\r\n   */async createBot(botData){const response=await api.post('/api/telegram-bots',botData);return response.data;},/**\r\n   * Bot bilgilerini güncelle (Sadece Admin)\r\n   */async updateBot(botId,data){const response=await api.put(\"/api/telegram-bots/\".concat(botId),data);return response.data;},/**\r\n   * Botu sil (Sadece Admin)\r\n   */async deleteBot(botId){await api.delete(\"/api/telegram-bots/\".concat(botId));},/**\r\n   * Bot token'ını doğrula\r\n   */async verifyBot(botId){const response=await api.post(\"/api/telegram-bots/\".concat(botId,\"/verify\"));return response.data;},/**\r\n   * Botun kanalını keşfet\r\n   */async discoverChannelsForBot(botId){const response=await api.post(\"/api/telegram-bots/\".concat(botId,\"/discover-channels\"));return response.data;},/**\r\n   * Bot'a ait kanalları getir\r\n   */async getBotChannels(botId){const response=await api.get(\"/api/telegram-bots/\".concat(botId,\"/channels\"));return response.data;}};","map":{"version":3,"names":["api","telegramBotsAPI","getBots","response","get","data","getBot","botId","concat","createBot","botData","post","updateBot","put","deleteBot","delete","verifyBot","discoverChannelsForBot","getBotChannels"],"sources":["C:/Users/ilker/Desktop/aibrands/frontend/src/api/telegramBots.ts"],"sourcesContent":["/**\r\n * Telegram Bots API\r\n * Admin: Bot token yönetimi\r\n */\r\n\r\nimport api from '../utils/api';\r\n\r\nexport interface TelegramBot {\r\n  id: number;\r\n  bot_name: string;\r\n  bot_username: string;\r\n  bot_user_id?: string;\r\n  is_active: boolean;\r\n  is_verified: boolean;\r\n  last_verified_at?: string;\r\n  created_by: number;\r\n  creator_name?: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n  channel_count?: number;\r\n}\r\n\r\nexport interface TelegramBotCreate {\r\n  bot_token: string; // Sadece token yeterli, diğer bilgiler otomatik gelecek!\r\n}\r\n\r\nexport interface TelegramBotUpdate {\r\n  bot_name?: string;\r\n  bot_username?: string;\r\n  bot_token?: string;\r\n  is_active?: boolean;\r\n}\r\n\r\nexport interface TelegramBotListResponse {\r\n  bots: TelegramBot[];\r\n  total: number;\r\n}\r\n\r\nexport interface TelegramBotVerifyResponse {\r\n  success: boolean;\r\n  message: string;\r\n  bot_info?: {\r\n    id: number;\r\n    first_name: string;\r\n    username: string;\r\n    can_join_groups: boolean;\r\n    can_read_all_group_messages: boolean;\r\n  };\r\n}\r\n\r\nexport interface TelegramBotResponseExtended {\r\n  success: boolean;\r\n  bot: TelegramBot;\r\n  message: string;\r\n  discovered_channels_count?: number;\r\n  channel_count?: number;\r\n}\r\n\r\nexport interface BotChannelListResponse {\r\n  channels: Array<{\r\n    id: number;\r\n    name: string;\r\n    channel_username?: string;\r\n    member_count: number;\r\n    is_active: boolean;\r\n    brand_id?: number;\r\n    brand_name?: string;\r\n    assigned_users: Array<{\r\n      id: number;\r\n      name: string;\r\n      email: string;\r\n    }>;\r\n  }>;\r\n  total: number;\r\n}\r\n\r\nexport interface TelegramBotsAPI {\r\n  getBots(): Promise<TelegramBotListResponse>;\r\n  getBot(botId: number): Promise<TelegramBot>;\r\n  getBotChannels(botId: number): Promise<BotChannelListResponse>;\r\n  createBot(botData: TelegramBotCreate): Promise<TelegramBotResponseExtended>;\r\n  updateBot(botId: number, data: TelegramBotUpdate): Promise<TelegramBot>;\r\n  deleteBot(botId: number): Promise<void>;\r\n  verifyBot(botId: number): Promise<TelegramBotVerifyResponse>;\r\n  discoverChannelsForBot(botId: number): Promise<any>;\r\n}\r\n\r\nexport const telegramBotsAPI: TelegramBotsAPI = {\r\n  /**\r\n   * Bot listesini getir\r\n   */\r\n  async getBots(): Promise<TelegramBotListResponse> {\r\n    const response = await api.get('/api/telegram-bots');\r\n    return response.data;\r\n  },\r\n\r\n  /**\r\n   * Belirli bir botu getir\r\n   */\r\n  async getBot(botId: number): Promise<TelegramBot> {\r\n    const response = await api.get(`/api/telegram-bots/${botId}`);\r\n    return response.data;\r\n  },\r\n\r\n  /**\r\n   * Yeni bot ekle (Sadece Admin)\r\n   */\r\n  async createBot(botData: TelegramBotCreate): Promise<TelegramBotResponseExtended> {\r\n    const response = await api.post('/api/telegram-bots', botData);\r\n    return response.data;\r\n  },\r\n\r\n  /**\r\n   * Bot bilgilerini güncelle (Sadece Admin)\r\n   */\r\n  async updateBot(botId: number, data: TelegramBotUpdate): Promise<TelegramBot> {\r\n    const response = await api.put(`/api/telegram-bots/${botId}`, data);\r\n    return response.data;\r\n  },\r\n\r\n  /**\r\n   * Botu sil (Sadece Admin)\r\n   */\r\n  async deleteBot(botId: number): Promise<void> {\r\n    await api.delete(`/api/telegram-bots/${botId}`);\r\n  },\r\n\r\n  /**\r\n   * Bot token'ını doğrula\r\n   */\r\n  async verifyBot(botId: number): Promise<TelegramBotVerifyResponse> {\r\n    const response = await api.post(`/api/telegram-bots/${botId}/verify`);\r\n    return response.data;\r\n  },\r\n\r\n  /**\r\n   * Botun kanalını keşfet\r\n   */\r\n  async discoverChannelsForBot(botId: number): Promise<any> {\r\n    const response = await api.post(`/api/telegram-bots/${botId}/discover-channels`);\r\n    return response.data;\r\n  },\r\n\r\n  /**\r\n   * Bot'a ait kanalları getir\r\n   */\r\n  async getBotChannels(botId: number): Promise<BotChannelListResponse> {\r\n    const response = await api.get(`/api/telegram-bots/${botId}/channels`);\r\n    return response.data;\r\n  }\r\n};\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA,GAEA,MAAO,CAAAA,GAAG,KAAM,cAAc,CAkF9B,MAAO,MAAM,CAAAC,eAAgC,CAAG,CAC9C;AACF;AACA,KACE,KAAM,CAAAC,OAAOA,CAAA,CAAqC,CAChD,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAH,GAAG,CAACI,GAAG,CAAC,oBAAoB,CAAC,CACpD,MAAO,CAAAD,QAAQ,CAACE,IAAI,CACtB,CAAC,CAED;AACF;AACA,KACE,KAAM,CAAAC,MAAMA,CAACC,KAAa,CAAwB,CAChD,KAAM,CAAAJ,QAAQ,CAAG,KAAM,CAAAH,GAAG,CAACI,GAAG,uBAAAI,MAAA,CAAuBD,KAAK,CAAE,CAAC,CAC7D,MAAO,CAAAJ,QAAQ,CAACE,IAAI,CACtB,CAAC,CAED;AACF;AACA,KACE,KAAM,CAAAI,SAASA,CAACC,OAA0B,CAAwC,CAChF,KAAM,CAAAP,QAAQ,CAAG,KAAM,CAAAH,GAAG,CAACW,IAAI,CAAC,oBAAoB,CAAED,OAAO,CAAC,CAC9D,MAAO,CAAAP,QAAQ,CAACE,IAAI,CACtB,CAAC,CAED;AACF;AACA,KACE,KAAM,CAAAO,SAASA,CAACL,KAAa,CAAEF,IAAuB,CAAwB,CAC5E,KAAM,CAAAF,QAAQ,CAAG,KAAM,CAAAH,GAAG,CAACa,GAAG,uBAAAL,MAAA,CAAuBD,KAAK,EAAIF,IAAI,CAAC,CACnE,MAAO,CAAAF,QAAQ,CAACE,IAAI,CACtB,CAAC,CAED;AACF;AACA,KACE,KAAM,CAAAS,SAASA,CAACP,KAAa,CAAiB,CAC5C,KAAM,CAAAP,GAAG,CAACe,MAAM,uBAAAP,MAAA,CAAuBD,KAAK,CAAE,CAAC,CACjD,CAAC,CAED;AACF;AACA,KACE,KAAM,CAAAS,SAASA,CAACT,KAAa,CAAsC,CACjE,KAAM,CAAAJ,QAAQ,CAAG,KAAM,CAAAH,GAAG,CAACW,IAAI,uBAAAH,MAAA,CAAuBD,KAAK,WAAS,CAAC,CACrE,MAAO,CAAAJ,QAAQ,CAACE,IAAI,CACtB,CAAC,CAED;AACF;AACA,KACE,KAAM,CAAAY,sBAAsBA,CAACV,KAAa,CAAgB,CACxD,KAAM,CAAAJ,QAAQ,CAAG,KAAM,CAAAH,GAAG,CAACW,IAAI,uBAAAH,MAAA,CAAuBD,KAAK,sBAAoB,CAAC,CAChF,MAAO,CAAAJ,QAAQ,CAACE,IAAI,CACtB,CAAC,CAED;AACF;AACA,KACE,KAAM,CAAAa,cAAcA,CAACX,KAAa,CAAmC,CACnE,KAAM,CAAAJ,QAAQ,CAAG,KAAM,CAAAH,GAAG,CAACI,GAAG,uBAAAI,MAAA,CAAuBD,KAAK,aAAW,CAAC,CACtE,MAAO,CAAAJ,QAAQ,CAACE,IAAI,CACtB,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}