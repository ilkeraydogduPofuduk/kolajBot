{"ast":null,"code":"import _objectSpread from\"C:/Users/ilker/Desktop/aibrands/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";/**\r\n * useUrlConfig Hook\r\n * URL konfigürasyonunu yöneten hook\r\n */import{useState,useEffect}from'react';import{settingsAPI}from'../api/settings';const defaultConfig={baseUrl:process.env.REACT_APP_BASE_URL||'http://localhost:8000',apiUrl:process.env.REACT_APP_API_URL||'http://localhost:8000/api',uploadUrl:process.env.REACT_APP_UPLOAD_URL||'http://localhost:8000/uploads',imageUrl:process.env.REACT_APP_IMAGE_URL||'http://localhost:8000/uploads',frontendUrl:process.env.REACT_APP_FRONTEND_URL||'http://localhost:3000'};export const useUrlConfig=()=>{const[config,setConfig]=useState(defaultConfig);const[loading,setLoading]=useState(false);const[error,setError]=useState(null);useEffect(()=>{loadUrlConfig();},[]);const loadUrlConfig=async()=>{try{setLoading(true);setError(null);// Try to load from settings API\nconst settings=await settingsAPI.getSettings();if(settings&&settings.url_config){const urlConfig=JSON.parse(settings.url_config);setConfig(prevConfig=>_objectSpread(_objectSpread({},prevConfig),urlConfig));}}catch(err){console.warn('Failed to load URL config from settings, using defaults:',err);// Keep default config if API fails\n}finally{setLoading(false);}};const updateConfig=async newConfig=>{try{setLoading(true);setError(null);const updatedConfig=_objectSpread(_objectSpread({},config),newConfig);setConfig(updatedConfig);// Save to settings API\nawait settingsAPI.updateSettings([{key:'url_config',value:JSON.stringify(updatedConfig)}]);}catch(err){setError(err instanceof Error?err.message:'Failed to update URL config');throw err;}finally{setLoading(false);}};const resetConfig=()=>{setConfig(defaultConfig);};const getImageURL=path=>{if(!path)return'';// If path is already a full URL, return as is\nif(path.startsWith('http://')||path.startsWith('https://')){return path;}// Extract filename from path\nconst filename=path.split('/').pop()||path;// Use API endpoint for images\nreturn\"\".concat(config.apiUrl,\"/images/\").concat(filename);};const getUploadURL=()=>{return config.uploadUrl;};const getApiURL=function(){let endpoint=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';const cleanEndpoint=endpoint.startsWith('/')?endpoint.slice(1):endpoint;return\"\".concat(config.apiUrl,\"/\").concat(cleanEndpoint);};const getBaseURL=()=>{return config.baseUrl;};const getFrontendURL=()=>{return config.frontendUrl;};return{config,loading,error,updateConfig,resetConfig,getImageURL,getUploadURL,getApiURL,getBaseURL,getFrontendURL,loadUrlConfig};};","map":{"version":3,"names":["useState","useEffect","settingsAPI","defaultConfig","baseUrl","process","env","REACT_APP_BASE_URL","apiUrl","REACT_APP_API_URL","uploadUrl","REACT_APP_UPLOAD_URL","imageUrl","REACT_APP_IMAGE_URL","frontendUrl","REACT_APP_FRONTEND_URL","useUrlConfig","config","setConfig","loading","setLoading","error","setError","loadUrlConfig","settings","getSettings","url_config","urlConfig","JSON","parse","prevConfig","_objectSpread","err","console","warn","updateConfig","newConfig","updatedConfig","updateSettings","key","value","stringify","Error","message","resetConfig","getImageURL","path","startsWith","filename","split","pop","concat","getUploadURL","getApiURL","endpoint","arguments","length","undefined","cleanEndpoint","slice","getBaseURL","getFrontendURL"],"sources":["C:/Users/ilker/Desktop/aibrands/frontend/src/hooks/useUrlConfig.ts"],"sourcesContent":["/**\r\n * useUrlConfig Hook\r\n * URL konfigürasyonunu yöneten hook\r\n */\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { settingsAPI } from '../api/settings';\r\n\r\ninterface UrlConfig {\r\n  baseUrl: string;\r\n  apiUrl: string;\r\n  uploadUrl: string;\r\n  imageUrl: string;\r\n  frontendUrl: string;\r\n}\r\n\r\nconst defaultConfig: UrlConfig = {\r\n  baseUrl: process.env.REACT_APP_BASE_URL || 'http://localhost:8000',\r\n  apiUrl: process.env.REACT_APP_API_URL || 'http://localhost:8000/api',\r\n  uploadUrl: process.env.REACT_APP_UPLOAD_URL || 'http://localhost:8000/uploads',\r\n  imageUrl: process.env.REACT_APP_IMAGE_URL || 'http://localhost:8000/uploads',\r\n  frontendUrl: process.env.REACT_APP_FRONTEND_URL || 'http://localhost:3000'\r\n};\r\n\r\nexport const useUrlConfig = () => {\r\n  const [config, setConfig] = useState<UrlConfig>(defaultConfig);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    loadUrlConfig();\r\n  }, []);\r\n\r\n  const loadUrlConfig = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      // Try to load from settings API\r\n      const settings = await settingsAPI.getSettings();\r\n      \r\n      if (settings && (settings as any).url_config) {\r\n        const urlConfig = JSON.parse((settings as any).url_config);\r\n        setConfig(prevConfig => ({ ...prevConfig, ...urlConfig }));\r\n      }\r\n      \r\n    } catch (err) {\r\n      console.warn('Failed to load URL config from settings, using defaults:', err);\r\n      // Keep default config if API fails\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const updateConfig = async (newConfig: Partial<UrlConfig>) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      const updatedConfig = { ...config, ...newConfig };\r\n      setConfig(updatedConfig);\r\n      \r\n      // Save to settings API\r\n      await settingsAPI.updateSettings([\r\n        {\r\n          key: 'url_config',\r\n          value: JSON.stringify(updatedConfig)\r\n        }\r\n      ]);\r\n      \r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Failed to update URL config');\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const resetConfig = () => {\r\n    setConfig(defaultConfig);\r\n  };\r\n\r\n  const getImageURL = (path: string): string => {\r\n    if (!path) return '';\r\n    \r\n    // If path is already a full URL, return as is\r\n    if (path.startsWith('http://') || path.startsWith('https://')) {\r\n      return path;\r\n    }\r\n    \r\n    // Extract filename from path\r\n    const filename = path.split('/').pop() || path;\r\n    \r\n    // Use API endpoint for images\r\n    return `${config.apiUrl}/images/${filename}`;\r\n  };\r\n\r\n  const getUploadURL = (): string => {\r\n    return config.uploadUrl;\r\n  };\r\n\r\n  const getApiURL = (endpoint: string = ''): string => {\r\n    const cleanEndpoint = endpoint.startsWith('/') ? endpoint.slice(1) : endpoint;\r\n    return `${config.apiUrl}/${cleanEndpoint}`;\r\n  };\r\n\r\n  const getBaseURL = (): string => {\r\n    return config.baseUrl;\r\n  };\r\n\r\n  const getFrontendURL = (): string => {\r\n    return config.frontendUrl;\r\n  };\r\n\r\n  return {\r\n    config,\r\n    loading,\r\n    error,\r\n    updateConfig,\r\n    resetConfig,\r\n    getImageURL,\r\n    getUploadURL,\r\n    getApiURL,\r\n    getBaseURL,\r\n    getFrontendURL,\r\n    loadUrlConfig\r\n  };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}