{"ast":null,"code":"import api from '../utils/api';\nexport const templatesAPI = {\n  // Şablonları listele\n  getTemplates: async params => {\n    const response = await api.get('/api/templates/master', {\n      params\n    });\n    return response.data;\n  },\n  // Belirli bir şablonu getir\n  getTemplate: async templateId => {\n    const response = await api.get(`/api/templates/${templateId}`);\n    return response.data;\n  },\n  // Yeni şablon oluştur\n  createTemplate: async templateData => {\n    const response = await api.post('/api/templates/create', templateData);\n    return response.data;\n  },\n  // Şablonu güncelle\n  updateTemplate: async (templateId, templateData) => {\n    const response = await api.put(`/api/templates/${templateId}`, templateData);\n    return response.data;\n  },\n  // Şablonu sil\n  deleteTemplate: async templateId => {\n    const response = await api.delete(`/api/templates/${templateId}`);\n    return response.data;\n  },\n  // Template verisini görsel olarak render et\n  renderTemplate: async (templateData, width = 800, height = 1000, format = 'PNG') => {\n    const response = await api.post('/api/templates/render', templateData, {\n      params: {\n        width,\n        height,\n        format\n      },\n      responseType: 'blob'\n    });\n    return response.data;\n  },\n  // Template'i PNG olarak dışa aktar\n  exportTemplatePNG: async (templateId, width = 800, height = 1000) => {\n    const response = await api.post(`/api/templates/${templateId}/export/png`, {}, {\n      params: {\n        width,\n        height\n      },\n      responseType: 'blob'\n    });\n    return response.data;\n  },\n  // JSON dosyasından template içe aktar\n  importTemplate: async (file, product_id, name, description) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    if (product_id) formData.append('product_id', product_id.toString());\n    if (name) formData.append('name', name || file.name.replace('.json', ''));\n    if (description) formData.append('description', description);\n    const response = await api.post('/api/templates/import/json', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n  // Get templates by product\n  getTemplatesByProduct: async productId => {\n    const response = await api.get(`/api/templates/by-product/${productId}`);\n    return response.data;\n  },\n  // Get templates by brand\n  getTemplatesByBrand: async brandId => {\n    const response = await api.get(`/api/templates/by-brand/${brandId}`);\n    return response.data;\n  },\n  // Get auto-generated templates\n  getAutoTemplates: async () => {\n    const response = await api.get('/api/templates/auto-generated');\n    return response.data;\n  },\n  // Create collage from template\n  createCollage: async (templateId, productId) => {\n    const response = await api.post(`/api/templates/${templateId}/create-collage`, {\n      product_id: productId\n    });\n    return response.data;\n  },\n  // Download collage\n  downloadCollage: async templateId => {\n    const response = await api.get(`/api/templates/${templateId}/download-collage`, {\n      responseType: 'blob'\n    });\n    return response.data;\n  }\n};","map":{"version":3,"names":["api","templatesAPI","getTemplates","params","response","get","data","getTemplate","templateId","createTemplate","templateData","post","updateTemplate","put","deleteTemplate","delete","renderTemplate","width","height","format","responseType","exportTemplatePNG","importTemplate","file","product_id","name","description","formData","FormData","append","toString","replace","headers","getTemplatesByProduct","productId","getTemplatesByBrand","brandId","getAutoTemplates","createCollage","downloadCollage"],"sources":["C:/Users/ilker/Desktop/aibrands/frontend/src/api/templates.ts"],"sourcesContent":["import api from '../utils/api';\n\nexport interface Template {\n  id: number;\n  name: string;\n  description?: string;\n  product_id?: number;\n  brand_id?: number;\n  template_type: string;\n  template_data: any;\n  preview_image?: string;\n  thumbnail_path?: string;\n  is_active: boolean;\n  is_default?: boolean;\n  is_auto_generated?: boolean;\n  visibility?: 'private' | 'brand' | 'public';\n  version?: number;\n  parent_template_id?: number;\n  tags?: string[];\n  shared_with?: number[];\n  usage_count?: number;\n  last_used_at?: string;\n  created_at: string;\n  updated_at?: string;\n  created_by?: number;\n  category?: string;\n  product?: {\n    id: number;\n    code: string;\n    name: string;\n    color: string;\n    product_type: string;\n    size_range: string;\n    price: number;\n    currency: string;\n    brand: {\n      id: number;\n      name: string;\n    };\n  };\n  brand?: {\n    id: number;\n    name: string;\n  };\n  creator?: {\n    id: number;\n    first_name: string;\n    last_name: string;\n    email: string;\n  };\n}\n\nexport interface TemplateCreate {\n  name: string;\n  description?: string;\n  product_id: number;\n  brand_id: number;\n  template_type?: string;\n  template_data: any;\n  visibility?: 'private' | 'brand' | 'public';\n  tags?: string[];\n  is_active?: boolean;\n}\n\nexport interface TemplateUpdate {\n  name?: string;\n  description?: string;\n  template_type?: string;\n  template_data?: any;\n  visibility?: 'private' | 'brand' | 'public';\n  tags?: string[];\n  is_active?: boolean;\n}\n\nexport const templatesAPI = {\n  // Şablonları listele\n  getTemplates: async (params?: {\n    skip?: number;\n    limit?: number;\n    product_id?: number;\n  }): Promise<{ data: Template[] }> => {\n    const response = await api.get('/api/templates/master', { params });\n    return response.data;\n  },\n\n  // Belirli bir şablonu getir\n  getTemplate: async (templateId: number): Promise<Template> => {\n    const response = await api.get(`/api/templates/${templateId}`);\n    return response.data;\n  },\n\n  // Yeni şablon oluştur\n  createTemplate: async (templateData: TemplateCreate): Promise<Template> => {\n    const response = await api.post('/api/templates/create', templateData);\n    return response.data;\n  },\n\n  // Şablonu güncelle\n  updateTemplate: async (templateId: number, templateData: TemplateUpdate): Promise<Template> => {\n    const response = await api.put(`/api/templates/${templateId}`, templateData);\n    return response.data;\n  },\n\n  // Şablonu sil\n  deleteTemplate: async (templateId: number): Promise<{ message: string }> => {\n    const response = await api.delete(`/api/templates/${templateId}`);\n    return response.data;\n  },\n\n\n\n  // Template verisini görsel olarak render et\n  renderTemplate: async (templateData: any, width: number = 800, height: number = 1000, format: string = 'PNG') => {\n    const response = await api.post('/api/templates/render', templateData, {\n      params: { width, height, format },\n      responseType: 'blob'\n    });\n    \n    return response.data;\n  },\n\n  // Template'i PNG olarak dışa aktar\n  exportTemplatePNG: async (templateId: number, width: number = 800, height: number = 1000) => {\n    const response = await api.post(`/api/templates/${templateId}/export/png`, {}, {\n      params: { width, height },\n      responseType: 'blob'\n    });\n    \n    return response.data;\n  },\n\n  // JSON dosyasından template içe aktar\n  importTemplate: async (file: File, product_id?: number, name?: string, description?: string) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    if (product_id) formData.append('product_id', product_id.toString());\n    if (name) formData.append('name', name || file.name.replace('.json', ''));\n    if (description) formData.append('description', description);\n    \n    const response = await api.post('/api/templates/import/json', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    \n    return response.data;\n  },\n\n  // Get templates by product\n  getTemplatesByProduct: async (productId: number): Promise<{ templates: Template[] }> => {\n    const response = await api.get(`/api/templates/by-product/${productId}`);\n    return response.data;\n  },\n\n  // Get templates by brand\n  getTemplatesByBrand: async (brandId: number): Promise<{ templates: Template[] }> => {\n    const response = await api.get(`/api/templates/by-brand/${brandId}`);\n    return response.data;\n  },\n\n  // Get auto-generated templates\n  getAutoTemplates: async (): Promise<{ templates: Template[] }> => {\n    const response = await api.get('/api/templates/auto-generated');\n    return response.data;\n  },\n\n  // Create collage from template\n  createCollage: async (templateId: number, productId: number): Promise<{ success: boolean; collage_path?: string }> => {\n    const response = await api.post(`/api/templates/${templateId}/create-collage`, {\n      product_id: productId\n    });\n    return response.data;\n  },\n\n  // Download collage\n  downloadCollage: async (templateId: number): Promise<Blob> => {\n    const response = await api.get(`/api/templates/${templateId}/download-collage`, {\n      responseType: 'blob'\n    });\n    return response.data;\n  },\n\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}