{"ast":null,"code":"var _s = $RefreshSig$();\n/**\r\n * useUrlConfig Hook\r\n * URL konfigürasyonunu yöneten hook\r\n */\n\nimport { useState, useEffect } from 'react';\nimport { settingsAPI } from '../api/settings';\nconst defaultConfig = {\n  baseUrl: process.env.REACT_APP_BASE_URL || 'http://localhost:8000',\n  apiUrl: process.env.REACT_APP_API_URL || 'http://localhost:8000/api',\n  uploadUrl: process.env.REACT_APP_UPLOAD_URL || 'http://localhost:8000/uploads',\n  imageUrl: process.env.REACT_APP_IMAGE_URL || 'http://localhost:8000/uploads',\n  frontendUrl: process.env.REACT_APP_FRONTEND_URL || 'http://localhost:3000'\n};\nexport const useUrlConfig = () => {\n  _s();\n  const [config, setConfig] = useState(defaultConfig);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    loadUrlConfig();\n  }, []);\n  const loadUrlConfig = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Try to load from settings API\n      const settings = await settingsAPI.getSettings();\n      if (settings && settings.url_config) {\n        const urlConfig = JSON.parse(settings.url_config);\n        setConfig(prevConfig => ({\n          ...prevConfig,\n          ...urlConfig\n        }));\n      }\n    } catch (err) {\n      console.warn('Failed to load URL config from settings, using defaults:', err);\n      // Keep default config if API fails\n    } finally {\n      setLoading(false);\n    }\n  };\n  const updateConfig = async newConfig => {\n    try {\n      setLoading(true);\n      setError(null);\n      const updatedConfig = {\n        ...config,\n        ...newConfig\n      };\n      setConfig(updatedConfig);\n\n      // Save to settings API\n      await settingsAPI.updateSettings([{\n        key: 'url_config',\n        value: JSON.stringify(updatedConfig)\n      }]);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to update URL config');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const resetConfig = () => {\n    setConfig(defaultConfig);\n  };\n  const getImageURL = path => {\n    if (!path) return '';\n\n    // If path is already a full URL, return as is\n    if (path.startsWith('http://') || path.startsWith('https://')) {\n      return path;\n    }\n\n    // Extract filename from path\n    const filename = path.split('/').pop() || path;\n\n    // Use API endpoint for images\n    return `${config.apiUrl}/images/${filename}`;\n  };\n  const getUploadURL = () => {\n    return config.uploadUrl;\n  };\n  const getApiURL = (endpoint = '') => {\n    const cleanEndpoint = endpoint.startsWith('/') ? endpoint.slice(1) : endpoint;\n    return `${config.apiUrl}/${cleanEndpoint}`;\n  };\n  const getBaseURL = () => {\n    return config.baseUrl;\n  };\n  const getFrontendURL = () => {\n    return config.frontendUrl;\n  };\n  return {\n    config,\n    loading,\n    error,\n    updateConfig,\n    resetConfig,\n    getImageURL,\n    getUploadURL,\n    getApiURL,\n    getBaseURL,\n    getFrontendURL,\n    loadUrlConfig\n  };\n};\n_s(useUrlConfig, \"ImMfWPLznDcAPZlYtDJh+v+UHYg=\");","map":{"version":3,"names":["useState","useEffect","settingsAPI","defaultConfig","baseUrl","process","env","REACT_APP_BASE_URL","apiUrl","REACT_APP_API_URL","uploadUrl","REACT_APP_UPLOAD_URL","imageUrl","REACT_APP_IMAGE_URL","frontendUrl","REACT_APP_FRONTEND_URL","useUrlConfig","_s","config","setConfig","loading","setLoading","error","setError","loadUrlConfig","settings","getSettings","url_config","urlConfig","JSON","parse","prevConfig","err","console","warn","updateConfig","newConfig","updatedConfig","updateSettings","key","value","stringify","Error","message","resetConfig","getImageURL","path","startsWith","filename","split","pop","getUploadURL","getApiURL","endpoint","cleanEndpoint","slice","getBaseURL","getFrontendURL"],"sources":["C:/Users/ilker/Desktop/aibrands/frontend/src/hooks/useUrlConfig.ts"],"sourcesContent":["/**\r\n * useUrlConfig Hook\r\n * URL konfigürasyonunu yöneten hook\r\n */\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { settingsAPI } from '../api/settings';\r\n\r\ninterface UrlConfig {\r\n  baseUrl: string;\r\n  apiUrl: string;\r\n  uploadUrl: string;\r\n  imageUrl: string;\r\n  frontendUrl: string;\r\n}\r\n\r\nconst defaultConfig: UrlConfig = {\r\n  baseUrl: process.env.REACT_APP_BASE_URL || 'http://localhost:8000',\r\n  apiUrl: process.env.REACT_APP_API_URL || 'http://localhost:8000/api',\r\n  uploadUrl: process.env.REACT_APP_UPLOAD_URL || 'http://localhost:8000/uploads',\r\n  imageUrl: process.env.REACT_APP_IMAGE_URL || 'http://localhost:8000/uploads',\r\n  frontendUrl: process.env.REACT_APP_FRONTEND_URL || 'http://localhost:3000'\r\n};\r\n\r\nexport const useUrlConfig = () => {\r\n  const [config, setConfig] = useState<UrlConfig>(defaultConfig);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    loadUrlConfig();\r\n  }, []);\r\n\r\n  const loadUrlConfig = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      // Try to load from settings API\r\n      const settings = await settingsAPI.getSettings();\r\n      \r\n      if (settings && (settings as any).url_config) {\r\n        const urlConfig = JSON.parse((settings as any).url_config);\r\n        setConfig(prevConfig => ({ ...prevConfig, ...urlConfig }));\r\n      }\r\n      \r\n    } catch (err) {\r\n      console.warn('Failed to load URL config from settings, using defaults:', err);\r\n      // Keep default config if API fails\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const updateConfig = async (newConfig: Partial<UrlConfig>) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      const updatedConfig = { ...config, ...newConfig };\r\n      setConfig(updatedConfig);\r\n      \r\n      // Save to settings API\r\n      await settingsAPI.updateSettings([\r\n        {\r\n          key: 'url_config',\r\n          value: JSON.stringify(updatedConfig)\r\n        }\r\n      ]);\r\n      \r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Failed to update URL config');\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const resetConfig = () => {\r\n    setConfig(defaultConfig);\r\n  };\r\n\r\n  const getImageURL = (path: string): string => {\r\n    if (!path) return '';\r\n    \r\n    // If path is already a full URL, return as is\r\n    if (path.startsWith('http://') || path.startsWith('https://')) {\r\n      return path;\r\n    }\r\n    \r\n    // Extract filename from path\r\n    const filename = path.split('/').pop() || path;\r\n    \r\n    // Use API endpoint for images\r\n    return `${config.apiUrl}/images/${filename}`;\r\n  };\r\n\r\n  const getUploadURL = (): string => {\r\n    return config.uploadUrl;\r\n  };\r\n\r\n  const getApiURL = (endpoint: string = ''): string => {\r\n    const cleanEndpoint = endpoint.startsWith('/') ? endpoint.slice(1) : endpoint;\r\n    return `${config.apiUrl}/${cleanEndpoint}`;\r\n  };\r\n\r\n  const getBaseURL = (): string => {\r\n    return config.baseUrl;\r\n  };\r\n\r\n  const getFrontendURL = (): string => {\r\n    return config.frontendUrl;\r\n  };\r\n\r\n  return {\r\n    config,\r\n    loading,\r\n    error,\r\n    updateConfig,\r\n    resetConfig,\r\n    getImageURL,\r\n    getUploadURL,\r\n    getApiURL,\r\n    getBaseURL,\r\n    getFrontendURL,\r\n    loadUrlConfig\r\n  };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}