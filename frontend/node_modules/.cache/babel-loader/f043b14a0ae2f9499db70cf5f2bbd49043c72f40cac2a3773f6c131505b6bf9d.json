{"ast":null,"code":"import api from '../utils/api';\nexport const usersAPI = {\n  getUsers: async (page = 1, per_page = 10, role, brand_id) => {\n    const params = new URLSearchParams({\n      page: page.toString(),\n      per_page: per_page.toString()\n    });\n    if (role) params.append('role', role);\n    if (brand_id) params.append('brand_id', brand_id.toString());\n    const response = await api.get(`/api/users?${params}`);\n    return response.data;\n  },\n  getUser: async userId => {\n    const response = await api.get(`/api/users/${userId}`);\n    return response.data;\n  },\n  createUser: async data => {\n    const response = await api.post('/api/users', data);\n    return response.data;\n  },\n  updateUser: async (userId, data, sendEmail = true) => {\n    const response = await api.put(`/api/users/${userId}`, {\n      ...data,\n      send_email: sendEmail\n    });\n    return response.data;\n  },\n  updatePassword: async (userId, data) => {\n    const response = await api.put(`/api/users/${userId}/password`, data);\n    return response.data;\n  },\n  activateUser: async userId => {\n    const response = await api.put(`/api/users/${userId}/activate`);\n    return response.data;\n  },\n  deactivateUser: async userId => {\n    const response = await api.put(`/api/users/${userId}/deactivate`);\n    return response.data;\n  },\n  assignBrand: async (userId, brandId) => {\n    const response = await api.post(`/api/users/${userId}/assign-brand/${brandId}`);\n    return response.data;\n  },\n  removeBrand: async (userId, brandId) => {\n    const response = await api.delete(`/api/users/${userId}/remove-brand/${brandId}`);\n    return response.data;\n  },\n  // Kullanıcı aktivite durumu\n  getUserActivities: async () => {\n    const response = await api.get('/api/users/activities');\n    return response.data;\n  },\n  // Çevrimiçi kullanıcıları getir\n  getOnlineUsers: async () => {\n    const response = await api.get('/api/users/online');\n    return response.data;\n  },\n  // Kullanıcı durumunu güncelle (heartbeat)\n  updateUserStatus: async (status, current_action) => {\n    const response = await api.post('/api/users/status', {\n      status,\n      current_action\n    });\n    return response.data;\n  },\n  // Sistem istatistikleri\n  getSystemStats: async () => {\n    const response = await api.get('/api/users/system-stats');\n    return response.data;\n  }\n};","map":{"version":3,"names":["api","usersAPI","getUsers","page","per_page","role","brand_id","params","URLSearchParams","toString","append","response","get","data","getUser","userId","createUser","post","updateUser","sendEmail","put","send_email","updatePassword","activateUser","deactivateUser","assignBrand","brandId","removeBrand","delete","getUserActivities","getOnlineUsers","updateUserStatus","status","current_action","getSystemStats"],"sources":["C:/Users/ilker/Desktop/aibrands/frontend/src/api/users.ts"],"sourcesContent":["import api from '../utils/api';\n\nexport interface User {\n  id: number;\n  email: string;\n  first_name: string;\n  last_name: string;\n  role: string;\n  role_id: number;\n  brand_ids: number[];\n  is_active: boolean;\n  is_2fa_enabled: boolean;\n  last_login: string | null;\n  failed_login_attempts?: number;\n  created_at: string;\n  updated_at: string;\n  last_seen_at?: string;\n  is_online?: boolean;\n}\n\nexport interface UserActivity {\n  id: number;\n  email: string;\n  first_name: string;\n  last_name: string;\n  role: string;\n  brand_names: string[];\n  is_online: boolean;\n  last_seen_at: string;\n  status: 'online' | 'away' | 'offline';\n  current_action?: string;\n}\n\nexport interface UserCreate {\n  email: string;\n  password: string;\n  first_name: string;\n  last_name: string;\n  role_id: number;\n  brand_ids?: number[];\n}\n\nexport interface UserUpdate {\n  first_name?: string;\n  last_name?: string;\n  email?: string;\n  role_id?: number;\n  brand_ids?: number[];\n  is_active?: boolean;\n}\n\nexport interface UserPasswordUpdate {\n  current_password?: string;\n  new_password: string;\n}\n\nexport interface UserListResponse {\n  users: User[];\n  total: number;\n  page: number;\n  per_page: number;\n}\n\nexport const usersAPI = {\n  getUsers: async (page = 1, per_page = 10, role?: string, brand_id?: number): Promise<UserListResponse> => {\n    const params = new URLSearchParams({\n      page: page.toString(),\n      per_page: per_page.toString(),\n    });\n    \n    if (role) params.append('role', role);\n    if (brand_id) params.append('brand_id', brand_id.toString());\n    \n    const response = await api.get(`/api/users?${params}`);\n    return response.data;\n  },\n\n  getUser: async (userId: number): Promise<User> => {\n    const response = await api.get(`/api/users/${userId}`);\n    return response.data;\n  },\n\n  createUser: async (data: UserCreate): Promise<User> => {\n    const response = await api.post('/api/users', data);\n    return response.data;\n  },\n\n  updateUser: async (userId: number, data: UserUpdate, sendEmail: boolean = true): Promise<User> => {\n    const response = await api.put(`/api/users/${userId}`, { ...data, send_email: sendEmail });\n    return response.data;\n  },\n\n  updatePassword: async (userId: number, data: UserPasswordUpdate): Promise<{ message: string }> => {\n    const response = await api.put(`/api/users/${userId}/password`, data);\n    return response.data;\n  },\n\n  activateUser: async (userId: number): Promise<{ message: string }> => {\n    const response = await api.put(`/api/users/${userId}/activate`);\n    return response.data;\n  },\n\n  deactivateUser: async (userId: number): Promise<{ message: string }> => {\n    const response = await api.put(`/api/users/${userId}/deactivate`);\n    return response.data;\n  },\n\n  assignBrand: async (userId: number, brandId: number): Promise<{ message: string }> => {\n    const response = await api.post(`/api/users/${userId}/assign-brand/${brandId}`);\n    return response.data;\n  },\n\n  removeBrand: async (userId: number, brandId: number): Promise<{ message: string }> => {\n    const response = await api.delete(`/api/users/${userId}/remove-brand/${brandId}`);\n    return response.data;\n  },\n\n\n  // Kullanıcı aktivite durumu\n  getUserActivities: async (): Promise<UserActivity[]> => {\n    const response = await api.get('/api/users/activities');\n    return response.data;\n  },\n\n  // Çevrimiçi kullanıcıları getir\n  getOnlineUsers: async (): Promise<UserActivity[]> => {\n    const response = await api.get('/api/users/online');\n    return response.data;\n  },\n\n  // Kullanıcı durumunu güncelle (heartbeat)\n  updateUserStatus: async (status: 'online' | 'away', current_action?: string): Promise<{ message: string }> => {\n    const response = await api.post('/api/users/status', { status, current_action });\n    return response.data;\n  },\n\n  // Sistem istatistikleri\n  getSystemStats: async (): Promise<{\n    total_users: number;\n    online_users: number;\n    active_today: number;\n    system_status: string;\n    last_update: string;\n  }> => {\n    const response = await api.get('/api/users/system-stats');\n    return response.data;\n  },\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}