{"ast":null,"code":"import api from '../utils/api';\nexport const socialMediaChannelsAPI = {\n  // Get platform configurations\n  getPlatforms: async () => {\n    const response = await api.get('/api/social-media/platforms');\n    return response.data;\n  },\n  // Telegram helpers\n  discoverTelegramChats: async bot_token => {\n    const response = await api.post('/api/social-media/telegram/discover', {\n      bot_token\n    });\n    return response.data;\n  },\n  getTelegramChatInfo: async (bot_token, chat_id) => {\n    const response = await api.post('/api/social-media/telegram/chat-info', {\n      bot_token,\n      chat_id\n    });\n    return response.data;\n  },\n  // Get channels with filtering and pagination\n  getChannels: async (page = 1, per_page = 10, platform, brand_id, search) => {\n    const params = new URLSearchParams({\n      page: page.toString(),\n      per_page: per_page.toString()\n    });\n    if (platform) params.append('platform', platform);\n    if (brand_id) params.append('brand_id', brand_id.toString());\n    if (search) params.append('search', search);\n    const response = await api.get(`/api/social-media/channels?${params.toString()}`);\n    return response.data;\n  },\n  // Get single channel\n  getChannel: async channelId => {\n    const response = await api.get(`/api/social-media/channels/${channelId}`);\n    return response.data;\n  },\n  // Get channel statistics\n  getStatistics: async () => {\n    const response = await api.get('/api/social-media/channels/statistics');\n    return response.data;\n  },\n  // Create a new channel\n  createChannel: async channelData => {\n    const response = await api.post('/api/social-media/channels', channelData);\n    return response.data;\n  },\n  // Update a channel\n  updateChannel: async (channelId, channelData) => {\n    const response = await api.put(`/api/social-media/channels/${channelId}`, channelData);\n    return response.data;\n  },\n  // Delete a channel\n  deleteChannel: async channelId => {\n    await api.delete(`/api/social-media/channels/${channelId}`);\n  },\n  // Toggle channel status\n  toggleChannelStatus: async channelId => {\n    const response = await api.patch(`/api/social-media/channels/${channelId}/toggle`);\n    return response.data;\n  },\n  // Health check\n  testHealth: async channelId => {\n    const response = await api.post(`/api/social-media/channels/${channelId}/health`);\n    return response.data;\n  },\n  // Token rotate\n  rotateToken: async (channelId, token) => {\n    const response = await api.post(`/api/social-media/channels/${channelId}/rotate-token`, {\n      token\n    });\n    return response.data;\n  },\n  // Refresh channel info\n  refreshChannelInfo: async channelId => {\n    const response = await api.post(`/api/social-media/channels/${channelId}/refresh-info`);\n    return response.data;\n  },\n  // YENİ YAPI: Bot seçerek kanal ekle\n  addChannelByBot: async request => {\n    const payload = {\n      telegram_bot_id: request.telegram_bot_id,\n      brand_id: request.brand_id,\n      ...(request.channel_identifier && {\n        channel_identifier: request.channel_identifier\n      }),\n      ...(request.channel_identifiers && {\n        channel_identifiers: request.channel_identifiers\n      }),\n      ...(request.step && {\n        step: request.step\n      }),\n      ...(request.channel_username && {\n        channel_username: request.channel_username\n      })\n    };\n    const response = await api.post('/api/social-media/channels/add-by-bot', payload);\n    return response.data;\n  },\n  // LEGACY: Add channel by username or chat_id (eski yöntem)\n  addChannelByUsername: async (botToken, channelUsername, brandId, chatId) => {\n    const payload = {\n      bot_token: botToken,\n      brand_id: brandId\n    };\n    if (chatId) {\n      payload.chat_id = chatId;\n    }\n    if (channelUsername) {\n      payload.channel_username = channelUsername;\n    }\n    const response = await api.post('/api/social-media/channels/add-by-username', payload);\n    return response.data;\n  },\n  // Assign users to channel\n  assignUsersToChannel: async (channelId, userIds) => {\n    const response = await api.put(`/api/social-media/channels/${channelId}/assign-users`, {\n      user_ids: userIds\n    });\n    return response.data;\n  },\n  // Get assigned users for channel\n  getChannelAssignedUsers: async channelId => {\n    const response = await api.get(`/api/social-media/channels/${channelId}/assigned-users`);\n    return response.data;\n  },\n  // Assign channel to brand and users\n  assignChannel: async (channelId, data) => {\n    const response = await api.post(`/api/social-media/channels/${channelId}/assign`, data);\n    return response.data;\n  }\n};","map":{"version":3,"names":["api","socialMediaChannelsAPI","getPlatforms","response","get","data","discoverTelegramChats","bot_token","post","getTelegramChatInfo","chat_id","getChannels","page","per_page","platform","brand_id","search","params","URLSearchParams","toString","append","getChannel","channelId","getStatistics","createChannel","channelData","updateChannel","put","deleteChannel","delete","toggleChannelStatus","patch","testHealth","rotateToken","token","refreshChannelInfo","addChannelByBot","request","payload","telegram_bot_id","channel_identifier","channel_identifiers","step","channel_username","addChannelByUsername","botToken","channelUsername","brandId","chatId","assignUsersToChannel","userIds","user_ids","getChannelAssignedUsers","assignChannel"],"sources":["C:/Users/ilker/Desktop/aibrands/frontend/src/api/socialMediaChannels.ts"],"sourcesContent":["import api from '../utils/api';\n\nexport interface SocialMediaChannel {\n  id: number;\n  name: string;\n  platform: string;\n  type: string;\n  channel_id: string;\n  chat_id: string;\n  channel_username?: string;\n  member_count: number;\n  is_active: boolean;\n  telegram_bot_id?: number;\n  brand_id: number;\n  created_by: number;\n  updated_by: number;\n  created_at: string;\n  updated_at: string;\n  avatar_url?: string;\n  last_post_at?: string;\n  brand_name?: string;\n  last_activity?: string;\n  assigned_user_ids?: number[];  // Add for assign users modal\n  bot_token?: string;  // Add for token display\n}\n\nexport interface SocialMediaChannelCreate {\n  name: string;\n  platform: 'telegram';\n  type: 'group' | 'channel';\n  channel_id: string;\n  member_count?: number;\n  is_active?: boolean;\n  // Telegram specific\n  bot_token?: string;\n  chat_id?: string;\n  brand_id: number;\n}\n\nexport interface SocialMediaChannelUpdate {\n  name?: string;\n  platform?: 'telegram';\n  type?: 'group' | 'channel';\n  channel_id?: string;\n  member_count?: number;\n  is_active?: boolean;\n  // Telegram specific\n  bot_token?: string;\n  chat_id?: string;\n}\n\nexport interface SocialMediaChannelListResponse {\n  channels: SocialMediaChannel[];\n  total: number;\n  page: number;\n  per_page: number;\n  total_pages: number;\n}\n\nexport interface ChannelStatistics {\n  total_channels: number;\n  telegram_channels: number;\n  active_channels: number;\n  total_members: number;\n}\n\nexport const socialMediaChannelsAPI = {\n  // Get platform configurations\n  getPlatforms: async (): Promise<any> => {\n    const response = await api.get('/api/social-media/platforms');\n    return response.data;\n  },\n\n  // Telegram helpers\n  discoverTelegramChats: async (bot_token: string): Promise<{ \n    success: boolean;\n    chats: Array<{ \n      chat_id: string; \n      type?: string; \n      title?: string; \n      username?: string;\n      member_count?: number;\n      description?: string;\n      invite_link?: string;\n      is_admin?: boolean;\n    }>;\n    message?: string;\n    instructions?: string[];\n    bot_info?: {\n      id: number;\n      username: string;\n      first_name: string;\n      can_join_groups: boolean;\n      can_read_all_group_messages: boolean;\n    };\n  }> => {\n    const response = await api.post('/api/social-media/telegram/discover', { bot_token });\n    return response.data;\n  },\n  getTelegramChatInfo: async (bot_token: string, chat_id: string): Promise<{ chat_id: string; type?: string; title?: string; username?: string; member_count?: number }> => {\n    const response = await api.post('/api/social-media/telegram/chat-info', { bot_token, chat_id });\n    return response.data;\n  },\n\n  // Get channels with filtering and pagination\n  getChannels: async (\n    page: number = 1,\n    per_page: number = 10,\n    platform?: string,\n    brand_id?: number,\n    search?: string\n  ): Promise<SocialMediaChannelListResponse> => {\n    const params = new URLSearchParams({\n      page: page.toString(),\n      per_page: per_page.toString(),\n    });\n\n    if (platform) params.append('platform', platform);\n    if (brand_id) params.append('brand_id', brand_id.toString());\n    if (search) params.append('search', search);\n\n    const response = await api.get(`/api/social-media/channels?${params.toString()}`);\n    return response.data;\n  },\n\n  // Get single channel\n  getChannel: async (channelId: number): Promise<SocialMediaChannel> => {\n    const response = await api.get(`/api/social-media/channels/${channelId}`);\n    return response.data;\n  },\n\n  // Get channel statistics\n  getStatistics: async (): Promise<ChannelStatistics> => {\n    const response = await api.get('/api/social-media/channels/statistics');\n    return response.data;\n  },\n\n  // Create a new channel\n  createChannel: async (channelData: SocialMediaChannelCreate): Promise<SocialMediaChannel> => {\n    const response = await api.post('/api/social-media/channels', channelData);\n    return response.data;\n  },\n\n  // Update a channel\n  updateChannel: async (channelId: number, channelData: SocialMediaChannelUpdate): Promise<SocialMediaChannel> => {\n    const response = await api.put(`/api/social-media/channels/${channelId}`, channelData);\n    return response.data;\n  },\n\n  // Delete a channel\n  deleteChannel: async (channelId: number): Promise<void> => {\n    await api.delete(`/api/social-media/channels/${channelId}`);\n  },\n\n  // Toggle channel status\n  toggleChannelStatus: async (channelId: number): Promise<{ message: string; is_active: boolean }> => {\n    const response = await api.patch(`/api/social-media/channels/${channelId}/toggle`);\n    return response.data;\n  },\n\n  // Health check\n  testHealth: async (\n    channelId: number\n  ): Promise<{ connection_status: 'connected' | 'disconnected' | 'error'; test_message_sent: boolean; test_message_error?: string | null }> => {\n    const response = await api.post(`/api/social-media/channels/${channelId}/health`);\n    return response.data;\n  },\n\n  // Token rotate\n  rotateToken: async (channelId: number, token: string): Promise<{ message: string; token_preview: string }> => {\n    const response = await api.post(`/api/social-media/channels/${channelId}/rotate-token`, { token });\n    return response.data;\n  },\n\n  // Refresh channel info\n  refreshChannelInfo: async (channelId: number): Promise<SocialMediaChannel> => {\n    const response = await api.post(`/api/social-media/channels/${channelId}/refresh-info`);\n    return response.data;\n  },\n\n  // YENİ YAPI: Bot seçerek kanal ekle\n  addChannelByBot: async (request: {\n    telegram_bot_id: number;\n    channel_identifier?: string;\n    channel_identifiers?: string[];  // Bulk için\n    brand_id: number;\n    step?: string;\n    channel_username?: string;\n  }) => {\n    const payload = {\n      telegram_bot_id: request.telegram_bot_id,\n      brand_id: request.brand_id,\n      ...(request.channel_identifier && { channel_identifier: request.channel_identifier }),\n      ...(request.channel_identifiers && { channel_identifiers: request.channel_identifiers }),\n      ...(request.step && { step: request.step }),\n      ...(request.channel_username && { channel_username: request.channel_username }),\n    };\n\n    const response = await api.post('/api/social-media/channels/add-by-bot', payload);\n    return response.data;\n  },\n\n  // LEGACY: Add channel by username or chat_id (eski yöntem)\n  addChannelByUsername: async (botToken: string, channelUsername: string | null, brandId: number, chatId?: string): Promise<{\n    success: boolean;\n    message: string;\n    channel: {\n      id: number;\n      name: string;\n      username: string;\n      chat_id: string;\n      member_count: number;\n      type: string;\n    };\n  }> => {\n    const payload: any = { bot_token: botToken, brand_id: brandId };\n    if (chatId) {\n      payload.chat_id = chatId;\n    }\n    if (channelUsername) {\n      payload.channel_username = channelUsername;\n    }\n    const response = await api.post('/api/social-media/channels/add-by-username', payload);\n    return response.data;\n  },\n\n  // Assign users to channel\n  assignUsersToChannel: async (channelId: number, userIds: number[]): Promise<any> => {\n    const response = await api.put(`/api/social-media/channels/${channelId}/assign-users`, { user_ids: userIds });\n    return response.data;\n  },\n\n  // Get assigned users for channel\n  getChannelAssignedUsers: async (channelId: number): Promise<any> => {\n    const response = await api.get(`/api/social-media/channels/${channelId}/assigned-users`);\n    return response.data;\n  },\n\n  // Assign channel to brand and users\n  assignChannel: async (channelId: number, data: { brand_id?: number; user_ids?: number[] }): Promise<any> => {\n    const response = await api.post(`/api/social-media/channels/${channelId}/assign`, data);\n    return response.data;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}