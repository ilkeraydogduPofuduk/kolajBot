{"ast":null,"code":"import api from '../utils/api';\nexport const authAPI = {\n  login: async data => {\n    const response = await api.post('/api/auth/login', data);\n    return response.data;\n  },\n  refreshToken: async refreshToken => {\n    const response = await api.post('/api/auth/refresh', {\n      refresh_token: refreshToken\n    });\n    return response.data;\n  },\n  logout: async () => {\n    const response = await api.post('/api/auth/logout');\n    return response.data;\n  },\n  getCurrentUser: async () => {\n    const response = await api.get('/api/auth/me');\n    return response.data;\n  },\n  setup2FA: async () => {\n    const response = await api.post('/api/auth/setup-2fa');\n    return response.data;\n  },\n  verify2FASetup: async code => {\n    const response = await api.post('/api/auth/verify-2fa', {\n      code\n    });\n    return response.data;\n  },\n  disable2FA: async code => {\n    const response = await api.post('/api/auth/disable-2fa', {\n      code\n    });\n    return response.data;\n  },\n  changePassword: async (oldPassword, newPassword) => {\n    const response = await api.post('/api/auth/change-password', {\n      old_password: oldPassword,\n      new_password: newPassword\n    });\n    return response.data;\n  },\n  forceChangePassword: async newPassword => {\n    const response = await api.post('/api/auth/force-change-password', {\n      new_password: newPassword\n    });\n    return response.data;\n  }\n};","map":{"version":3,"names":["api","authAPI","login","data","response","post","refreshToken","refresh_token","logout","getCurrentUser","get","setup2FA","verify2FASetup","code","disable2FA","changePassword","oldPassword","newPassword","old_password","new_password","forceChangePassword"],"sources":["C:/Users/ilker/Desktop/aibrands/frontend/src/api/auth.ts"],"sourcesContent":["import api from '../utils/api';\n\nexport interface LoginRequest {\n  email: string;\n  password: string;\n  two_fa_code?: string;\n}\n\n\nexport interface TokenResponse {\n  access_token: string;\n  refresh_token: string;\n  token_type: string;\n  expires_in: number;\n  user: User;\n}\n\nexport interface User {\n  id: number;\n  email: string;\n  first_name: string;\n  last_name: string;\n  phone_number?: string;\n  role: string;\n  brand_ids: number[];\n  is_active: boolean;\n  is_2fa_enabled: boolean;\n  must_change_password: boolean;\n  last_login: string | null;\n  created_at: string;\n  permissions: string[];\n}\n\nexport const authAPI = {\n  login: async (data: LoginRequest): Promise<TokenResponse> => {\n    const response = await api.post('/api/auth/login', data);\n    return response.data;\n  },\n\n\n  refreshToken: async (refreshToken: string): Promise<{ access_token: string; token_type: string; expires_in: number }> => {\n    const response = await api.post('/api/auth/refresh', { refresh_token: refreshToken });\n    return response.data;\n  },\n\n  logout: async (): Promise<{ message: string }> => {\n    const response = await api.post('/api/auth/logout');\n    return response.data;\n  },\n\n  getCurrentUser: async (): Promise<User> => {\n    const response = await api.get('/api/auth/me');\n    return response.data;\n  },\n\n\n  setup2FA: async (): Promise<{ qr_code_url: string; secret: string }> => {\n    const response = await api.post('/api/auth/setup-2fa');\n    return response.data;\n  },\n\n  verify2FASetup: async (code: string): Promise<{ message: string }> => {\n    const response = await api.post('/api/auth/verify-2fa', { code });\n    return response.data;\n  },\n\n  disable2FA: async (code: string): Promise<{ message: string }> => {\n    const response = await api.post('/api/auth/disable-2fa', { code });\n    return response.data;\n  },\n\n  changePassword: async (oldPassword: string | null, newPassword: string): Promise<{ message: string }> => {\n    const response = await api.post('/api/auth/change-password', {\n      old_password: oldPassword,\n      new_password: newPassword\n    });\n    return response.data;\n  },\n\n  forceChangePassword: async (newPassword: string): Promise<{ message: string }> => {\n    const response = await api.post('/api/auth/force-change-password', {\n      new_password: newPassword\n    });\n    return response.data;\n  },\n};\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,cAAc;AAiC9B,OAAO,MAAMC,OAAO,GAAG;EACrBC,KAAK,EAAE,MAAOC,IAAkB,IAA6B;IAC3D,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,iBAAiB,EAAEF,IAAI,CAAC;IACxD,OAAOC,QAAQ,CAACD,IAAI;EACtB,CAAC;EAGDG,YAAY,EAAE,MAAOA,YAAoB,IAAgF;IACvH,MAAMF,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,mBAAmB,EAAE;MAAEE,aAAa,EAAED;IAAa,CAAC,CAAC;IACrF,OAAOF,QAAQ,CAACD,IAAI;EACtB,CAAC;EAEDK,MAAM,EAAE,MAAAA,CAAA,KAA0C;IAChD,MAAMJ,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,kBAAkB,CAAC;IACnD,OAAOD,QAAQ,CAACD,IAAI;EACtB,CAAC;EAEDM,cAAc,EAAE,MAAAA,CAAA,KAA2B;IACzC,MAAML,QAAQ,GAAG,MAAMJ,GAAG,CAACU,GAAG,CAAC,cAAc,CAAC;IAC9C,OAAON,QAAQ,CAACD,IAAI;EACtB,CAAC;EAGDQ,QAAQ,EAAE,MAAAA,CAAA,KAA8D;IACtE,MAAMP,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,qBAAqB,CAAC;IACtD,OAAOD,QAAQ,CAACD,IAAI;EACtB,CAAC;EAEDS,cAAc,EAAE,MAAOC,IAAY,IAAmC;IACpE,MAAMT,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,sBAAsB,EAAE;MAAEQ;IAAK,CAAC,CAAC;IACjE,OAAOT,QAAQ,CAACD,IAAI;EACtB,CAAC;EAEDW,UAAU,EAAE,MAAOD,IAAY,IAAmC;IAChE,MAAMT,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,uBAAuB,EAAE;MAAEQ;IAAK,CAAC,CAAC;IAClE,OAAOT,QAAQ,CAACD,IAAI;EACtB,CAAC;EAEDY,cAAc,EAAE,MAAAA,CAAOC,WAA0B,EAAEC,WAAmB,KAAmC;IACvG,MAAMb,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,2BAA2B,EAAE;MAC3Da,YAAY,EAAEF,WAAW;MACzBG,YAAY,EAAEF;IAChB,CAAC,CAAC;IACF,OAAOb,QAAQ,CAACD,IAAI;EACtB,CAAC;EAEDiB,mBAAmB,EAAE,MAAOH,WAAmB,IAAmC;IAChF,MAAMb,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,iCAAiC,EAAE;MACjEc,YAAY,EAAEF;IAChB,CAAC,CAAC;IACF,OAAOb,QAAQ,CAACD,IAAI;EACtB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}