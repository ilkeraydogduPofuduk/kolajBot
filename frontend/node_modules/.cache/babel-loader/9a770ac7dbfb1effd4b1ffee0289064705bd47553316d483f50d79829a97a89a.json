{"ast":null,"code":"import api from '../../utils/api';\nexport const templatesAPI = {\n  // Get all templates with pagination and filtering\n  getTemplates: async (page = 1, perPage = 20, search, category, templateType, visibility, isMaster) => {\n    const params = new URLSearchParams({\n      page: page.toString(),\n      per_page: perPage.toString()\n    });\n    if (search) params.append('search', search);\n    if (category) params.append('category', category);\n    if (templateType) params.append('template_type', templateType);\n    if (visibility) params.append('visibility', visibility);\n    if (isMaster !== undefined) params.append('is_master', isMaster.toString());\n    const response = await api.get(`/api/templates?${params}`);\n    return response.data;\n  },\n  // Get template by ID\n  getTemplate: async id => {\n    const response = await api.get(`/api/templates/${id}`);\n    return response.data;\n  },\n  // Create new template\n  createTemplate: async templateData => {\n    const response = await api.post('/api/templates', templateData);\n    return response.data;\n  },\n  // Update template\n  updateTemplate: async (id, templateData) => {\n    const response = await api.put(`/api/templates/${id}`, templateData);\n    return response.data;\n  },\n  // Delete template\n  deleteTemplate: async id => {\n    const response = await api.delete(`/api/templates/${id}`);\n    return response.data;\n  },\n  // Get user's templates\n  getUserTemplates: async () => {\n    const response = await api.get('/api/templates/user');\n    return response.data;\n  },\n  // Get master templates (gallery)\n  getMasterTemplates: async () => {\n    const response = await api.get('/api/templates/master');\n    return response.data;\n  },\n  // Copy template\n  copyTemplate: async (id, newName) => {\n    const response = await api.post(`/api/templates/${id}/copy`, {\n      name: newName\n    });\n    return response.data;\n  },\n  // Generate template from data\n  generateTemplate: async (templateId, data) => {\n    const response = await api.post(`/api/templates/${templateId}/generate`, {\n      data\n    });\n    return response.data;\n  },\n  // Preview template with data\n  previewTemplate: async (templateId, data) => {\n    const response = await api.post(`/api/templates/${templateId}/preview`, {\n      data\n    });\n    return response.data;\n  },\n  // Export template\n  exportTemplate: async (templateId, format, data) => {\n    const response = await api.post(`/api/templates/${templateId}/export`, {\n      format,\n      data\n    });\n    return response.data;\n  },\n  // Get template categories\n  getTemplateCategories: async () => {\n    const response = await api.get('/api/templates/categories');\n    return response.data;\n  },\n  // Get template statistics\n  getTemplateStats: async templateId => {\n    const response = await api.get(`/api/templates/${templateId}/stats`);\n    return response.data;\n  },\n  // Save template as draft\n  saveDraft: async templateData => {\n    const response = await api.post('/api/templates/draft', templateData);\n    return response.data;\n  },\n  // Load draft\n  loadDraft: async draftId => {\n    const response = await api.get(`/api/templates/draft/${draftId}`);\n    return response.data;\n  },\n  // Get user drafts\n  getUserDrafts: async () => {\n    const response = await api.get('/api/templates/drafts');\n    return response.data;\n  }\n};","map":{"version":3,"names":["api","templatesAPI","getTemplates","page","perPage","search","category","templateType","visibility","isMaster","params","URLSearchParams","toString","per_page","append","undefined","response","get","data","getTemplate","id","createTemplate","templateData","post","updateTemplate","put","deleteTemplate","delete","getUserTemplates","getMasterTemplates","copyTemplate","newName","name","generateTemplate","templateId","previewTemplate","exportTemplate","format","getTemplateCategories","getTemplateStats","saveDraft","loadDraft","draftId","getUserDrafts"],"sources":["C:/Users/ilker/Desktop/aibrands/frontend/src/services/api/templates.ts"],"sourcesContent":["import api from '../../utils/api';\r\n\r\nexport interface Template {\r\n  id: string;\r\n  name: string;\r\n  description?: string;\r\n  template_type: 'collage' | 'social_media' | 'banner' | 'poster';\r\n  type?: string; // For backward compatibility\r\n  template_data: any;\r\n  canvas_data?: any;\r\n  thumbnail?: string;\r\n  is_active: boolean;\r\n  is_auto_generated: boolean;\r\n  is_master_template: boolean;\r\n  product_id?: number;\r\n  brand_id?: number;\r\n  created_by: number;\r\n  visibility: 'PUBLIC' | 'PRIVATE' | 'BRAND_ONLY';\r\n  category?: string;\r\n  subcategory?: string;\r\n  placeholders: Placeholder[];\r\n  assigned_brands: number[];\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface Placeholder {\r\n  id: string;\r\n  name: string;\r\n  type: 'text' | 'image' | 'number' | 'date' | 'boolean' | 'array';\r\n  value?: any;\r\n  placeholder: string;\r\n  required: boolean;\r\n  validation?: {\r\n    min?: number;\r\n    max?: number;\r\n    pattern?: string;\r\n    message?: string;\r\n  };\r\n  category: 'product' | 'brand' | 'contact' | 'general';\r\n}\r\n\r\nexport interface TemplateCreateRequest {\r\n  name: string;\r\n  description?: string;\r\n  template_type: string;\r\n  template_data: any;\r\n  canvas_data?: any;\r\n  category?: string;\r\n  subcategory?: string;\r\n  placeholders: Placeholder[];\r\n  visibility: 'PUBLIC' | 'PRIVATE' | 'BRAND_ONLY';\r\n}\r\n\r\nexport interface TemplateUpdateRequest {\r\n  name?: string;\r\n  description?: string;\r\n  template_data?: any;\r\n  canvas_data?: any;\r\n  placeholders?: Placeholder[];\r\n  visibility?: 'PUBLIC' | 'PRIVATE' | 'BRAND_ONLY';\r\n  is_active?: boolean;\r\n}\r\n\r\nexport interface TemplatesResponse {\r\n  templates: Template[];\r\n  total: number;\r\n  page: number;\r\n  per_page: number;\r\n  total_pages: number;\r\n}\r\n\r\nexport interface TemplatePreviewData {\r\n  [key: string]: any;\r\n}\r\n\r\nexport const templatesAPI = {\r\n  // Get all templates with pagination and filtering\r\n  getTemplates: async (\r\n    page: number = 1,\r\n    perPage: number = 20,\r\n    search?: string,\r\n    category?: string,\r\n    templateType?: string,\r\n    visibility?: string,\r\n    isMaster?: boolean\r\n  ): Promise<TemplatesResponse> => {\r\n    const params = new URLSearchParams({\r\n      page: page.toString(),\r\n      per_page: perPage.toString(),\r\n    });\r\n    \r\n    if (search) params.append('search', search);\r\n    if (category) params.append('category', category);\r\n    if (templateType) params.append('template_type', templateType);\r\n    if (visibility) params.append('visibility', visibility);\r\n    if (isMaster !== undefined) params.append('is_master', isMaster.toString());\r\n    \r\n    const response = await api.get(`/api/templates?${params}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get template by ID\r\n  getTemplate: async (id: string): Promise<Template> => {\r\n    const response = await api.get(`/api/templates/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Create new template\r\n  createTemplate: async (templateData: TemplateCreateRequest): Promise<Template> => {\r\n    const response = await api.post('/api/templates', templateData);\r\n    return response.data;\r\n  },\r\n\r\n  // Update template\r\n  updateTemplate: async (id: string, templateData: TemplateUpdateRequest): Promise<Template> => {\r\n    const response = await api.put(`/api/templates/${id}`, templateData);\r\n    return response.data;\r\n  },\r\n\r\n  // Delete template\r\n  deleteTemplate: async (id: string): Promise<{ success: boolean; message: string }> => {\r\n    const response = await api.delete(`/api/templates/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get user's templates\r\n  getUserTemplates: async (): Promise<Template[]> => {\r\n    const response = await api.get('/api/templates/user');\r\n    return response.data;\r\n  },\r\n\r\n  // Get master templates (gallery)\r\n  getMasterTemplates: async (): Promise<Template[]> => {\r\n    const response = await api.get('/api/templates/master');\r\n    return response.data;\r\n  },\r\n\r\n  // Copy template\r\n  copyTemplate: async (id: string, newName?: string): Promise<Template> => {\r\n    const response = await api.post(`/api/templates/${id}/copy`, { name: newName });\r\n    return response.data;\r\n  },\r\n\r\n  // Generate template from data\r\n  generateTemplate: async (\r\n    templateId: string,\r\n    data: TemplatePreviewData\r\n  ): Promise<{ success: boolean; result: any; error?: string }> => {\r\n    const response = await api.post(`/api/templates/${templateId}/generate`, { data });\r\n    return response.data;\r\n  },\r\n\r\n  // Preview template with data\r\n  previewTemplate: async (\r\n    templateId: string,\r\n    data: TemplatePreviewData\r\n  ): Promise<{ success: boolean; preview_url: string; error?: string }> => {\r\n    const response = await api.post(`/api/templates/${templateId}/preview`, { data });\r\n    return response.data;\r\n  },\r\n\r\n  // Export template\r\n  exportTemplate: async (\r\n    templateId: string,\r\n    format: 'png' | 'jpg' | 'pdf',\r\n    data?: TemplatePreviewData\r\n  ): Promise<{ success: boolean; download_url: string; error?: string }> => {\r\n    const response = await api.post(`/api/templates/${templateId}/export`, { \r\n      format, \r\n      data \r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Get template categories\r\n  getTemplateCategories: async (): Promise<string[]> => {\r\n    const response = await api.get('/api/templates/categories');\r\n    return response.data;\r\n  },\r\n\r\n  // Get template statistics\r\n  getTemplateStats: async (templateId: string): Promise<{\r\n    usage_count: number;\r\n    assigned_brands: number;\r\n    last_used: string;\r\n    generation_count: number;\r\n  }> => {\r\n    const response = await api.get(`/api/templates/${templateId}/stats`);\r\n    return response.data;\r\n  },\r\n\r\n  // Save template as draft\r\n  saveDraft: async (templateData: any): Promise<{ success: boolean; draft_id: string }> => {\r\n    const response = await api.post('/api/templates/draft', templateData);\r\n    return response.data;\r\n  },\r\n\r\n  // Load draft\r\n  loadDraft: async (draftId: string): Promise<any> => {\r\n    const response = await api.get(`/api/templates/draft/${draftId}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get user drafts\r\n  getUserDrafts: async (): Promise<any[]> => {\r\n    const response = await api.get('/api/templates/drafts');\r\n    return response.data;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}