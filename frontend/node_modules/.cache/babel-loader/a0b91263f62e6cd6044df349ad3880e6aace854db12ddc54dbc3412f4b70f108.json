{"ast":null,"code":"import api from '../utils/api';\nexport const brandsAPI = {\n  // Mevcut fonksiyonlar\n  getBrands: async (page = 1, per_page = 10) => {\n    const params = new URLSearchParams({\n      page: page.toString(),\n      per_page: per_page.toString()\n    });\n    const response = await api.get(`/api/brands?${params}`);\n    return response.data;\n  },\n  getBrandsWithProducts: async () => {\n    const response = await api.get('/api/brands/with-products');\n    return response.data;\n  },\n  getBrand: async brandId => {\n    const response = await api.get(`/api/brands/${brandId}`);\n    return response.data;\n  },\n  createBrand: async data => {\n    const response = await api.post('/api/brands', data);\n    return response.data;\n  },\n  // Marka ekleme talebi fonksiyonları\n  createBrandRequest: async data => {\n    const response = await api.post('/api/brands/request', data);\n    return response.data;\n  },\n  getBrandRequests: async (page = 1, per_page = 10, status) => {\n    const params = new URLSearchParams({\n      page: page.toString(),\n      per_page: per_page.toString()\n    });\n    if (status) {\n      params.append('status', status);\n    }\n    const response = await api.get(`/api/brands/requests?${params}`);\n    return response.data;\n  },\n  getBrandRequest: async id => {\n    const response = await api.get(`/api/brands/requests/${id}`);\n    return response.data;\n  },\n  approveBrandRequest: async (id, admin_notes) => {\n    const response = await api.put(`/api/brands/requests/${id}/approve`, {\n      admin_notes\n    });\n    return response.data;\n  },\n  rejectBrandRequest: async (id, admin_notes) => {\n    const response = await api.put(`/api/brands/requests/${id}/reject`, {\n      status: 'rejected',\n      admin_notes\n    });\n    return response.data;\n  },\n  updateBrandRequest: async (id, data) => {\n    const response = await api.put(`/api/brands/requests/${id}`, data);\n    return response.data;\n  },\n  updateBrand: async (brandId, data) => {\n    const response = await api.put(`/api/brands/${brandId}`, data);\n    return response.data;\n  },\n  activateBrand: async brandId => {\n    const response = await api.put(`/api/brands/${brandId}/activate`);\n    return response.data;\n  },\n  deactivateBrand: async brandId => {\n    const response = await api.put(`/api/brands/${brandId}/deactivate`);\n    return response.data;\n  },\n  uploadLogo: async (brandId, file) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    const response = await api.post(`/api/brands/${brandId}/logo`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n  deleteBrand: async brandId => {\n    const response = await api.delete(`/api/brands/${brandId}`);\n    return response.data;\n  }\n};\n\n// Marka yöneticisi için istatistikler","map":{"version":3,"names":["api","brandsAPI","getBrands","page","per_page","params","URLSearchParams","toString","response","get","data","getBrandsWithProducts","getBrand","brandId","createBrand","post","createBrandRequest","getBrandRequests","status","append","getBrandRequest","id","approveBrandRequest","admin_notes","put","rejectBrandRequest","updateBrandRequest","updateBrand","activateBrand","deactivateBrand","uploadLogo","file","formData","FormData","headers","deleteBrand","delete"],"sources":["C:/Users/ilker/Desktop/aibrands/frontend/src/api/brands.ts"],"sourcesContent":["import api from '../utils/api';\n\nexport interface Brand {\n  id: number;\n  name: string;\n  description?: string;\n  category_id: number | null;\n  category?: {\n    id: number;\n    name: string;\n  };\n  logo_url: string;\n  website?: string;\n  email?: string;\n  phone?: string;\n  product_ids: number[] | null;\n  template_ids: number[] | null;\n  is_active: boolean;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface BrandCreate {\n  name: string;\n  category_id?: number;\n  logo_url: string;\n  logoFile?: File;\n}\n\nexport interface BrandUpdate {\n  name?: string;\n  category_id?: number;\n  logo_url?: string;\n  product_ids?: number[];\n  template_ids?: number[];\n  is_active?: boolean;\n}\n\nexport interface BrandListResponse {\n  brands: Brand[];\n  total: number;\n  page: number;\n  per_page: number;\n}\n\nexport interface BrandRequest {\n  id: number;\n  requested_by_user_id: number;\n  name: string;\n  category_id: number | null;\n  category?: {\n    id: number;\n    name: string;\n  };\n  logo_url: string | null;\n  request_message?: string;\n  status: 'pending' | 'approved' | 'rejected';\n  admin_notes?: string;\n  approved_by_user_id?: number;\n  approved_at?: string;\n  created_at: string;\n  updated_at: string;\n  requested_by_name?: string;\n  approved_by_name?: string;\n}\n\nexport interface BrandRequestCreate {\n  name: string;\n  category_id?: number;\n  logo_url: string;\n  request_message?: string;\n}\n\nexport interface BrandRequestListResponse {\n  requests: BrandRequest[];\n  total: number;\n  page: number;\n  per_page: number;\n}\n\nexport const brandsAPI = {\n  // Mevcut fonksiyonlar\n  getBrands: async (page = 1, per_page = 10): Promise<BrandListResponse> => {\n    const params = new URLSearchParams({\n      page: page.toString(),\n      per_page: per_page.toString(),\n    });\n    \n    const response = await api.get(`/api/brands?${params}`);\n    return response.data;\n  },\n\n  getBrandsWithProducts: async (): Promise<{ brands: Brand[] }> => {\n    const response = await api.get('/api/brands/with-products');\n    return response.data;\n  },\n\n  getBrand: async (brandId: number): Promise<Brand> => {\n    const response = await api.get(`/api/brands/${brandId}`);\n    return response.data;\n  },\n\n  createBrand: async (data: BrandCreate): Promise<Brand> => {\n    const response = await api.post('/api/brands', data);\n    return response.data;\n  },\n\n  // Marka ekleme talebi fonksiyonları\n  createBrandRequest: async (data: BrandRequestCreate): Promise<BrandRequest> => {\n    const response = await api.post('/api/brands/request', data);\n    return response.data;\n  },\n\n  getBrandRequests: async (\n    page: number = 1,\n    per_page: number = 10,\n    status?: string\n  ): Promise<BrandRequestListResponse> => {\n    const params = new URLSearchParams({\n      page: page.toString(),\n      per_page: per_page.toString(),\n    });\n    \n    if (status) {\n      params.append('status', status);\n    }\n\n    const response = await api.get(`/api/brands/requests?${params}`);\n    return response.data;\n  },\n\n  getBrandRequest: async (id: number): Promise<BrandRequest> => {\n    const response = await api.get(`/api/brands/requests/${id}`);\n    return response.data;\n  },\n\n  approveBrandRequest: async (id: number, admin_notes?: string): Promise<{ message: string }> => {\n    const response = await api.put(`/api/brands/requests/${id}/approve`, { admin_notes });\n    return response.data;\n  },\n\n  rejectBrandRequest: async (id: number, admin_notes: string): Promise<{ message: string }> => {\n    const response = await api.put(`/api/brands/requests/${id}/reject`, { \n      status: 'rejected',\n      admin_notes \n    });\n    return response.data;\n  },\n\n  updateBrandRequest: async (id: number, data: BrandRequestCreate): Promise<BrandRequest> => {\n    const response = await api.put(`/api/brands/requests/${id}`, data);\n    return response.data;\n  },\n\n  updateBrand: async (brandId: number, data: BrandUpdate): Promise<Brand> => {\n    const response = await api.put(`/api/brands/${brandId}`, data);\n    return response.data;\n  },\n\n  activateBrand: async (brandId: number): Promise<{ message: string }> => {\n    const response = await api.put(`/api/brands/${brandId}/activate`);\n    return response.data;\n  },\n\n  deactivateBrand: async (brandId: number): Promise<{ message: string }> => {\n    const response = await api.put(`/api/brands/${brandId}/deactivate`);\n    return response.data;\n  },\n\n  uploadLogo: async (brandId: number, file: File): Promise<{ message: string; logo_url: string }> => {\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    const response = await api.post(`/api/brands/${brandId}/logo`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  },\n\n  deleteBrand: async (brandId: number): Promise<{ message: string }> => {\n    const response = await api.delete(`/api/brands/${brandId}`);\n    return response.data;\n  },\n};\n\n// Marka yöneticisi için istatistikler\nexport interface BrandManagerStats {\n  total_brands: number;\n  active_brands: number;\n  pending_brand_requests: number;\n  managed_employees_count: number;\n}\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,cAAc;AAgF9B,OAAO,MAAMC,SAAS,GAAG;EACvB;EACAC,SAAS,EAAE,MAAAA,CAAOC,IAAI,GAAG,CAAC,EAAEC,QAAQ,GAAG,EAAE,KAAiC;IACxE,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC;MACjCH,IAAI,EAAEA,IAAI,CAACI,QAAQ,CAAC,CAAC;MACrBH,QAAQ,EAAEA,QAAQ,CAACG,QAAQ,CAAC;IAC9B,CAAC,CAAC;IAEF,MAAMC,QAAQ,GAAG,MAAMR,GAAG,CAACS,GAAG,CAAC,eAAeJ,MAAM,EAAE,CAAC;IACvD,OAAOG,QAAQ,CAACE,IAAI;EACtB,CAAC;EAEDC,qBAAqB,EAAE,MAAAA,CAAA,KAA0C;IAC/D,MAAMH,QAAQ,GAAG,MAAMR,GAAG,CAACS,GAAG,CAAC,2BAA2B,CAAC;IAC3D,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC;EAEDE,QAAQ,EAAE,MAAOC,OAAe,IAAqB;IACnD,MAAML,QAAQ,GAAG,MAAMR,GAAG,CAACS,GAAG,CAAC,eAAeI,OAAO,EAAE,CAAC;IACxD,OAAOL,QAAQ,CAACE,IAAI;EACtB,CAAC;EAEDI,WAAW,EAAE,MAAOJ,IAAiB,IAAqB;IACxD,MAAMF,QAAQ,GAAG,MAAMR,GAAG,CAACe,IAAI,CAAC,aAAa,EAAEL,IAAI,CAAC;IACpD,OAAOF,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAM,kBAAkB,EAAE,MAAON,IAAwB,IAA4B;IAC7E,MAAMF,QAAQ,GAAG,MAAMR,GAAG,CAACe,IAAI,CAAC,qBAAqB,EAAEL,IAAI,CAAC;IAC5D,OAAOF,QAAQ,CAACE,IAAI;EACtB,CAAC;EAEDO,gBAAgB,EAAE,MAAAA,CAChBd,IAAY,GAAG,CAAC,EAChBC,QAAgB,GAAG,EAAE,EACrBc,MAAe,KACuB;IACtC,MAAMb,MAAM,GAAG,IAAIC,eAAe,CAAC;MACjCH,IAAI,EAAEA,IAAI,CAACI,QAAQ,CAAC,CAAC;MACrBH,QAAQ,EAAEA,QAAQ,CAACG,QAAQ,CAAC;IAC9B,CAAC,CAAC;IAEF,IAAIW,MAAM,EAAE;MACVb,MAAM,CAACc,MAAM,CAAC,QAAQ,EAAED,MAAM,CAAC;IACjC;IAEA,MAAMV,QAAQ,GAAG,MAAMR,GAAG,CAACS,GAAG,CAAC,wBAAwBJ,MAAM,EAAE,CAAC;IAChE,OAAOG,QAAQ,CAACE,IAAI;EACtB,CAAC;EAEDU,eAAe,EAAE,MAAOC,EAAU,IAA4B;IAC5D,MAAMb,QAAQ,GAAG,MAAMR,GAAG,CAACS,GAAG,CAAC,wBAAwBY,EAAE,EAAE,CAAC;IAC5D,OAAOb,QAAQ,CAACE,IAAI;EACtB,CAAC;EAEDY,mBAAmB,EAAE,MAAAA,CAAOD,EAAU,EAAEE,WAAoB,KAAmC;IAC7F,MAAMf,QAAQ,GAAG,MAAMR,GAAG,CAACwB,GAAG,CAAC,wBAAwBH,EAAE,UAAU,EAAE;MAAEE;IAAY,CAAC,CAAC;IACrF,OAAOf,QAAQ,CAACE,IAAI;EACtB,CAAC;EAEDe,kBAAkB,EAAE,MAAAA,CAAOJ,EAAU,EAAEE,WAAmB,KAAmC;IAC3F,MAAMf,QAAQ,GAAG,MAAMR,GAAG,CAACwB,GAAG,CAAC,wBAAwBH,EAAE,SAAS,EAAE;MAClEH,MAAM,EAAE,UAAU;MAClBK;IACF,CAAC,CAAC;IACF,OAAOf,QAAQ,CAACE,IAAI;EACtB,CAAC;EAEDgB,kBAAkB,EAAE,MAAAA,CAAOL,EAAU,EAAEX,IAAwB,KAA4B;IACzF,MAAMF,QAAQ,GAAG,MAAMR,GAAG,CAACwB,GAAG,CAAC,wBAAwBH,EAAE,EAAE,EAAEX,IAAI,CAAC;IAClE,OAAOF,QAAQ,CAACE,IAAI;EACtB,CAAC;EAEDiB,WAAW,EAAE,MAAAA,CAAOd,OAAe,EAAEH,IAAiB,KAAqB;IACzE,MAAMF,QAAQ,GAAG,MAAMR,GAAG,CAACwB,GAAG,CAAC,eAAeX,OAAO,EAAE,EAAEH,IAAI,CAAC;IAC9D,OAAOF,QAAQ,CAACE,IAAI;EACtB,CAAC;EAEDkB,aAAa,EAAE,MAAOf,OAAe,IAAmC;IACtE,MAAML,QAAQ,GAAG,MAAMR,GAAG,CAACwB,GAAG,CAAC,eAAeX,OAAO,WAAW,CAAC;IACjE,OAAOL,QAAQ,CAACE,IAAI;EACtB,CAAC;EAEDmB,eAAe,EAAE,MAAOhB,OAAe,IAAmC;IACxE,MAAML,QAAQ,GAAG,MAAMR,GAAG,CAACwB,GAAG,CAAC,eAAeX,OAAO,aAAa,CAAC;IACnE,OAAOL,QAAQ,CAACE,IAAI;EACtB,CAAC;EAEDoB,UAAU,EAAE,MAAAA,CAAOjB,OAAe,EAAEkB,IAAU,KAAqD;IACjG,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACb,MAAM,CAAC,MAAM,EAAEY,IAAI,CAAC;IAE7B,MAAMvB,QAAQ,GAAG,MAAMR,GAAG,CAACe,IAAI,CAAC,eAAeF,OAAO,OAAO,EAAEmB,QAAQ,EAAE;MACvEE,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACF,OAAO1B,QAAQ,CAACE,IAAI;EACtB,CAAC;EAEDyB,WAAW,EAAE,MAAOtB,OAAe,IAAmC;IACpE,MAAML,QAAQ,GAAG,MAAMR,GAAG,CAACoC,MAAM,CAAC,eAAevB,OAAO,EAAE,CAAC;IAC3D,OAAOL,QAAQ,CAACE,IAAI;EACtB;AACF,CAAC;;AAED","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}