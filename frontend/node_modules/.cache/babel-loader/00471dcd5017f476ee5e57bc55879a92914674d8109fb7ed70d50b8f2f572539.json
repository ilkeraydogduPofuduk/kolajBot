{"ast":null,"code":"// AI Template Generation Service\n// Açık kaynak kodlu AI modelleri kullanarak şablon oluşturur\n\nclass AITemplateService {\n  constructor() {\n    this.baseUrl = 'https://api.huggingface.co/models';\n    // Hugging Face API\n    this.fallbackUrl = 'https://api.openai.com/v1';\n  }\n  // Fallback olarak OpenAI\n\n  async generateTemplate(request) {\n    try {\n      // Direkt local template oluştur - daha güvenilir\n      const template = await this.generateLocalTemplate(request);\n      return {\n        success: true,\n        template\n      };\n    } catch (error) {\n      console.error('AI Template generation error:', error);\n      return {\n        success: false,\n        error: 'AI servisi şu anda kullanılamıyor. Lütfen daha sonra tekrar deneyin.'\n      };\n    }\n  }\n  async tryHuggingFace(request) {\n    try {\n      // Hugging Face'deki açık kaynak text-to-image modelleri\n      const model = 'stabilityai/stable-diffusion-xl-base-1.0';\n      const response = await fetch(`${this.baseUrl}/${model}`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${process.env.REACT_APP_HUGGINGFACE_TOKEN || 'demo'}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          inputs: this.buildPrompt(request.prompt, request.style),\n          parameters: {\n            num_inference_steps: 20,\n            guidance_scale: 7.5,\n            width: 720,\n            height: 1280\n          }\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Hugging Face API error');\n      }\n      const imageBlob = await response.blob();\n      const imageUrl = URL.createObjectURL(imageBlob);\n\n      // Görseli canvas'a dönüştür\n      const template = await this.createTemplateFromImage(imageUrl, request);\n      return {\n        success: true,\n        template\n      };\n    } catch (error) {\n      console.log('Hugging Face failed, trying fallback...');\n      return {\n        success: false\n      };\n    }\n  }\n  async tryFallback(request) {\n    try {\n      // Fallback: Yerel AI simülasyonu\n      const template = await this.generateLocalTemplate(request);\n      return {\n        success: true,\n        template\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: 'AI servisi şu anda kullanılamıyor.'\n      };\n    }\n  }\n  buildPrompt(userPrompt, style) {\n    const stylePrompts = {\n      modern: 'modern, clean, minimalist design, contemporary',\n      vintage: 'vintage, retro, classic, nostalgic design',\n      minimalist: 'minimalist, simple, clean, white space',\n      corporate: 'professional, corporate, business, formal',\n      creative: 'creative, artistic, colorful, innovative',\n      social: 'social media, Instagram, Facebook, trendy'\n    };\n    const styleText = stylePrompts[style] || 'modern';\n    return `${userPrompt}, ${styleText}, high quality, professional design, template layout`;\n  }\n  async createTemplateFromImage(imageUrl, request) {\n    // Görseli canvas'a yükle ve şablon oluştur\n    return new Promise(resolve => {\n      const img = new Image();\n      img.crossOrigin = 'anonymous';\n      img.onload = () => {\n        const template = {\n          name: `AI Generated - ${request.style}`,\n          canvas_data: {\n            version: '6.0.0',\n            objects: [{\n              type: 'image',\n              left: 0,\n              top: 0,\n              width: 720,\n              height: 1280,\n              src: imageUrl,\n              selectable: false,\n              evented: false\n            }],\n            background: '#ffffff'\n          },\n          created_by: 'AI',\n          style: request.style,\n          prompt: request.prompt\n        };\n        resolve(template);\n      };\n      img.src = imageUrl;\n    });\n  }\n  async generateLocalTemplate(request) {\n    // Yerel AI simülasyonu - gerçek AI yerine template pattern'leri kullanır\n    const templates = this.getTemplatePatterns(request.style);\n    const selectedTemplate = templates[Math.floor(Math.random() * templates.length)];\n\n    // Template'i kullanıcı prompt'una göre özelleştir\n    const customizedTemplate = this.customizeTemplate(selectedTemplate, request.prompt);\n    return {\n      name: `AI Generated - ${request.style}`,\n      canvas_data: customizedTemplate,\n      created_by: 'AI',\n      style: request.style,\n      prompt: request.prompt\n    };\n  }\n  getTemplatePatterns(style) {\n    const patterns = {\n      modern: [{\n        version: '6.0.0',\n        objects: [{\n          type: 'rect',\n          left: 50,\n          top: 50,\n          width: 620,\n          height: 200,\n          fill: '#f8fafc',\n          stroke: '#e2e8f0',\n          strokeWidth: 2,\n          rx: 10,\n          ry: 10\n        }, {\n          type: 'text',\n          left: 100,\n          top: 120,\n          text: 'BAŞLIK',\n          fontSize: 48,\n          fontFamily: 'Arial',\n          fontWeight: 'bold',\n          fill: '#1e293b'\n        }, {\n          type: 'text',\n          left: 100,\n          top: 180,\n          text: 'Alt başlık metni',\n          fontSize: 24,\n          fontFamily: 'Arial',\n          fill: '#64748b'\n        }],\n        background: '#ffffff'\n      }],\n      vintage: [{\n        version: '6.0.0',\n        objects: [{\n          type: 'rect',\n          left: 0,\n          top: 0,\n          width: 720,\n          height: 1280,\n          fill: '#fef3c7',\n          stroke: '#d97706',\n          strokeWidth: 4\n        }, {\n          type: 'text',\n          left: 100,\n          top: 200,\n          text: 'VINTAGE',\n          fontSize: 64,\n          fontFamily: 'serif',\n          fontWeight: 'bold',\n          fill: '#92400e'\n        }],\n        background: '#fef3c7'\n      }],\n      corporate: [{\n        version: '6.0.0',\n        objects: [{\n          type: 'rect',\n          left: 0,\n          top: 0,\n          width: 720,\n          height: 100,\n          fill: '#1e40af',\n          stroke: 'none'\n        }, {\n          type: 'text',\n          left: 50,\n          top: 50,\n          text: 'KURUMSAL BAŞLIK',\n          fontSize: 32,\n          fontFamily: 'Arial',\n          fontWeight: 'bold',\n          fill: '#ffffff'\n        }],\n        background: '#ffffff'\n      }]\n    };\n    return patterns[style] || patterns.modern;\n  }\n  customizeTemplate(template, prompt) {\n    // Prompt'a göre template'i özelleştir\n    const customized = JSON.parse(JSON.stringify(template));\n\n    // Prompt'tan anahtar kelimeleri çıkar ve template'e uygula\n    const keywords = this.extractKeywords(prompt);\n\n    // Başlık metnini güncelle\n    const titleObject = customized.objects.find(obj => obj.type === 'text' && obj.fontSize > 30);\n    if (titleObject && keywords.title) {\n      titleObject.text = keywords.title;\n    }\n\n    // Renkleri güncelle\n    if (keywords.colors) {\n      customized.objects.forEach(obj => {\n        if (obj.fill && obj.fill !== '#ffffff') {\n          obj.fill = keywords.colors[0] || obj.fill;\n        }\n      });\n    }\n    return customized;\n  }\n  extractKeywords(prompt) {\n    const keywords = {};\n\n    // Başlık çıkarımı\n    const titleMatch = prompt.match(/(?:için|kartı|tasarımı|şablonu)\\s+([^,\\.]+)/i);\n    if (titleMatch) {\n      keywords.title = titleMatch[1].trim().toUpperCase();\n    }\n\n    // Renk çıkarımı\n    const colorWords = ['mavi', 'kırmızı', 'yeşil', 'sarı', 'mor', 'pembe', 'siyah', 'beyaz'];\n    const foundColors = colorWords.filter(color => prompt.toLowerCase().includes(color));\n    if (foundColors.length > 0) {\n      keywords.colors = foundColors;\n    }\n    return keywords;\n  }\n}\nexport const aiTemplateService = new AITemplateService();","map":{"version":3,"names":["AITemplateService","constructor","baseUrl","fallbackUrl","generateTemplate","request","template","generateLocalTemplate","success","error","console","tryHuggingFace","model","response","fetch","method","headers","process","env","REACT_APP_HUGGINGFACE_TOKEN","body","JSON","stringify","inputs","buildPrompt","prompt","style","parameters","num_inference_steps","guidance_scale","width","height","ok","Error","imageBlob","blob","imageUrl","URL","createObjectURL","createTemplateFromImage","log","tryFallback","userPrompt","stylePrompts","modern","vintage","minimalist","corporate","creative","social","styleText","Promise","resolve","img","Image","crossOrigin","onload","name","canvas_data","version","objects","type","left","top","src","selectable","evented","background","created_by","templates","getTemplatePatterns","selectedTemplate","Math","floor","random","length","customizedTemplate","customizeTemplate","patterns","fill","stroke","strokeWidth","rx","ry","text","fontSize","fontFamily","fontWeight","customized","parse","keywords","extractKeywords","titleObject","find","obj","title","colors","forEach","titleMatch","match","trim","toUpperCase","colorWords","foundColors","filter","color","toLowerCase","includes","aiTemplateService"],"sources":["C:/Users/ilker/Desktop/aibrands/frontend/src/services/aiTemplateService.ts"],"sourcesContent":["// AI Template Generation Service\r\n// Açık kaynak kodlu AI modelleri kullanarak şablon oluşturur\r\n\r\ninterface AITemplateRequest {\r\n  prompt: string;\r\n  style: string;\r\n}\r\n\r\ninterface AITemplateResponse {\r\n  success: boolean;\r\n  template?: any;\r\n  error?: string;\r\n}\r\n\r\nclass AITemplateService {\r\n  private baseUrl = 'https://api.huggingface.co/models'; // Hugging Face API\r\n  private fallbackUrl = 'https://api.openai.com/v1'; // Fallback olarak OpenAI\r\n\r\n  async generateTemplate(request: AITemplateRequest): Promise<AITemplateResponse> {\r\n    try {\r\n      // Direkt local template oluştur - daha güvenilir\r\n      const template = await this.generateLocalTemplate(request);\r\n      return {\r\n        success: true,\r\n        template\r\n      };\r\n    } catch (error) {\r\n      console.error('AI Template generation error:', error);\r\n      return {\r\n        success: false,\r\n        error: 'AI servisi şu anda kullanılamıyor. Lütfen daha sonra tekrar deneyin.'\r\n      };\r\n    }\r\n  }\r\n\r\n  private async tryHuggingFace(request: AITemplateRequest): Promise<AITemplateResponse> {\r\n    try {\r\n      // Hugging Face'deki açık kaynak text-to-image modelleri\r\n      const model = 'stabilityai/stable-diffusion-xl-base-1.0';\r\n      \r\n      const response = await fetch(`${this.baseUrl}/${model}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': `Bearer ${process.env.REACT_APP_HUGGINGFACE_TOKEN || 'demo'}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          inputs: this.buildPrompt(request.prompt, request.style),\r\n          parameters: {\r\n            num_inference_steps: 20,\r\n            guidance_scale: 7.5,\r\n            width: 720,\r\n            height: 1280\r\n          }\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Hugging Face API error');\r\n      }\r\n\r\n      const imageBlob = await response.blob();\r\n      const imageUrl = URL.createObjectURL(imageBlob);\r\n\r\n      // Görseli canvas'a dönüştür\r\n      const template = await this.createTemplateFromImage(imageUrl, request);\r\n      \r\n      return {\r\n        success: true,\r\n        template\r\n      };\r\n    } catch (error) {\r\n      console.log('Hugging Face failed, trying fallback...');\r\n      return { success: false };\r\n    }\r\n  }\r\n\r\n  private async tryFallback(request: AITemplateRequest): Promise<AITemplateResponse> {\r\n    try {\r\n      // Fallback: Yerel AI simülasyonu\r\n      const template = await this.generateLocalTemplate(request);\r\n      return {\r\n        success: true,\r\n        template\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: 'AI servisi şu anda kullanılamıyor.'\r\n      };\r\n    }\r\n  }\r\n\r\n  private buildPrompt(userPrompt: string, style: string): string {\r\n    const stylePrompts = {\r\n      modern: 'modern, clean, minimalist design, contemporary',\r\n      vintage: 'vintage, retro, classic, nostalgic design',\r\n      minimalist: 'minimalist, simple, clean, white space',\r\n      corporate: 'professional, corporate, business, formal',\r\n      creative: 'creative, artistic, colorful, innovative',\r\n      social: 'social media, Instagram, Facebook, trendy'\r\n    };\r\n\r\n    const styleText = stylePrompts[style as keyof typeof stylePrompts] || 'modern';\r\n    \r\n    return `${userPrompt}, ${styleText}, high quality, professional design, template layout`;\r\n  }\r\n\r\n  private async createTemplateFromImage(imageUrl: string, request: AITemplateRequest): Promise<any> {\r\n    // Görseli canvas'a yükle ve şablon oluştur\r\n    return new Promise((resolve) => {\r\n      const img = new Image();\r\n      img.crossOrigin = 'anonymous';\r\n      img.onload = () => {\r\n        const template = {\r\n          name: `AI Generated - ${request.style}`,\r\n          canvas_data: {\r\n            version: '6.0.0',\r\n            objects: [\r\n              {\r\n                type: 'image',\r\n                left: 0,\r\n                top: 0,\r\n                width: 720,\r\n                height: 1280,\r\n                src: imageUrl,\r\n                selectable: false,\r\n                evented: false\r\n              }\r\n            ],\r\n            background: '#ffffff'\r\n          },\r\n          created_by: 'AI',\r\n          style: request.style,\r\n          prompt: request.prompt\r\n        };\r\n        resolve(template);\r\n      };\r\n      img.src = imageUrl;\r\n    });\r\n  }\r\n\r\n  private async generateLocalTemplate(request: AITemplateRequest): Promise<any> {\r\n    // Yerel AI simülasyonu - gerçek AI yerine template pattern'leri kullanır\r\n    const templates = this.getTemplatePatterns(request.style);\r\n    const selectedTemplate = templates[Math.floor(Math.random() * templates.length)];\r\n    \r\n    // Template'i kullanıcı prompt'una göre özelleştir\r\n    const customizedTemplate = this.customizeTemplate(selectedTemplate, request.prompt);\r\n    \r\n    return {\r\n      name: `AI Generated - ${request.style}`,\r\n      canvas_data: customizedTemplate,\r\n      created_by: 'AI',\r\n      style: request.style,\r\n      prompt: request.prompt\r\n    };\r\n  }\r\n\r\n  private getTemplatePatterns(style: string): any[] {\r\n    const patterns = {\r\n      modern: [\r\n        {\r\n          version: '6.0.0',\r\n          objects: [\r\n            {\r\n              type: 'rect',\r\n              left: 50,\r\n              top: 50,\r\n              width: 620,\r\n              height: 200,\r\n              fill: '#f8fafc',\r\n              stroke: '#e2e8f0',\r\n              strokeWidth: 2,\r\n              rx: 10,\r\n              ry: 10\r\n            },\r\n            {\r\n              type: 'text',\r\n              left: 100,\r\n              top: 120,\r\n              text: 'BAŞLIK',\r\n              fontSize: 48,\r\n              fontFamily: 'Arial',\r\n              fontWeight: 'bold',\r\n              fill: '#1e293b'\r\n            },\r\n            {\r\n              type: 'text',\r\n              left: 100,\r\n              top: 180,\r\n              text: 'Alt başlık metni',\r\n              fontSize: 24,\r\n              fontFamily: 'Arial',\r\n              fill: '#64748b'\r\n            }\r\n          ],\r\n          background: '#ffffff'\r\n        }\r\n      ],\r\n      vintage: [\r\n        {\r\n          version: '6.0.0',\r\n          objects: [\r\n            {\r\n              type: 'rect',\r\n              left: 0,\r\n              top: 0,\r\n              width: 720,\r\n              height: 1280,\r\n              fill: '#fef3c7',\r\n              stroke: '#d97706',\r\n              strokeWidth: 4\r\n            },\r\n            {\r\n              type: 'text',\r\n              left: 100,\r\n              top: 200,\r\n              text: 'VINTAGE',\r\n              fontSize: 64,\r\n              fontFamily: 'serif',\r\n              fontWeight: 'bold',\r\n              fill: '#92400e'\r\n            }\r\n          ],\r\n          background: '#fef3c7'\r\n        }\r\n      ],\r\n      corporate: [\r\n        {\r\n          version: '6.0.0',\r\n          objects: [\r\n            {\r\n              type: 'rect',\r\n              left: 0,\r\n              top: 0,\r\n              width: 720,\r\n              height: 100,\r\n              fill: '#1e40af',\r\n              stroke: 'none'\r\n            },\r\n            {\r\n              type: 'text',\r\n              left: 50,\r\n              top: 50,\r\n              text: 'KURUMSAL BAŞLIK',\r\n              fontSize: 32,\r\n              fontFamily: 'Arial',\r\n              fontWeight: 'bold',\r\n              fill: '#ffffff'\r\n            }\r\n          ],\r\n          background: '#ffffff'\r\n        }\r\n      ]\r\n    };\r\n\r\n    return patterns[style as keyof typeof patterns] || patterns.modern;\r\n  }\r\n\r\n  private customizeTemplate(template: any, prompt: string): any {\r\n    // Prompt'a göre template'i özelleştir\r\n    const customized = JSON.parse(JSON.stringify(template));\r\n    \r\n    // Prompt'tan anahtar kelimeleri çıkar ve template'e uygula\r\n    const keywords = this.extractKeywords(prompt);\r\n    \r\n    // Başlık metnini güncelle\r\n    const titleObject = customized.objects.find((obj: any) => obj.type === 'text' && obj.fontSize > 30);\r\n    if (titleObject && keywords.title) {\r\n      titleObject.text = keywords.title;\r\n    }\r\n\r\n    // Renkleri güncelle\r\n    if (keywords.colors) {\r\n      customized.objects.forEach((obj: any) => {\r\n        if (obj.fill && obj.fill !== '#ffffff') {\r\n          obj.fill = keywords.colors[0] || obj.fill;\r\n        }\r\n      });\r\n    }\r\n\r\n    return customized;\r\n  }\r\n\r\n  private extractKeywords(prompt: string): any {\r\n    const keywords: any = {};\r\n    \r\n    // Başlık çıkarımı\r\n    const titleMatch = prompt.match(/(?:için|kartı|tasarımı|şablonu)\\s+([^,\\.]+)/i);\r\n    if (titleMatch) {\r\n      keywords.title = titleMatch[1].trim().toUpperCase();\r\n    }\r\n\r\n    // Renk çıkarımı\r\n    const colorWords = ['mavi', 'kırmızı', 'yeşil', 'sarı', 'mor', 'pembe', 'siyah', 'beyaz'];\r\n    const foundColors = colorWords.filter(color => \r\n      prompt.toLowerCase().includes(color)\r\n    );\r\n    if (foundColors.length > 0) {\r\n      keywords.colors = foundColors;\r\n    }\r\n\r\n    return keywords;\r\n  }\r\n}\r\n\r\nexport const aiTemplateService = new AITemplateService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}