{"ast":null,"code":"import api from '../../utils/api';\nexport const collagesAPI = {\n  // Get pending collages (products without collage or missing info)\n  getPendingCollages: async (page = 1, perPage = 20, brandId, search, filterType) => {\n    const params = new URLSearchParams({\n      page: page.toString(),\n      per_page: perPage.toString()\n    });\n    if (brandId) {\n      params.append('brand_id', brandId.toString());\n    }\n    if (search) {\n      params.append('search', search);\n    }\n    if (filterType) {\n      params.append('filter_type', filterType);\n    }\n    const response = await api.get(`/api/collages/pending?${params}`);\n    return response.data;\n  },\n  // Update product info and create collage\n  completeProductInfo: async (productId, data) => {\n    const response = await api.put(`/api/collages/products/${productId}/complete`, data);\n    return response.data;\n  },\n  // Manually create collage for a product\n  createCollageManually: async (productId, sendToTelegram = true) => {\n    const response = await api.post(`/api/collages/products/${productId}/create-collage`, {\n      send_to_telegram: sendToTelegram\n    });\n    return response.data;\n  },\n  // Get collage statistics\n  getStatistics: async () => {\n    const response = await api.get('/api/collages/statistics');\n    return response.data;\n  }\n};","map":{"version":3,"names":["api","collagesAPI","getPendingCollages","page","perPage","brandId","search","filterType","params","URLSearchParams","toString","per_page","append","response","get","data","completeProductInfo","productId","put","createCollageManually","sendToTelegram","post","send_to_telegram","getStatistics"],"sources":["C:/Users/ilker/Desktop/aibrands/frontend/src/services/api/collages.ts"],"sourcesContent":["import api from '../../utils/api';\r\n\r\ninterface PendingCollagesResponse {\r\n  products: any[];\r\n  total: number;\r\n  page: number;\r\n  per_page: number;\r\n  total_pages: number;\r\n}\r\n\r\ninterface CompleteProductResponse {\r\n  message: string;\r\n  updated_fields: string[];\r\n  collage_created: boolean;\r\n}\r\n\r\ninterface CreateCollageResponse {\r\n  message: string;\r\n  collage_path: string | null;\r\n  sent_to_telegram: boolean;\r\n}\r\n\r\ninterface StatisticsResponse {\r\n  total_products: number;\r\n  products_with_collage: number;\r\n  products_missing_info: number;\r\n  products_ready_for_collage: number;\r\n  completion_rate: number;\r\n}\r\n\r\nexport const collagesAPI = {\r\n  // Get pending collages (products without collage or missing info)\r\n  getPendingCollages: async (\r\n    page: number = 1, \r\n    perPage: number = 20, \r\n    brandId?: number,\r\n    search?: string,\r\n    filterType?: string\r\n  ): Promise<PendingCollagesResponse> => {\r\n    const params = new URLSearchParams({\r\n      page: page.toString(),\r\n      per_page: perPage.toString(),\r\n    });\r\n    \r\n    if (brandId) {\r\n      params.append('brand_id', brandId.toString());\r\n    }\r\n    \r\n    if (search) {\r\n      params.append('search', search);\r\n    }\r\n    \r\n    if (filterType) {\r\n      params.append('filter_type', filterType);\r\n    }\r\n    \r\n    const response = await api.get(`/api/collages/pending?${params}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Update product info and create collage\r\n  completeProductInfo: async (productId: number, data: any): Promise<CompleteProductResponse> => {\r\n    const response = await api.put(`/api/collages/products/${productId}/complete`, data);\r\n    return response.data;\r\n  },\r\n\r\n  // Manually create collage for a product\r\n  createCollageManually: async (productId: number, sendToTelegram: boolean = true): Promise<CreateCollageResponse> => {\r\n    const response = await api.post(`/api/collages/products/${productId}/create-collage`, {\r\n      send_to_telegram: sendToTelegram\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Get collage statistics\r\n  getStatistics: async (): Promise<StatisticsResponse> => {\r\n    const response = await api.get('/api/collages/statistics');\r\n    return response.data;\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,iBAAiB;AA8BjC,OAAO,MAAMC,WAAW,GAAG;EACzB;EACAC,kBAAkB,EAAE,MAAAA,CAClBC,IAAY,GAAG,CAAC,EAChBC,OAAe,GAAG,EAAE,EACpBC,OAAgB,EAChBC,MAAe,EACfC,UAAmB,KACkB;IACrC,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC;MACjCN,IAAI,EAAEA,IAAI,CAACO,QAAQ,CAAC,CAAC;MACrBC,QAAQ,EAAEP,OAAO,CAACM,QAAQ,CAAC;IAC7B,CAAC,CAAC;IAEF,IAAIL,OAAO,EAAE;MACXG,MAAM,CAACI,MAAM,CAAC,UAAU,EAAEP,OAAO,CAACK,QAAQ,CAAC,CAAC,CAAC;IAC/C;IAEA,IAAIJ,MAAM,EAAE;MACVE,MAAM,CAACI,MAAM,CAAC,QAAQ,EAAEN,MAAM,CAAC;IACjC;IAEA,IAAIC,UAAU,EAAE;MACdC,MAAM,CAACI,MAAM,CAAC,aAAa,EAAEL,UAAU,CAAC;IAC1C;IAEA,MAAMM,QAAQ,GAAG,MAAMb,GAAG,CAACc,GAAG,CAAC,yBAAyBN,MAAM,EAAE,CAAC;IACjE,OAAOK,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAC,mBAAmB,EAAE,MAAAA,CAAOC,SAAiB,EAAEF,IAAS,KAAuC;IAC7F,MAAMF,QAAQ,GAAG,MAAMb,GAAG,CAACkB,GAAG,CAAC,0BAA0BD,SAAS,WAAW,EAAEF,IAAI,CAAC;IACpF,OAAOF,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAI,qBAAqB,EAAE,MAAAA,CAAOF,SAAiB,EAAEG,cAAuB,GAAG,IAAI,KAAqC;IAClH,MAAMP,QAAQ,GAAG,MAAMb,GAAG,CAACqB,IAAI,CAAC,0BAA0BJ,SAAS,iBAAiB,EAAE;MACpFK,gBAAgB,EAAEF;IACpB,CAAC,CAAC;IACF,OAAOP,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACAQ,aAAa,EAAE,MAAAA,CAAA,KAAyC;IACtD,MAAMV,QAAQ,GAAG,MAAMb,GAAG,CAACc,GAAG,CAAC,0BAA0B,CAAC;IAC1D,OAAOD,QAAQ,CAACE,IAAI;EACtB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}