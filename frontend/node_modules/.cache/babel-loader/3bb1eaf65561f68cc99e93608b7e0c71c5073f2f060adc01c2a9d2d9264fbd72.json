{"ast":null,"code":"import api from '../utils/api';\nexport const productsAPI = {\n  // Get products list\n  getProducts: async (page = 1, per_page = 20, brand_id, search, filters) => {\n    const params = new URLSearchParams({\n      page: page.toString(),\n      per_page: per_page.toString()\n    });\n    if (brand_id) params.append('brand_id', brand_id.toString());\n    if (search) params.append('search', search);\n\n    // Add filters\n    if (filters) {\n      if (filters.product_type) params.append('product_type', filters.product_type);\n      if (filters.color) params.append('color', filters.color);\n      if (filters.size_range) params.append('size_range', filters.size_range);\n      if (filters.price_min) params.append('price_min', filters.price_min);\n      if (filters.price_max) params.append('price_max', filters.price_max);\n      if (filters.incomplete !== undefined) params.append('incomplete', filters.incomplete.toString());\n      if (filters.has_second_product !== undefined) params.append('has_second_product', filters.has_second_product.toString());\n    }\n    const url = `/api/products?${params.toString()}`;\n    const response = await api.get(url);\n    return response.data;\n  },\n  // Get single product\n  getProduct: async productId => {\n    const response = await api.get(`/api/products/${productId}`);\n    return response.data;\n  },\n  // Upload product images (V2 - Enterprise) - Otomatik marka tespiti\n  uploadProductImages: async files => {\n    const formData = new FormData();\n    files.forEach(file => {\n      formData.append('files', file);\n    });\n\n    // FINAL: En temiz ve hızlı upload endpoint - marka tespiti otomatik\n    const response = await api.post('/api/products/upload-v2', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n  // Get upload job status\n  getUploadJobStatus: async jobId => {\n    const response = await api.get(`/api/products/upload-status/${jobId}`);\n    return response.data;\n  },\n  // Get product images\n  getProductImages: async productId => {\n    const response = await api.get(`/api/products/${productId}/images`);\n    return response.data;\n  },\n  // Process product with AI\n  processProductAI: async productId => {\n    const response = await api.post(`/api/products/${productId}/process`);\n    return response.data;\n  },\n  // Get product templates\n  getProductTemplates: async productId => {\n    const response = await api.get(`/api/products/${productId}/templates`);\n    return response.data;\n  },\n  // Get or create smart collage (OPTIMIZED)\n  getSmartCollage: async (productId, forceRecreate = false) => {\n    const params = forceRecreate ? '?force_recreate=true' : '';\n    const response = await api.get(`/api/products/${productId}/collage-smart${params}`);\n    return response.data;\n  },\n  // Get collage queue status\n  getCollageQueueStatus: async () => {\n    const response = await api.get('/api/products/collage-queue/status');\n    return response.data;\n  },\n  // Generate product template\n  generateTemplate: async (productId, templateName) => {\n    const formData = new FormData();\n    formData.append('template_name', templateName);\n    const response = await api.post(`/api/products/${productId}/generate-template`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n  // Complete product info (for missing fields)\n  completeProductInfo: async (productId, completionData) => {\n    const response = await api.put(`/api/products/${productId}`, completionData);\n    return response.data;\n  },\n  // Complete multiple products info (bulk)\n  completeProductsBulk: async completionData => {\n    const response = await api.put('/api/products/complete-bulk', completionData);\n    return response.data;\n  },\n  // Update product\n  updateProduct: async (productId, updateData) => {\n    const response = await api.put(`/api/products/${productId}`, updateData);\n    return response.data;\n  },\n  // Get filter options\n  getFilterOptions: async () => {\n    const response = await api.get('/api/products/filter-options');\n    return response.data;\n  }\n};","map":{"version":3,"names":["api","productsAPI","getProducts","page","per_page","brand_id","search","filters","params","URLSearchParams","toString","append","product_type","color","size_range","price_min","price_max","incomplete","undefined","has_second_product","url","response","get","data","getProduct","productId","uploadProductImages","files","formData","FormData","forEach","file","post","headers","getUploadJobStatus","jobId","getProductImages","processProductAI","getProductTemplates","getSmartCollage","forceRecreate","getCollageQueueStatus","generateTemplate","templateName","completeProductInfo","completionData","put","completeProductsBulk","updateProduct","updateData","getFilterOptions"],"sources":["C:/Users/ilker/Desktop/aibrands/frontend/src/api/products.ts"],"sourcesContent":["import api from '../utils/api';\r\n\r\nexport interface Product {\r\n  id: number;\r\n  name: string;\r\n  code: string;\r\n  color: string;\r\n  product_type?: string;\r\n  size_range?: string;\r\n  price?: number;\r\n  currency: string;\r\n  // İkinci ürün bilgileri (eğer görselde 2 etiket varsa)\r\n  has_second_product?: boolean;\r\n  code_2?: string;\r\n  color_2?: string;\r\n  product_type_2?: string;\r\n  size_range_2?: string;\r\n  price_2?: number;\r\n  currency_2?: string;\r\n  brand_id: number;\r\n  brand_name?: string;\r\n  brand?: {\r\n    id: number;\r\n    name: string;\r\n  };\r\n  ai_extracted_data?: any;\r\n  is_active: boolean;\r\n  is_processed: boolean;\r\n  created_at: string;\r\n  updated_at: string;\r\n  images?: ProductImage[];\r\n  templates?: ProductTemplate[];\r\n}\r\n\r\nexport interface ProductImage {\r\n  id: number;\r\n  product_id: number;\r\n  filename: string;\r\n  original_filename: string;\r\n  file_path: string;\r\n  file_size?: number;\r\n  mime_type?: string;\r\n  image_type: string;\r\n  angle?: string;\r\n  angle_number?: number;\r\n  is_cover_image: boolean;\r\n  ai_analysis?: any;\r\n  is_active: boolean;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface ProductTemplate {\r\n  id: number;\r\n  product_id: number;\r\n  name: string;\r\n  template_type: string;\r\n  template_data: any;\r\n  generated_image_path?: string;\r\n  is_active: boolean;\r\n  is_default: boolean;\r\n  brand_id: number;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface ProductListResponse {\r\n  products: Product[];\r\n  total: number;\r\n  page: number;\r\n  per_page: number;\r\n  total_pages: number;\r\n}\r\n\r\nexport interface IncompleteProduct {\r\n  product_id: number;\r\n  code: string;\r\n  color: string;\r\n  missing_fields: string[];\r\n}\r\n\r\nexport interface ProductUploadResponse {\r\n  success: boolean;\r\n  message: string;\r\n  uploaded_files: number;\r\n  products_created: number;\r\n  incomplete_products: IncompleteProduct[];\r\n  products: Product[];\r\n  job_id?: number; // Optional job ID for background processing\r\n}\r\n\r\nexport interface ProductFilters {\r\n  product_type?: string;\r\n  color?: string;\r\n  size_range?: string;\r\n  price_min?: string;\r\n  price_max?: string;\r\n  incomplete?: boolean;\r\n  has_second_product?: boolean;\r\n}\r\n\r\nexport const productsAPI = {\r\n  // Get products list\r\n  getProducts: async (\r\n    page: number = 1,\r\n    per_page: number = 20,\r\n    brand_id?: number,\r\n    search?: string,\r\n    filters?: ProductFilters\r\n  ): Promise<ProductListResponse> => {\r\n    const params = new URLSearchParams({\r\n      page: page.toString(),\r\n      per_page: per_page.toString(),\r\n    });\r\n\r\n    if (brand_id) params.append('brand_id', brand_id.toString());\r\n    if (search) params.append('search', search);\r\n    \r\n    // Add filters\r\n    if (filters) {\r\n      if (filters.product_type) params.append('product_type', filters.product_type);\r\n      if (filters.color) params.append('color', filters.color);\r\n      if (filters.size_range) params.append('size_range', filters.size_range);\r\n      if (filters.price_min) params.append('price_min', filters.price_min);\r\n      if (filters.price_max) params.append('price_max', filters.price_max);\r\n      if (filters.incomplete !== undefined) params.append('incomplete', filters.incomplete.toString());\r\n      if (filters.has_second_product !== undefined) params.append('has_second_product', filters.has_second_product.toString());\r\n    }\r\n\r\n    const url = `/api/products?${params.toString()}`;\r\n    const response = await api.get(url);\r\n    return response.data;\r\n  },\r\n\r\n  // Get single product\r\n  getProduct: async (productId: number): Promise<Product> => {\r\n    const response = await api.get(`/api/products/${productId}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Upload product images (V2 - Enterprise) - Otomatik marka tespiti\r\n  uploadProductImages: async (\r\n    files: File[]\r\n  ): Promise<ProductUploadResponse> => {\r\n    const formData = new FormData();\r\n    \r\n    files.forEach(file => {\r\n      formData.append('files', file);\r\n    });\r\n\r\n    // FINAL: En temiz ve hızlı upload endpoint - marka tespiti otomatik\r\n    const response = await api.post('/api/products/upload-v2', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    return response.data;\r\n  },\r\n  \r\n  // Get upload job status\r\n  getUploadJobStatus: async (jobId: number): Promise<any> => {\r\n    const response = await api.get(`/api/products/upload-status/${jobId}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get product images\r\n  getProductImages: async (productId: number): Promise<ProductImage[]> => {\r\n    const response = await api.get(`/api/products/${productId}/images`);\r\n    return response.data;\r\n  },\r\n\r\n  // Process product with AI\r\n  processProductAI: async (productId: number): Promise<{ success: boolean; message: string }> => {\r\n    const response = await api.post(`/api/products/${productId}/process`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get product templates\r\n  getProductTemplates: async (productId: number): Promise<ProductTemplate[]> => {\r\n    const response = await api.get(`/api/products/${productId}/templates`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get or create smart collage (OPTIMIZED)\r\n  getSmartCollage: async (productId: number, forceRecreate: boolean = false): Promise<{\r\n    success: boolean;\r\n    collage_url?: string;\r\n    method?: string;\r\n    cached?: boolean;\r\n    message?: string;\r\n  }> => {\r\n    const params = forceRecreate ? '?force_recreate=true' : '';\r\n    const response = await api.get(`/api/products/${productId}/collage-smart${params}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get collage queue status\r\n  getCollageQueueStatus: async (): Promise<{\r\n    success: boolean;\r\n    queue_status?: {\r\n      queue_size: number;\r\n      processing_count: number;\r\n      cache_size: number;\r\n      queue_items: Array<{\r\n        product_id: number;\r\n        priority: string;\r\n        scheduled_at: string;\r\n        attempts: number;\r\n      }>;\r\n    };\r\n  }> => {\r\n    const response = await api.get('/api/products/collage-queue/status');\r\n    return response.data;\r\n  },\r\n\r\n  // Generate product template\r\n  generateTemplate: async (\r\n    productId: number,\r\n    templateName: string\r\n  ): Promise<{ success: boolean; message: string }> => {\r\n    const formData = new FormData();\r\n    formData.append('template_name', templateName);\r\n\r\n    const response = await api.post(`/api/products/${productId}/generate-template`, formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Complete product info (for missing fields)\r\n  completeProductInfo: async (\r\n    productId: number,\r\n    completionData: {\r\n      color?: string;\r\n      product_type?: string;\r\n      size_range?: string;\r\n      price?: number;\r\n    }\r\n  ): Promise<{ success: boolean; message: string; product: Product }> => {\r\n    const response = await api.put(`/api/products/${productId}`, completionData);\r\n    return response.data;\r\n  },\r\n\r\n  // Complete multiple products info (bulk)\r\n  completeProductsBulk: async (\r\n    completionData: Array<{\r\n      product_id: number;\r\n      product_type?: string;\r\n      size_range?: string;\r\n      price?: number;\r\n    }>\r\n  ): Promise<{ success: boolean; message: string; updated_count: number }> => {\r\n    const response = await api.put('/api/products/complete-bulk', completionData);\r\n    return response.data;\r\n  },\r\n\r\n  // Update product\r\n  updateProduct: async (\r\n    productId: number,\r\n    updateData: {\r\n      color?: string;\r\n      product_type?: string;\r\n      size_range?: string;\r\n      price?: number;\r\n      brand_id?: number;\r\n    }\r\n  ): Promise<{ success: boolean; message: string; product: Product }> => {\r\n    const response = await api.put(`/api/products/${productId}`, updateData);\r\n    return response.data;\r\n  },\r\n\r\n  // Get filter options\r\n  getFilterOptions: async (): Promise<{\r\n    product_types: string[];\r\n    colors: string[];\r\n    size_ranges: string[];\r\n    brands: string[];\r\n  }> => {\r\n    const response = await api.get('/api/products/filter-options');\r\n    return response.data;\r\n  },\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}