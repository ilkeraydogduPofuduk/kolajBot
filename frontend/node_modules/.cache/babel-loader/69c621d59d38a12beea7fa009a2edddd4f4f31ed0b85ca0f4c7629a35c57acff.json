{"ast":null,"code":"var _s = $RefreshSig$();\n/**\r\n * usePageTexts Hook\r\n * Sayfa metinlerini yöneten hook\r\n */\n\nimport { useState, useEffect, useCallback } from 'react';\nconst defaultTexts = {\n  // Common texts\n  'loading': 'Yükleniyor...',\n  'error': 'Hata oluştu',\n  'success': 'Başarılı',\n  'save': 'Kaydet',\n  'cancel': 'İptal',\n  'delete': 'Sil',\n  'edit': 'Düzenle',\n  'add': 'Ekle',\n  'search': 'Ara',\n  'filter': 'Filtrele',\n  'clear': 'Temizle',\n  // Employee management\n  'employees': 'Çalışanlar',\n  'addEmployee': 'Çalışan Ekle',\n  'editEmployee': 'Çalışan Düzenle',\n  'deleteEmployee': 'Çalışan Sil',\n  'employeeName': 'Çalışan Adı',\n  'employeeEmail': 'E-posta',\n  'employeePhone': 'Telefon',\n  'employeeRole': 'Rol',\n  'employeeStatus': 'Durum',\n  'active': 'Aktif',\n  'inactive': 'Pasif',\n  // Product management\n  'products': 'Ürünler',\n  'addProduct': 'Ürün Ekle',\n  'editProduct': 'Ürün Düzenle',\n  'deleteProduct': 'Ürün Sil',\n  'productName': 'Ürün Adı',\n  'productCode': 'Ürün Kodu',\n  'productPrice': 'Fiyat',\n  'productStock': 'Stok',\n  'productCategory': 'Kategori',\n  // Brand management\n  'brands': 'Markalar',\n  'addBrand': 'Marka Ekle',\n  'editBrand': 'Marka Düzenle',\n  'deleteBrand': 'Marka Sil',\n  'brandName': 'Marka Adı',\n  'brandDescription': 'Açıklama',\n  // Settings\n  'settings': 'Ayarlar',\n  'generalSettings': 'Genel Ayarlar',\n  'urlSettings': 'URL Ayarları',\n  'saveSettings': 'Ayarları Kaydet',\n  'resetSettings': 'Ayarları Sıfırla',\n  // Media gallery\n  'mediaGallery': 'Medya Galerisi',\n  'uploadImage': 'Resim Yükle',\n  'selectImage': 'Resim Seç',\n  'imagePreview': 'Resim Önizleme',\n  // Social media\n  'socialMedia': 'Sosyal Medya',\n  'channels': 'Kanallar',\n  'addChannel': 'Kanal Ekle',\n  'editChannel': 'Kanal Düzenle',\n  'deleteChannel': 'Kanal Sil',\n  'channelName': 'Kanal Adı',\n  'channelType': 'Kanal Türü',\n  'channelStatus': 'Durum',\n  // Employee requests\n  'employee_requests': 'Çalışan Talepleri',\n  'add_employee_request': 'Çalışan Talebi Oluştur',\n  // My employees\n  'my_employees': 'Çalışanlarım',\n  'my_employees_description': 'Markalarınıza bağlı çalışanları görüntüleyin ve yönetin',\n  // Request logs\n  'requestLogs': 'İstek Kayıtları',\n  'auditLogs': 'Denetim Kayıtları',\n  'logDetails': 'Kayıt Detayları',\n  'filterLogs': 'Kayıtları Filtrele',\n  'exportLogs': 'Kayıtları Dışa Aktar'\n};\nexport const usePageTexts = pageKey => {\n  _s();\n  const [texts, setTexts] = useState(defaultTexts);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    // Load page-specific texts if pageKey is provided\n    if (pageKey) {\n      loadPageTexts(pageKey);\n    }\n  }, [pageKey]);\n  const loadPageTexts = async page => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // In a real app, this would fetch from an API\n      // For now, we'll use the default texts\n      const pageTexts = getPageSpecificTexts(page);\n      setTexts(prevTexts => ({\n        ...prevTexts,\n        ...pageTexts\n      }));\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to load texts');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const getPageSpecificTexts = page => {\n    const pageTexts = {\n      'employees': {\n        'pageTitle': 'Çalışan Yönetimi',\n        'pageDescription': 'Çalışanları yönetin ve düzenleyin',\n        'noEmployees': 'Henüz çalışan bulunmuyor',\n        'addNewEmployee': 'Yeni Çalışan Ekle'\n      },\n      'products': {\n        'pageTitle': 'Ürün Yönetimi',\n        'pageDescription': 'Ürünleri yönetin ve düzenleyin',\n        'noProducts': 'Henüz ürün bulunmuyor',\n        'addNewProduct': 'Yeni Ürün Ekle'\n      },\n      'brands': {\n        'pageTitle': 'Marka Yönetimi',\n        'pageDescription': 'Markaları yönetin ve düzenleyin',\n        'noBrands': 'Henüz marka bulunmuyor',\n        'addNewBrand': 'Yeni Marka Ekle'\n      },\n      'settings': {\n        'pageTitle': 'Sistem Ayarları',\n        'pageDescription': 'Sistem ayarlarını yönetin',\n        'saveSuccess': 'Ayarlar başarıyla kaydedildi',\n        'saveError': 'Ayarlar kaydedilirken hata oluştu'\n      },\n      'media': {\n        'pageTitle': 'Medya Galerisi',\n        'pageDescription': 'Medya dosyalarını yönetin',\n        'noMedia': 'Henüz medya dosyası bulunmuyor',\n        'uploadNewMedia': 'Yeni Medya Yükle'\n      },\n      'socialMedia': {\n        'pageTitle': 'Sosyal Medya Kanalları',\n        'pageDescription': 'Sosyal medya kanallarını yönetin',\n        'noChannels': 'Henüz kanal bulunmuyor',\n        'addNewChannel': 'Yeni Kanal Ekle'\n      },\n      'logs': {\n        'pageTitle': 'Sistem Kayıtları',\n        'pageDescription': 'Sistem kayıtlarını görüntüleyin',\n        'noLogs': 'Henüz kayıt bulunmuyor',\n        'exportSuccess': 'Kayıtlar başarıyla dışa aktarıldı'\n      }\n    };\n    return pageTexts[page] || {};\n  };\n  const getText = (key, fallback) => {\n    return texts[key] || fallback || key;\n  };\n  const updateText = (key, value) => {\n    setTexts(prevTexts => ({\n      ...prevTexts,\n      [key]: value\n    }));\n  };\n  const updateTexts = newTexts => {\n    setTexts(prevTexts => ({\n      ...prevTexts,\n      ...newTexts\n    }));\n  };\n  const resetTexts = () => {\n    setTexts(defaultTexts);\n  };\n  const getTitle = useCallback((key = 'title', fallback) => {\n    return getText(key, fallback);\n  }, [getText]);\n  const getDescription = useCallback((key = 'description', fallback) => {\n    return getText(key, fallback);\n  }, [getText]);\n  const getButtonText = useCallback((key = 'button', fallback) => {\n    return getText(key, fallback);\n  }, [getText]);\n  const getStatusText = useCallback((key = 'status', fallback) => {\n    return getText(key, fallback);\n  }, [getText]);\n  return {\n    texts,\n    loading,\n    error,\n    getText,\n    getTitle,\n    getDescription,\n    getButtonText,\n    getStatusText,\n    updateText,\n    updateTexts,\n    resetTexts,\n    loadPageTexts\n  };\n};\n_s(usePageTexts, \"ighiJCqcWtwI4piNcjgL0LhIMUw=\");","map":{"version":3,"names":["useState","useEffect","useCallback","defaultTexts","usePageTexts","pageKey","_s","texts","setTexts","loading","setLoading","error","setError","loadPageTexts","page","pageTexts","getPageSpecificTexts","prevTexts","err","Error","message","getText","key","fallback","updateText","value","updateTexts","newTexts","resetTexts","getTitle","getDescription","getButtonText","getStatusText"],"sources":["C:/Users/ilker/Desktop/aibrands/frontend/src/hooks/usePageTexts.ts"],"sourcesContent":["/**\r\n * usePageTexts Hook\r\n * Sayfa metinlerini yöneten hook\r\n */\r\n\r\nimport { useState, useEffect, useCallback } from 'react';\r\n\r\ninterface PageTexts {\r\n  [key: string]: string;\r\n}\r\n\r\nconst defaultTexts: PageTexts = {\r\n  // Common texts\r\n  'loading': 'Yükleniyor...',\r\n  'error': 'Hata oluştu',\r\n  'success': 'Başarılı',\r\n  'save': 'Kaydet',\r\n  'cancel': 'İptal',\r\n  'delete': 'Sil',\r\n  'edit': 'Düzenle',\r\n  'add': 'Ekle',\r\n  'search': 'Ara',\r\n  'filter': 'Filtrele',\r\n  'clear': 'Temizle',\r\n  \r\n  // Employee management\r\n  'employees': 'Çalışanlar',\r\n  'addEmployee': 'Çalışan Ekle',\r\n  'editEmployee': 'Çalışan Düzenle',\r\n  'deleteEmployee': 'Çalışan Sil',\r\n  'employeeName': 'Çalışan Adı',\r\n  'employeeEmail': 'E-posta',\r\n  'employeePhone': 'Telefon',\r\n  'employeeRole': 'Rol',\r\n  'employeeStatus': 'Durum',\r\n  'active': 'Aktif',\r\n  'inactive': 'Pasif',\r\n  \r\n  // Product management\r\n  'products': 'Ürünler',\r\n  'addProduct': 'Ürün Ekle',\r\n  'editProduct': 'Ürün Düzenle',\r\n  'deleteProduct': 'Ürün Sil',\r\n  'productName': 'Ürün Adı',\r\n  'productCode': 'Ürün Kodu',\r\n  'productPrice': 'Fiyat',\r\n  'productStock': 'Stok',\r\n  'productCategory': 'Kategori',\r\n  \r\n  // Brand management\r\n  'brands': 'Markalar',\r\n  'addBrand': 'Marka Ekle',\r\n  'editBrand': 'Marka Düzenle',\r\n  'deleteBrand': 'Marka Sil',\r\n  'brandName': 'Marka Adı',\r\n  'brandDescription': 'Açıklama',\r\n  \r\n  // Settings\r\n  'settings': 'Ayarlar',\r\n  'generalSettings': 'Genel Ayarlar',\r\n  'urlSettings': 'URL Ayarları',\r\n  'saveSettings': 'Ayarları Kaydet',\r\n  'resetSettings': 'Ayarları Sıfırla',\r\n  \r\n  // Media gallery\r\n  'mediaGallery': 'Medya Galerisi',\r\n  'uploadImage': 'Resim Yükle',\r\n  'selectImage': 'Resim Seç',\r\n  'imagePreview': 'Resim Önizleme',\r\n  \r\n  // Social media\r\n  'socialMedia': 'Sosyal Medya',\r\n  'channels': 'Kanallar',\r\n  'addChannel': 'Kanal Ekle',\r\n  'editChannel': 'Kanal Düzenle',\r\n  'deleteChannel': 'Kanal Sil',\r\n  'channelName': 'Kanal Adı',\r\n  'channelType': 'Kanal Türü',\r\n  'channelStatus': 'Durum',\r\n  \r\n  // Employee requests\r\n  'employee_requests': 'Çalışan Talepleri',\r\n  'add_employee_request': 'Çalışan Talebi Oluştur',\r\n  \r\n  // My employees\r\n  'my_employees': 'Çalışanlarım',\r\n  'my_employees_description': 'Markalarınıza bağlı çalışanları görüntüleyin ve yönetin',\r\n  \r\n  // Request logs\r\n  'requestLogs': 'İstek Kayıtları',\r\n  'auditLogs': 'Denetim Kayıtları',\r\n  'logDetails': 'Kayıt Detayları',\r\n  'filterLogs': 'Kayıtları Filtrele',\r\n  'exportLogs': 'Kayıtları Dışa Aktar'\r\n};\r\n\r\nexport const usePageTexts = (pageKey?: string) => {\r\n  const [texts, setTexts] = useState<PageTexts>(defaultTexts);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    // Load page-specific texts if pageKey is provided\r\n    if (pageKey) {\r\n      loadPageTexts(pageKey);\r\n    }\r\n  }, [pageKey]);\r\n\r\n  const loadPageTexts = async (page: string) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      // In a real app, this would fetch from an API\r\n      // For now, we'll use the default texts\r\n      const pageTexts = getPageSpecificTexts(page);\r\n      setTexts(prevTexts => ({ ...prevTexts, ...pageTexts }));\r\n      \r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Failed to load texts');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getPageSpecificTexts = (page: string): PageTexts => {\r\n    const pageTexts: { [key: string]: PageTexts } = {\r\n      'employees': {\r\n        'pageTitle': 'Çalışan Yönetimi',\r\n        'pageDescription': 'Çalışanları yönetin ve düzenleyin',\r\n        'noEmployees': 'Henüz çalışan bulunmuyor',\r\n        'addNewEmployee': 'Yeni Çalışan Ekle'\r\n      },\r\n      'products': {\r\n        'pageTitle': 'Ürün Yönetimi',\r\n        'pageDescription': 'Ürünleri yönetin ve düzenleyin',\r\n        'noProducts': 'Henüz ürün bulunmuyor',\r\n        'addNewProduct': 'Yeni Ürün Ekle'\r\n      },\r\n      'brands': {\r\n        'pageTitle': 'Marka Yönetimi',\r\n        'pageDescription': 'Markaları yönetin ve düzenleyin',\r\n        'noBrands': 'Henüz marka bulunmuyor',\r\n        'addNewBrand': 'Yeni Marka Ekle'\r\n      },\r\n      'settings': {\r\n        'pageTitle': 'Sistem Ayarları',\r\n        'pageDescription': 'Sistem ayarlarını yönetin',\r\n        'saveSuccess': 'Ayarlar başarıyla kaydedildi',\r\n        'saveError': 'Ayarlar kaydedilirken hata oluştu'\r\n      },\r\n      'media': {\r\n        'pageTitle': 'Medya Galerisi',\r\n        'pageDescription': 'Medya dosyalarını yönetin',\r\n        'noMedia': 'Henüz medya dosyası bulunmuyor',\r\n        'uploadNewMedia': 'Yeni Medya Yükle'\r\n      },\r\n      'socialMedia': {\r\n        'pageTitle': 'Sosyal Medya Kanalları',\r\n        'pageDescription': 'Sosyal medya kanallarını yönetin',\r\n        'noChannels': 'Henüz kanal bulunmuyor',\r\n        'addNewChannel': 'Yeni Kanal Ekle'\r\n      },\r\n      'logs': {\r\n        'pageTitle': 'Sistem Kayıtları',\r\n        'pageDescription': 'Sistem kayıtlarını görüntüleyin',\r\n        'noLogs': 'Henüz kayıt bulunmuyor',\r\n        'exportSuccess': 'Kayıtlar başarıyla dışa aktarıldı'\r\n      }\r\n    };\r\n\r\n    return pageTexts[page] || {};\r\n  };\r\n\r\n  const getText = (key: string, fallback?: string): string => {\r\n    return texts[key] || fallback || key;\r\n  };\r\n\r\n  const updateText = (key: string, value: string) => {\r\n    setTexts(prevTexts => ({ ...prevTexts, [key]: value }));\r\n  };\r\n\r\n  const updateTexts = (newTexts: PageTexts) => {\r\n    setTexts(prevTexts => ({ ...prevTexts, ...newTexts }));\r\n  };\r\n\r\n  const resetTexts = () => {\r\n    setTexts(defaultTexts);\r\n  };\r\n\r\n  const getTitle = useCallback((key: string = 'title', fallback?: string) => {\r\n    return getText(key, fallback);\r\n  }, [getText]);\r\n\r\n  const getDescription = useCallback((key: string = 'description', fallback?: string) => {\r\n    return getText(key, fallback);\r\n  }, [getText]);\r\n\r\n  const getButtonText = useCallback((key: string = 'button', fallback?: string) => {\r\n    return getText(key, fallback);\r\n  }, [getText]);\r\n\r\n  const getStatusText = useCallback((key: string = 'status', fallback?: string) => {\r\n    return getText(key, fallback);\r\n  }, [getText]);\r\n\r\n  return {\r\n    texts,\r\n    loading,\r\n    error,\r\n    getText,\r\n    getTitle,\r\n    getDescription,\r\n    getButtonText,\r\n    getStatusText,\r\n    updateText,\r\n    updateTexts,\r\n    resetTexts,\r\n    loadPageTexts\r\n  };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}