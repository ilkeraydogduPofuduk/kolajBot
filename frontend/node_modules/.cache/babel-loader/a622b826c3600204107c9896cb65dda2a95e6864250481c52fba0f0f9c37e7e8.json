{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ilker\\\\Desktop\\\\aibrands\\\\frontend\\\\src\\\\context\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { authAPI } from '../api/auth';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Check if user is logged in on app start\n  useEffect(() => {\n    const initAuth = async () => {\n      const token = localStorage.getItem('access_token');\n      if (token) {\n        try {\n          const userData = await authAPI.getCurrentUser();\n          setUser(userData);\n        } catch (error) {\n          // Token is invalid, clear it\n          localStorage.removeItem('access_token');\n          localStorage.removeItem('refresh_token');\n          setUser(null);\n        }\n      } else {\n        setUser(null);\n      }\n      setLoading(false);\n    };\n    initAuth();\n  }, []);\n  const login = async (email, password, twoFACode) => {\n    try {\n      setLoading(true);\n      const response = await authAPI.login({\n        email,\n        password,\n        two_fa_code: twoFACode\n      });\n\n      // Store tokens\n      localStorage.setItem('access_token', response.access_token);\n      localStorage.setItem('refresh_token', response.refresh_token);\n\n      // Set user data\n      setUser(response.user);\n      toast.success('Giriş başarılı!');\n      return {\n        success: true,\n        user: response.user\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      // Return error message to calling component\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || error.message || 'Giriş başarısız';\n      return {\n        success: false,\n        error: errorMessage\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = () => {\n    // Clear tokens and user data\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n    setUser(null);\n\n    // Call logout API (optional)\n    authAPI.logout().catch(() => {\n      // Ignore errors on logout\n    });\n    toast.success('Başarıyla çıkış yapıldı');\n  };\n  const refreshUser = async () => {\n    try {\n      const userData = await authAPI.getCurrentUser();\n      setUser(userData);\n    } catch (error) {\n      // If refresh fails, user might be logged out\n      logout();\n    }\n  };\n  const value = {\n    user,\n    loading,\n    login,\n    logout,\n    refreshUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","authAPI","toast","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","initAuth","token","localStorage","getItem","userData","getCurrentUser","error","removeItem","login","email","password","twoFACode","response","two_fa_code","setItem","access_token","refresh_token","success","_error$response","_error$response$data","errorMessage","data","detail","message","logout","catch","refreshUser","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ilker/Desktop/aibrands/frontend/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\nimport { authAPI, User } from '../api/auth';\nimport toast from 'react-hot-toast';\n\ninterface AuthContextType {\n  user: User | null;\n  loading: boolean;\n  login: (email: string, password: string, twoFACode?: string) => Promise<{success: boolean, error?: string, user?: User}>;\n  logout: () => void;\n  refreshUser: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  // Check if user is logged in on app start\n  useEffect(() => {\n    const initAuth = async () => {\n      const token = localStorage.getItem('access_token');\n      if (token) {\n        try {\n          const userData = await authAPI.getCurrentUser();\n          setUser(userData);\n        } catch (error: any) {\n          // Token is invalid, clear it\n          localStorage.removeItem('access_token');\n          localStorage.removeItem('refresh_token');\n          setUser(null);\n        }\n      } else {\n        setUser(null);\n      }\n      setLoading(false);\n    };\n\n    initAuth();\n  }, []);\n\n  const login = async (email: string, password: string, twoFACode?: string): Promise<{success: boolean, error?: string, user?: User}> => {\n    try {\n      setLoading(true);\n      const response = await authAPI.login({\n        email,\n        password,\n        two_fa_code: twoFACode,\n      });\n\n      // Store tokens\n      localStorage.setItem('access_token', response.access_token);\n      localStorage.setItem('refresh_token', response.refresh_token);\n\n      // Set user data\n      setUser(response.user);\n\n      toast.success('Giriş başarılı!');\n\n      return {\n        success: true,\n        user: response.user\n      };\n    } catch (error: any) {\n      // Return error message to calling component\n      const errorMessage = error.response?.data?.detail || error.message || 'Giriş başarısız';\n      return { success: false, error: errorMessage };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n\n  const logout = () => {\n    // Clear tokens and user data\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n    setUser(null);\n    \n    // Call logout API (optional)\n    authAPI.logout().catch(() => {\n      // Ignore errors on logout\n    });\n    \n    toast.success('Başarıyla çıkış yapıldı');\n  };\n\n  const refreshUser = async () => {\n    try {\n      const userData = await authAPI.getCurrentUser();\n      setUser(userData);\n    } catch (error: any) {\n      // If refresh fails, user might be logged out\n      logout();\n    }\n  };\n\n  const value: AuthContextType = {\n    user,\n    loading,\n    login,\n    logout,\n    refreshUser,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}