{"ast":null,"code":"import api from'../utils/api';export const authAPI={login:async data=>{const response=await api.post('/api/auth/login',data);return response.data;},refreshToken:async refreshToken=>{const response=await api.post('/api/auth/refresh',{refresh_token:refreshToken});return response.data;},logout:async()=>{const response=await api.post('/api/auth/logout');return response.data;},getCurrentUser:async()=>{const response=await api.get('/api/auth/me');return response.data;},setup2FA:async()=>{const response=await api.post('/api/auth/setup-2fa');return response.data;},verify2FASetup:async code=>{const response=await api.post('/api/auth/verify-2fa',{code});return response.data;},disable2FA:async code=>{const response=await api.post('/api/auth/disable-2fa',{code});return response.data;},changePassword:async(oldPassword,newPassword)=>{const response=await api.post('/api/auth/change-password',{old_password:oldPassword,new_password:newPassword});return response.data;},forceChangePassword:async newPassword=>{const response=await api.post('/api/auth/force-change-password',{new_password:newPassword});return response.data;}};","map":{"version":3,"names":["api","authAPI","login","data","response","post","refreshToken","refresh_token","logout","getCurrentUser","get","setup2FA","verify2FASetup","code","disable2FA","changePassword","oldPassword","newPassword","old_password","new_password","forceChangePassword"],"sources":["C:/Users/ilker/Desktop/aibrands/frontend/src/api/auth.ts"],"sourcesContent":["import api from '../utils/api';\n\nexport interface LoginRequest {\n  email: string;\n  password: string;\n  two_fa_code?: string;\n}\n\n\nexport interface TokenResponse {\n  access_token: string;\n  refresh_token: string;\n  token_type: string;\n  expires_in: number;\n  user: User;\n}\n\nexport interface User {\n  id: number;\n  email: string;\n  first_name: string;\n  last_name: string;\n  phone_number?: string;\n  role: string;\n  brand_ids: number[];\n  is_active: boolean;\n  is_2fa_enabled: boolean;\n  must_change_password: boolean;\n  last_login: string | null;\n  created_at: string;\n  permissions: string[];\n}\n\nexport const authAPI = {\n  login: async (data: LoginRequest): Promise<TokenResponse> => {\n    const response = await api.post('/api/auth/login', data);\n    return response.data;\n  },\n\n\n  refreshToken: async (refreshToken: string): Promise<{ access_token: string; token_type: string; expires_in: number }> => {\n    const response = await api.post('/api/auth/refresh', { refresh_token: refreshToken });\n    return response.data;\n  },\n\n  logout: async (): Promise<{ message: string }> => {\n    const response = await api.post('/api/auth/logout');\n    return response.data;\n  },\n\n  getCurrentUser: async (): Promise<User> => {\n    const response = await api.get('/api/auth/me');\n    return response.data;\n  },\n\n\n  setup2FA: async (): Promise<{ qr_code_url: string; secret: string }> => {\n    const response = await api.post('/api/auth/setup-2fa');\n    return response.data;\n  },\n\n  verify2FASetup: async (code: string): Promise<{ message: string }> => {\n    const response = await api.post('/api/auth/verify-2fa', { code });\n    return response.data;\n  },\n\n  disable2FA: async (code: string): Promise<{ message: string }> => {\n    const response = await api.post('/api/auth/disable-2fa', { code });\n    return response.data;\n  },\n\n  changePassword: async (oldPassword: string | null, newPassword: string): Promise<{ message: string }> => {\n    const response = await api.post('/api/auth/change-password', {\n      old_password: oldPassword,\n      new_password: newPassword\n    });\n    return response.data;\n  },\n\n  forceChangePassword: async (newPassword: string): Promise<{ message: string }> => {\n    const response = await api.post('/api/auth/force-change-password', {\n      new_password: newPassword\n    });\n    return response.data;\n  },\n};\n"],"mappings":"AAAA,MAAO,CAAAA,GAAG,KAAM,cAAc,CAiC9B,MAAO,MAAM,CAAAC,OAAO,CAAG,CACrBC,KAAK,CAAE,KAAO,CAAAC,IAAkB,EAA6B,CAC3D,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAJ,GAAG,CAACK,IAAI,CAAC,iBAAiB,CAAEF,IAAI,CAAC,CACxD,MAAO,CAAAC,QAAQ,CAACD,IAAI,CACtB,CAAC,CAGDG,YAAY,CAAE,KAAO,CAAAA,YAAoB,EAAgF,CACvH,KAAM,CAAAF,QAAQ,CAAG,KAAM,CAAAJ,GAAG,CAACK,IAAI,CAAC,mBAAmB,CAAE,CAAEE,aAAa,CAAED,YAAa,CAAC,CAAC,CACrF,MAAO,CAAAF,QAAQ,CAACD,IAAI,CACtB,CAAC,CAEDK,MAAM,CAAE,KAAAA,CAAA,GAA0C,CAChD,KAAM,CAAAJ,QAAQ,CAAG,KAAM,CAAAJ,GAAG,CAACK,IAAI,CAAC,kBAAkB,CAAC,CACnD,MAAO,CAAAD,QAAQ,CAACD,IAAI,CACtB,CAAC,CAEDM,cAAc,CAAE,KAAAA,CAAA,GAA2B,CACzC,KAAM,CAAAL,QAAQ,CAAG,KAAM,CAAAJ,GAAG,CAACU,GAAG,CAAC,cAAc,CAAC,CAC9C,MAAO,CAAAN,QAAQ,CAACD,IAAI,CACtB,CAAC,CAGDQ,QAAQ,CAAE,KAAAA,CAAA,GAA8D,CACtE,KAAM,CAAAP,QAAQ,CAAG,KAAM,CAAAJ,GAAG,CAACK,IAAI,CAAC,qBAAqB,CAAC,CACtD,MAAO,CAAAD,QAAQ,CAACD,IAAI,CACtB,CAAC,CAEDS,cAAc,CAAE,KAAO,CAAAC,IAAY,EAAmC,CACpE,KAAM,CAAAT,QAAQ,CAAG,KAAM,CAAAJ,GAAG,CAACK,IAAI,CAAC,sBAAsB,CAAE,CAAEQ,IAAK,CAAC,CAAC,CACjE,MAAO,CAAAT,QAAQ,CAACD,IAAI,CACtB,CAAC,CAEDW,UAAU,CAAE,KAAO,CAAAD,IAAY,EAAmC,CAChE,KAAM,CAAAT,QAAQ,CAAG,KAAM,CAAAJ,GAAG,CAACK,IAAI,CAAC,uBAAuB,CAAE,CAAEQ,IAAK,CAAC,CAAC,CAClE,MAAO,CAAAT,QAAQ,CAACD,IAAI,CACtB,CAAC,CAEDY,cAAc,CAAE,KAAAA,CAAOC,WAA0B,CAAEC,WAAmB,GAAmC,CACvG,KAAM,CAAAb,QAAQ,CAAG,KAAM,CAAAJ,GAAG,CAACK,IAAI,CAAC,2BAA2B,CAAE,CAC3Da,YAAY,CAAEF,WAAW,CACzBG,YAAY,CAAEF,WAChB,CAAC,CAAC,CACF,MAAO,CAAAb,QAAQ,CAACD,IAAI,CACtB,CAAC,CAEDiB,mBAAmB,CAAE,KAAO,CAAAH,WAAmB,EAAmC,CAChF,KAAM,CAAAb,QAAQ,CAAG,KAAM,CAAAJ,GAAG,CAACK,IAAI,CAAC,iCAAiC,CAAE,CACjEc,YAAY,CAAEF,WAChB,CAAC,CAAC,CACF,MAAO,CAAAb,QAAQ,CAACD,IAAI,CACtB,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}