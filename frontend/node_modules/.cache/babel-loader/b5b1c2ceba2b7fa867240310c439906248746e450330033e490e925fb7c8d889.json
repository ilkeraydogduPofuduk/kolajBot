{"ast":null,"code":"/**\r\n * API Utility Functions\r\n * Centralized API client for frontend\r\n */\n\nimport axios from 'axios';\nimport { configManager } from '../core/config';\nimport { showApiErrorOverlay, hideApiErrorOverlay } from './apiErrorOverlay';\nclass APIClient {\n  constructor() {\n    this.instance = void 0;\n    const config = configManager.getConfig();\n    this.instance = axios.create({\n      baseURL: config.app.backendUrl,\n      timeout: 30000,\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    });\n    this.setupInterceptors();\n  }\n  setupInterceptors() {\n    // Request interceptor\n    this.instance.interceptors.request.use(config => {\n      const token = localStorage.getItem('access_token');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    }, error => {\n      return Promise.reject(error);\n    });\n\n    // Response interceptor with token refresh\n    this.instance.interceptors.response.use(response => {\n      hideApiErrorOverlay();\n      return response;\n    }, async error => {\n      var _error$response, _error$response2, _error$response3;\n      const originalRequest = error.config;\n\n      // Token refresh logic\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n        originalRequest._retry = true;\n        try {\n          const refreshToken = localStorage.getItem('refresh_token');\n          if (refreshToken) {\n            // Refresh token\n            const response = await axios.post(`${this.instance.defaults.baseURL}/api/auth/refresh`, {\n              refresh_token: refreshToken\n            });\n            const newAccessToken = response.data.access_token;\n            localStorage.setItem('access_token', newAccessToken);\n\n            // Retry original request with new token\n            originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\n            return this.instance(originalRequest);\n          }\n        } catch (refreshError) {\n          // Refresh failed, logout\n          localStorage.removeItem('access_token');\n          localStorage.removeItem('refresh_token');\n          window.location.href = '/login';\n          return Promise.reject(refreshError);\n        }\n      }\n\n      // Original 401 handling (if no refresh token)\n      if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 401) {\n        localStorage.removeItem('access_token');\n        localStorage.removeItem('refresh_token');\n        window.location.href = '/login';\n      }\n      if ((_error$response3 = error.response) !== null && _error$response3 !== void 0 && _error$response3.status && error.response.status >= 500) {\n        var _error$response$data;\n        const detail = (_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail;\n        const message = typeof detail === 'string' && detail.trim().length > 0 ? detail : 'Sunucu beklenmedik bir hata döndürdü. Lütfen sistem yöneticinize haber verin.';\n        showApiErrorOverlay(message, () => window.location.reload());\n      }\n      return Promise.reject(error);\n    });\n  }\n  async get(url, config) {\n    return this.instance.get(url, config);\n  }\n  async post(url, data, config) {\n    return this.instance.post(url, data, config);\n  }\n  async put(url, data, config) {\n    return this.instance.put(url, data, config);\n  }\n  async delete(url, config) {\n    return this.instance.delete(url, config);\n  }\n  async patch(url, data, config) {\n    return this.instance.patch(url, data, config);\n  }\n}\nexport default new APIClient();","map":{"version":3,"names":["axios","configManager","showApiErrorOverlay","hideApiErrorOverlay","APIClient","constructor","instance","config","getConfig","create","baseURL","app","backendUrl","timeout","headers","setupInterceptors","interceptors","request","use","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","_error$response2","_error$response3","originalRequest","status","_retry","refreshToken","post","defaults","refresh_token","newAccessToken","data","access_token","setItem","refreshError","removeItem","window","location","href","_error$response$data","detail","message","trim","length","reload","get","url","put","delete","patch"],"sources":["C:/Users/ilker/Desktop/aibrands/frontend/src/utils/api.ts"],"sourcesContent":["/**\r\n * API Utility Functions\r\n * Centralized API client for frontend\r\n */\r\n\r\nimport axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';\nimport { configManager } from '../core/config';\nimport { showApiErrorOverlay, hideApiErrorOverlay } from './apiErrorOverlay';\n\r\nclass APIClient {\r\n  private instance: AxiosInstance;\r\n\r\n  constructor() {\r\n    const config = configManager.getConfig();\r\n    \r\n    this.instance = axios.create({\r\n      baseURL: config.app.backendUrl,\r\n      timeout: 30000,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json',\r\n      },\r\n    });\r\n\r\n    this.setupInterceptors();\r\n  }\r\n\r\n  private setupInterceptors(): void {\r\n    // Request interceptor\r\n    this.instance.interceptors.request.use(\r\n      (config) => {\r\n        const token = localStorage.getItem('access_token');\r\n        if (token) {\r\n          config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n        return config;\r\n      },\r\n      (error) => {\r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n\r\n    // Response interceptor with token refresh\n    this.instance.interceptors.response.use(\n      (response) => {\n        hideApiErrorOverlay();\n        return response;\n      },\n      async (error) => {\n        const originalRequest = error.config;\n        \n        // Token refresh logic\n        if (error.response?.status === 401 && !originalRequest._retry) {\n          originalRequest._retry = true;\n          \n          try {\n            const refreshToken = localStorage.getItem('refresh_token');\n            if (refreshToken) {\n              // Refresh token\n              const response = await axios.post(`${this.instance.defaults.baseURL}/api/auth/refresh`, {\n                refresh_token: refreshToken\n              });\n              \n              const newAccessToken = response.data.access_token;\n              localStorage.setItem('access_token', newAccessToken);\n              \n              // Retry original request with new token\n              originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\n              return this.instance(originalRequest);\n            }\n          } catch (refreshError) {\n            // Refresh failed, logout\n            localStorage.removeItem('access_token');\n            localStorage.removeItem('refresh_token');\n            window.location.href = '/login';\n            return Promise.reject(refreshError);\n          }\n        }\n        \n        // Original 401 handling (if no refresh token)\n        if (error.response?.status === 401) {\n          localStorage.removeItem('access_token');\n          localStorage.removeItem('refresh_token');\n          window.location.href = '/login';\n        }\n\n        if (error.response?.status && error.response.status >= 500) {\n          const detail = error.response.data?.detail;\n          const message =\n            typeof detail === 'string' && detail.trim().length > 0\n              ? detail\n              : 'Sunucu beklenmedik bir hata döndürdü. Lütfen sistem yöneticinize haber verin.';\n\n          showApiErrorOverlay(message, () => window.location.reload());\n        }\n\n        return Promise.reject(error);\n      }\n    );\n  }\n\r\n  async get<T = any>(url: string, config?: AxiosRequestConfig): Promise<AxiosResponse<T>> {\r\n    return this.instance.get(url, config);\r\n  }\r\n\r\n  async post<T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<AxiosResponse<T>> {\r\n    return this.instance.post(url, data, config);\r\n  }\r\n\r\n  async put<T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<AxiosResponse<T>> {\r\n    return this.instance.put(url, data, config);\r\n  }\r\n\r\n  async delete<T = any>(url: string, config?: AxiosRequestConfig): Promise<AxiosResponse<T>> {\r\n    return this.instance.delete(url, config);\r\n  }\r\n\r\n  async patch<T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<AxiosResponse<T>> {\r\n    return this.instance.patch(url, data, config);\r\n  }\r\n}\r\n\r\nexport default new APIClient();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}