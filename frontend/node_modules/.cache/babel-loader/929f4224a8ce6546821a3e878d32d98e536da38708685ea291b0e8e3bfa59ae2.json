{"ast":null,"code":"import api from'../../utils/api';export const collagesAPI={// Get pending collages (products without collage or missing info)\ngetPendingCollages:async function(){let page=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;let perPage=arguments.length>1&&arguments[1]!==undefined?arguments[1]:20;let brandId=arguments.length>2?arguments[2]:undefined;let search=arguments.length>3?arguments[3]:undefined;let filterType=arguments.length>4?arguments[4]:undefined;const params=new URLSearchParams({page:page.toString(),per_page:perPage.toString()});if(brandId){params.append('brand_id',brandId.toString());}if(search){params.append('search',search);}if(filterType){params.append('filter_type',filterType);}const response=await api.get(\"/api/collages/pending?\".concat(params));return response.data;},// Update product info and create collage\ncompleteProductInfo:async(productId,data)=>{const response=await api.put(\"/api/collages/products/\".concat(productId,\"/complete\"),data);return response.data;},// Manually create collage for a product\ncreateCollageManually:async function(productId){let sendToTelegram=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;const response=await api.post(\"/api/collages/products/\".concat(productId,\"/create-collage\"),{send_to_telegram:sendToTelegram});return response.data;},// Get collage statistics\ngetStatistics:async()=>{const response=await api.get('/api/collages/statistics');return response.data;}};","map":{"version":3,"names":["api","collagesAPI","getPendingCollages","page","arguments","length","undefined","perPage","brandId","search","filterType","params","URLSearchParams","toString","per_page","append","response","get","concat","data","completeProductInfo","productId","put","createCollageManually","sendToTelegram","post","send_to_telegram","getStatistics"],"sources":["C:/Users/ilker/Desktop/aibrands/frontend/src/services/api/collages.ts"],"sourcesContent":["import api from '../../utils/api';\r\n\r\ninterface PendingCollagesResponse {\r\n  products: any[];\r\n  total: number;\r\n  page: number;\r\n  per_page: number;\r\n  total_pages: number;\r\n}\r\n\r\ninterface CompleteProductResponse {\r\n  message: string;\r\n  updated_fields: string[];\r\n  collage_created: boolean;\r\n}\r\n\r\ninterface CreateCollageResponse {\r\n  message: string;\r\n  collage_path: string | null;\r\n  sent_to_telegram: boolean;\r\n}\r\n\r\ninterface StatisticsResponse {\r\n  total_products: number;\r\n  products_with_collage: number;\r\n  products_missing_info: number;\r\n  products_ready_for_collage: number;\r\n  completion_rate: number;\r\n}\r\n\r\nexport const collagesAPI = {\r\n  // Get pending collages (products without collage or missing info)\r\n  getPendingCollages: async (\r\n    page: number = 1, \r\n    perPage: number = 20, \r\n    brandId?: number,\r\n    search?: string,\r\n    filterType?: string\r\n  ): Promise<PendingCollagesResponse> => {\r\n    const params = new URLSearchParams({\r\n      page: page.toString(),\r\n      per_page: perPage.toString(),\r\n    });\r\n    \r\n    if (brandId) {\r\n      params.append('brand_id', brandId.toString());\r\n    }\r\n    \r\n    if (search) {\r\n      params.append('search', search);\r\n    }\r\n    \r\n    if (filterType) {\r\n      params.append('filter_type', filterType);\r\n    }\r\n    \r\n    const response = await api.get(`/api/collages/pending?${params}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Update product info and create collage\r\n  completeProductInfo: async (productId: number, data: any): Promise<CompleteProductResponse> => {\r\n    const response = await api.put(`/api/collages/products/${productId}/complete`, data);\r\n    return response.data;\r\n  },\r\n\r\n  // Manually create collage for a product\r\n  createCollageManually: async (productId: number, sendToTelegram: boolean = true): Promise<CreateCollageResponse> => {\r\n    const response = await api.post(`/api/collages/products/${productId}/create-collage`, {\r\n      send_to_telegram: sendToTelegram\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Get collage statistics\r\n  getStatistics: async (): Promise<StatisticsResponse> => {\r\n    const response = await api.get('/api/collages/statistics');\r\n    return response.data;\r\n  }\r\n};\r\n"],"mappings":"AAAA,MAAO,CAAAA,GAAG,KAAM,iBAAiB,CA8BjC,MAAO,MAAM,CAAAC,WAAW,CAAG,CACzB;AACAC,kBAAkB,CAAE,cAAAA,CAAA,CAMmB,IALrC,CAAAC,IAAY,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,IAChB,CAAAG,OAAe,CAAAH,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,IACpB,CAAAI,OAAgB,CAAAJ,SAAA,CAAAC,MAAA,GAAAD,SAAA,IAAAE,SAAA,IAChB,CAAAG,MAAe,CAAAL,SAAA,CAAAC,MAAA,GAAAD,SAAA,IAAAE,SAAA,IACf,CAAAI,UAAmB,CAAAN,SAAA,CAAAC,MAAA,GAAAD,SAAA,IAAAE,SAAA,CAEnB,KAAM,CAAAK,MAAM,CAAG,GAAI,CAAAC,eAAe,CAAC,CACjCT,IAAI,CAAEA,IAAI,CAACU,QAAQ,CAAC,CAAC,CACrBC,QAAQ,CAAEP,OAAO,CAACM,QAAQ,CAAC,CAC7B,CAAC,CAAC,CAEF,GAAIL,OAAO,CAAE,CACXG,MAAM,CAACI,MAAM,CAAC,UAAU,CAAEP,OAAO,CAACK,QAAQ,CAAC,CAAC,CAAC,CAC/C,CAEA,GAAIJ,MAAM,CAAE,CACVE,MAAM,CAACI,MAAM,CAAC,QAAQ,CAAEN,MAAM,CAAC,CACjC,CAEA,GAAIC,UAAU,CAAE,CACdC,MAAM,CAACI,MAAM,CAAC,aAAa,CAAEL,UAAU,CAAC,CAC1C,CAEA,KAAM,CAAAM,QAAQ,CAAG,KAAM,CAAAhB,GAAG,CAACiB,GAAG,0BAAAC,MAAA,CAA0BP,MAAM,CAAE,CAAC,CACjE,MAAO,CAAAK,QAAQ,CAACG,IAAI,CACtB,CAAC,CAED;AACAC,mBAAmB,CAAE,KAAAA,CAAOC,SAAiB,CAAEF,IAAS,GAAuC,CAC7F,KAAM,CAAAH,QAAQ,CAAG,KAAM,CAAAhB,GAAG,CAACsB,GAAG,2BAAAJ,MAAA,CAA2BG,SAAS,cAAaF,IAAI,CAAC,CACpF,MAAO,CAAAH,QAAQ,CAACG,IAAI,CACtB,CAAC,CAED;AACAI,qBAAqB,CAAE,cAAAA,CAAOF,SAAiB,CAAqE,IAAnE,CAAAG,cAAuB,CAAApB,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAI,CAC7E,KAAM,CAAAY,QAAQ,CAAG,KAAM,CAAAhB,GAAG,CAACyB,IAAI,2BAAAP,MAAA,CAA2BG,SAAS,oBAAmB,CACpFK,gBAAgB,CAAEF,cACpB,CAAC,CAAC,CACF,MAAO,CAAAR,QAAQ,CAACG,IAAI,CACtB,CAAC,CAED;AACAQ,aAAa,CAAE,KAAAA,CAAA,GAAyC,CACtD,KAAM,CAAAX,QAAQ,CAAG,KAAM,CAAAhB,GAAG,CAACiB,GAAG,CAAC,0BAA0B,CAAC,CAC1D,MAAO,CAAAD,QAAQ,CAACG,IAAI,CACtB,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}