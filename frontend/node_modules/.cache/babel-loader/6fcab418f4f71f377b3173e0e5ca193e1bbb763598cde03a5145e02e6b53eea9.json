{"ast":null,"code":"/**\r\n * Merkezi Frontend Konfigürasyon Sistemi\r\n * Tüm frontend ayarları tek yerden yönetilir\r\n */\n\nclass ConfigManager {\n  constructor() {\n    this.config = void 0;\n    this.listeners = [];\n    this.config = this.loadConfig();\n    this.validateConfig();\n  }\n  loadConfig() {\n    return {\n      database: {\n        url: process.env.REACT_APP_DATABASE_URL || 'mysql+pymysql://root:@localhost:3306/aibrands',\n        poolSize: parseInt(process.env.REACT_APP_DB_POOL_SIZE || '20'),\n        maxOverflow: parseInt(process.env.REACT_APP_DB_MAX_OVERFLOW || '30'),\n        poolTimeout: parseInt(process.env.REACT_APP_DB_POOL_TIMEOUT || '30'),\n        poolRecycle: parseInt(process.env.REACT_APP_DB_POOL_RECYCLE || '3600'),\n        echo: process.env.REACT_APP_DB_ECHO === 'true'\n      },\n      security: {\n        secretKey: process.env.REACT_APP_SECRET_KEY || 'your-secret-key-change-in-production',\n        algorithm: process.env.REACT_APP_JWT_ALGORITHM || 'HS256',\n        accessTokenExpireMinutes: parseInt(process.env.REACT_APP_ACCESS_TOKEN_EXPIRE_MINUTES || '15'),\n        refreshTokenExpireDays: parseInt(process.env.REACT_APP_REFRESH_TOKEN_EXPIRE_DAYS || '7'),\n        bcryptRounds: parseInt(process.env.REACT_APP_BCRYPT_ROUNDS || '12'),\n        maxLoginAttempts: parseInt(process.env.REACT_APP_MAX_LOGIN_ATTEMPTS || '5'),\n        lockoutDurationMinutes: parseInt(process.env.REACT_APP_LOCKOUT_DURATION_MINUTES || '15')\n      },\n      cors: {\n        allowedOrigins: (process.env.REACT_APP_ALLOWED_ORIGINS || 'http://localhost:3000,http://localhost:3001,http://localhost:3002,http://localhost:3003').split(','),\n        allowedMethods: (process.env.REACT_APP_ALLOWED_METHODS || 'GET,POST,PUT,DELETE,OPTIONS').split(','),\n        allowedHeaders: (process.env.REACT_APP_ALLOWED_HEADERS || '*').split(',')\n      },\n      redis: {\n        url: process.env.REACT_APP_REDIS_URL || 'redis://localhost:6379',\n        enabled: process.env.REACT_APP_REDIS_ENABLED !== 'false',\n        timeout: parseInt(process.env.REACT_APP_REDIS_TIMEOUT || '5')\n      },\n      email: {\n        smtpServer: process.env.REACT_APP_SMTP_SERVER,\n        smtpPort: parseInt(process.env.REACT_APP_SMTP_PORT || '587'),\n        smtpUsername: process.env.REACT_APP_SMTP_USERNAME,\n        smtpPassword: process.env.REACT_APP_SMTP_PASSWORD,\n        fromEmail: process.env.REACT_APP_FROM_EMAIL || 'noreply@aibrands.com',\n        fromName: process.env.REACT_APP_FROM_NAME || 'AI Brands',\n        useSSL: process.env.REACT_APP_SMTP_USE_SSL === 'true',\n        useTLS: process.env.REACT_APP_SMTP_USE_TLS !== 'false'\n      },\n      ocr: {\n        googleAiApiKey: process.env.REACT_APP_GOOGLE_AI_API_KEY,\n        parallelWorkers: parseInt(process.env.REACT_APP_OCR_PARALLEL_WORKERS || '10'),\n        timeout: parseInt(process.env.REACT_APP_OCR_TIMEOUT || '30'),\n        retryCount: parseInt(process.env.REACT_APP_OCR_RETRY_COUNT || '3')\n      },\n      upload: {\n        maxFileCount: parseInt(process.env.REACT_APP_MAX_FILE_COUNT || '500'),\n        maxFileSizeMB: parseInt(process.env.REACT_APP_MAX_FILE_SIZE_MB || '10'),\n        allowedExtensions: (process.env.REACT_APP_ALLOWED_EXTENSIONS || 'jpg,jpeg,png,webp').split(','),\n        totalUploadSizeMB: parseInt(process.env.REACT_APP_TOTAL_UPLOAD_SIZE_MB || '500'),\n        storagePath: process.env.REACT_APP_STORAGE_PATH || 'uploads'\n      },\n      telegram: {\n        botToken: process.env.REACT_APP_TELEGRAM_BOT_TOKEN,\n        chatId: process.env.REACT_APP_TELEGRAM_CHAT_ID\n      },\n      app: {\n        name: process.env.REACT_APP_NAME || 'AI Brands',\n        version: process.env.REACT_APP_VERSION || '2.0.0',\n        description: process.env.REACT_APP_DESCRIPTION || 'AI Destekli Marka Yönetim Platformu',\n        author: process.env.REACT_APP_AUTHOR || 'AI Brands Team',\n        environment: process.env.REACT_APP_ENVIRONMENT || 'development',\n        debug: process.env.REACT_APP_DEBUG === 'true',\n        backendUrl: process.env.REACT_APP_API_URL || 'http://localhost:8000',\n        frontendUrl: process.env.REACT_APP_FRONTEND_URL || 'http://localhost:3000'\n      },\n      ui: {\n        theme: process.env.REACT_APP_THEME || 'light',\n        language: process.env.REACT_APP_LANGUAGE || 'tr',\n        dateFormat: process.env.REACT_APP_DATE_FORMAT || 'DD/MM/YYYY',\n        timeFormat: process.env.REACT_APP_TIME_FORMAT || 'HH:mm',\n        timezone: process.env.REACT_APP_TIMEZONE || 'Europe/Istanbul'\n      },\n      features: {\n        socialMedia: process.env.REACT_APP_FEATURE_SOCIAL_MEDIA !== 'false',\n        templates: process.env.REACT_APP_FEATURE_TEMPLATES !== 'false',\n        aiGeneration: process.env.REACT_APP_FEATURE_AI_GENERATION !== 'false',\n        multiLanguage: process.env.REACT_APP_FEATURE_MULTI_LANGUAGE === 'true',\n        analytics: process.env.REACT_APP_FEATURE_ANALYTICS !== 'false',\n        reporting: process.env.REACT_APP_FEATURE_REPORTING !== 'false',\n        monitoring: process.env.REACT_APP_FEATURE_MONITORING !== 'false'\n      },\n      cache: {\n        enabled: process.env.REACT_APP_CACHE_ENABLED !== 'false',\n        ttl: parseInt(process.env.REACT_APP_CACHE_TTL || '300'),\n        maxSize: parseInt(process.env.REACT_APP_CACHE_MAX_SIZE || '50'),\n        strategy: process.env.REACT_APP_CACHE_STRATEGY || 'lru'\n      },\n      pagination: {\n        defaultPageSize: parseInt(process.env.REACT_APP_DEFAULT_PAGE_SIZE || '20'),\n        pageSizeOptions: (process.env.REACT_APP_PAGE_SIZE_OPTIONS || '10,20,50,100').split(',').map(Number),\n        maxPageSize: parseInt(process.env.REACT_APP_MAX_PAGE_SIZE || '1000')\n      },\n      api: {\n        baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000',\n        timeout: parseInt(process.env.REACT_APP_API_TIMEOUT || '30000'),\n        retryAttempts: parseInt(process.env.REACT_APP_API_RETRY_ATTEMPTS || '3'),\n        retryDelay: parseInt(process.env.REACT_APP_API_RETRY_DELAY || '1000'),\n        maxConcurrentRequests: parseInt(process.env.REACT_APP_API_MAX_CONCURRENT || '10')\n      }\n    };\n  }\n  validateConfig() {\n    // Validate required fields\n    if (!this.config.app.name) {\n      throw new Error('App name is required');\n    }\n    if (!this.config.api.baseURL) {\n      throw new Error('API base URL is required');\n    }\n    if (!this.config.app.version) {\n      throw new Error('App version is required');\n    }\n\n    // Validate numeric fields\n    if (this.config.upload.maxFileSizeMB <= 0) {\n      throw new Error('Max file size must be positive');\n    }\n    if (this.config.upload.maxFileCount <= 0) {\n      throw new Error('Max file count must be positive');\n    }\n    if (this.config.pagination.defaultPageSize <= 0) {\n      throw new Error('Default page size must be positive');\n    }\n  }\n  getConfig() {\n    return {\n      ...this.config\n    };\n  }\n  get(key) {\n    return this.config[key];\n  }\n  updateConfig(updates) {\n    this.config = {\n      ...this.config,\n      ...updates\n    };\n    this.validateConfig();\n    this.notifyListeners();\n  }\n  subscribe(listener) {\n    this.listeners.push(listener);\n    return () => {\n      const index = this.listeners.indexOf(listener);\n      if (index > -1) {\n        this.listeners.splice(index, 1);\n      }\n    };\n  }\n  notifyListeners() {\n    this.listeners.forEach(listener => listener(this.config));\n  }\n  isProduction() {\n    return this.config.app.environment === 'production';\n  }\n  isDevelopment() {\n    return this.config.app.environment === 'development';\n  }\n  isStaging() {\n    return this.config.app.environment === 'staging';\n  }\n  getAppInfo() {\n    return {\n      name: this.config.app.name,\n      version: this.config.app.version,\n      description: this.config.app.description,\n      author: this.config.app.author,\n      environment: this.config.app.environment\n    };\n  }\n  getUploadLimits() {\n    return {\n      maxFileCount: this.config.upload.maxFileCount,\n      maxFileSizeMB: this.config.upload.maxFileSizeMB,\n      allowedExtensions: this.config.upload.allowedExtensions,\n      totalUploadSizeMB: this.config.upload.totalUploadSizeMB,\n      storagePath: this.config.upload.storagePath\n    };\n  }\n  getOCRConfig() {\n    return {\n      apiKey: this.config.ocr.googleAiApiKey,\n      parallelWorkers: this.config.ocr.parallelWorkers,\n      timeout: this.config.ocr.timeout,\n      retryCount: this.config.ocr.retryCount\n    };\n  }\n}\n\n// Singleton instance\nexport const configManager = new ConfigManager();\n\n// Export commonly used configs\nexport const databaseConfig = configManager.get('database');\nexport const securityConfig = configManager.get('security');\nexport const corsConfig = configManager.get('cors');\nexport const redisConfig = configManager.get('redis');\nexport const emailConfig = configManager.get('email');\nexport const ocrConfig = configManager.get('ocr');\nexport const uploadConfig = configManager.get('upload');\nexport const telegramConfig = configManager.get('telegram');\nexport const appConfig = configManager.get('app');\nexport const uiConfig = configManager.get('ui');\nexport const featuresConfig = configManager.get('features');\nexport const cacheConfig = configManager.get('cache');\nexport const paginationConfig = configManager.get('pagination');\nexport const apiConfig = configManager.get('api');\n\n// Export the main config\nexport const config = configManager.getConfig();\nexport default configManager;","map":{"version":3,"names":["ConfigManager","constructor","config","listeners","loadConfig","validateConfig","database","url","process","env","REACT_APP_DATABASE_URL","poolSize","parseInt","REACT_APP_DB_POOL_SIZE","maxOverflow","REACT_APP_DB_MAX_OVERFLOW","poolTimeout","REACT_APP_DB_POOL_TIMEOUT","poolRecycle","REACT_APP_DB_POOL_RECYCLE","echo","REACT_APP_DB_ECHO","security","secretKey","REACT_APP_SECRET_KEY","algorithm","REACT_APP_JWT_ALGORITHM","accessTokenExpireMinutes","REACT_APP_ACCESS_TOKEN_EXPIRE_MINUTES","refreshTokenExpireDays","REACT_APP_REFRESH_TOKEN_EXPIRE_DAYS","bcryptRounds","REACT_APP_BCRYPT_ROUNDS","maxLoginAttempts","REACT_APP_MAX_LOGIN_ATTEMPTS","lockoutDurationMinutes","REACT_APP_LOCKOUT_DURATION_MINUTES","cors","allowedOrigins","REACT_APP_ALLOWED_ORIGINS","split","allowedMethods","REACT_APP_ALLOWED_METHODS","allowedHeaders","REACT_APP_ALLOWED_HEADERS","redis","REACT_APP_REDIS_URL","enabled","REACT_APP_REDIS_ENABLED","timeout","REACT_APP_REDIS_TIMEOUT","email","smtpServer","REACT_APP_SMTP_SERVER","smtpPort","REACT_APP_SMTP_PORT","smtpUsername","REACT_APP_SMTP_USERNAME","smtpPassword","REACT_APP_SMTP_PASSWORD","fromEmail","REACT_APP_FROM_EMAIL","fromName","REACT_APP_FROM_NAME","useSSL","REACT_APP_SMTP_USE_SSL","useTLS","REACT_APP_SMTP_USE_TLS","ocr","googleAiApiKey","REACT_APP_GOOGLE_AI_API_KEY","parallelWorkers","REACT_APP_OCR_PARALLEL_WORKERS","REACT_APP_OCR_TIMEOUT","retryCount","REACT_APP_OCR_RETRY_COUNT","upload","maxFileCount","REACT_APP_MAX_FILE_COUNT","maxFileSizeMB","REACT_APP_MAX_FILE_SIZE_MB","allowedExtensions","REACT_APP_ALLOWED_EXTENSIONS","totalUploadSizeMB","REACT_APP_TOTAL_UPLOAD_SIZE_MB","storagePath","REACT_APP_STORAGE_PATH","telegram","botToken","REACT_APP_TELEGRAM_BOT_TOKEN","chatId","REACT_APP_TELEGRAM_CHAT_ID","app","name","REACT_APP_NAME","version","REACT_APP_VERSION","description","REACT_APP_DESCRIPTION","author","REACT_APP_AUTHOR","environment","REACT_APP_ENVIRONMENT","debug","REACT_APP_DEBUG","backendUrl","REACT_APP_API_URL","frontendUrl","REACT_APP_FRONTEND_URL","ui","theme","REACT_APP_THEME","language","REACT_APP_LANGUAGE","dateFormat","REACT_APP_DATE_FORMAT","timeFormat","REACT_APP_TIME_FORMAT","timezone","REACT_APP_TIMEZONE","features","socialMedia","REACT_APP_FEATURE_SOCIAL_MEDIA","templates","REACT_APP_FEATURE_TEMPLATES","aiGeneration","REACT_APP_FEATURE_AI_GENERATION","multiLanguage","REACT_APP_FEATURE_MULTI_LANGUAGE","analytics","REACT_APP_FEATURE_ANALYTICS","reporting","REACT_APP_FEATURE_REPORTING","monitoring","REACT_APP_FEATURE_MONITORING","cache","REACT_APP_CACHE_ENABLED","ttl","REACT_APP_CACHE_TTL","maxSize","REACT_APP_CACHE_MAX_SIZE","strategy","REACT_APP_CACHE_STRATEGY","pagination","defaultPageSize","REACT_APP_DEFAULT_PAGE_SIZE","pageSizeOptions","REACT_APP_PAGE_SIZE_OPTIONS","map","Number","maxPageSize","REACT_APP_MAX_PAGE_SIZE","api","baseURL","REACT_APP_API_TIMEOUT","retryAttempts","REACT_APP_API_RETRY_ATTEMPTS","retryDelay","REACT_APP_API_RETRY_DELAY","maxConcurrentRequests","REACT_APP_API_MAX_CONCURRENT","Error","getConfig","get","key","updateConfig","updates","notifyListeners","subscribe","listener","push","index","indexOf","splice","forEach","isProduction","isDevelopment","isStaging","getAppInfo","getUploadLimits","getOCRConfig","apiKey","configManager","databaseConfig","securityConfig","corsConfig","redisConfig","emailConfig","ocrConfig","uploadConfig","telegramConfig","appConfig","uiConfig","featuresConfig","cacheConfig","paginationConfig","apiConfig"],"sources":["C:/Users/ilker/Desktop/aibrands/frontend/src/core/config.ts"],"sourcesContent":["/**\r\n * Merkezi Frontend Konfigürasyon Sistemi\r\n * Tüm frontend ayarları tek yerden yönetilir\r\n */\r\n\r\nexport interface DatabaseConfig {\r\n  url: string;\r\n  poolSize: number;\r\n  maxOverflow: number;\r\n  poolTimeout: number;\r\n  poolRecycle: number;\r\n  echo: boolean;\r\n}\r\n\r\nexport interface SecurityConfig {\r\n  secretKey: string;\r\n  algorithm: string;\r\n  accessTokenExpireMinutes: number;\r\n  refreshTokenExpireDays: number;\r\n  bcryptRounds: number;\r\n  maxLoginAttempts: number;\r\n  lockoutDurationMinutes: number;\r\n}\r\n\r\nexport interface CORSConfig {\r\n  allowedOrigins: string[];\r\n  allowedMethods: string[];\r\n  allowedHeaders: string[];\r\n}\r\n\r\nexport interface RedisConfig {\r\n  url: string;\r\n  enabled: boolean;\r\n  timeout: number;\r\n}\r\n\r\nexport interface EmailConfig {\r\n  smtpServer?: string;\r\n  smtpPort: number;\r\n  smtpUsername?: string;\r\n  smtpPassword?: string;\r\n  fromEmail: string;\r\n  fromName: string;\r\n  useSSL: boolean;\r\n  useTLS: boolean;\r\n}\r\n\r\nexport interface OCRConfig {\r\n  googleAiApiKey?: string;\r\n  parallelWorkers: number;\r\n  timeout: number;\r\n  retryCount: number;\r\n}\r\n\r\nexport interface UploadConfig {\r\n  maxFileCount: number;\r\n  maxFileSizeMB: number;\r\n  allowedExtensions: string[];\r\n  totalUploadSizeMB: number;\r\n  storagePath: string;\r\n}\r\n\r\nexport interface TelegramConfig {\r\n  botToken?: string;\r\n  chatId?: string;\r\n}\r\n\r\nexport interface AppConfig {\r\n  name: string;\r\n  version: string;\r\n  description: string;\r\n  author: string;\r\n  environment: 'development' | 'staging' | 'production';\r\n  debug: boolean;\r\n  backendUrl: string;\r\n  frontendUrl: string;\r\n}\r\n\r\nexport interface UIConfig {\r\n  theme: 'light' | 'dark' | 'system';\r\n  language: string;\r\n  dateFormat: string;\r\n  timeFormat: string;\r\n  timezone: string;\r\n}\r\n\r\nexport interface FeatureConfig {\r\n  socialMedia: boolean;\r\n  templates: boolean;\r\n  aiGeneration: boolean;\r\n  multiLanguage: boolean;\r\n  analytics: boolean;\r\n  reporting: boolean;\r\n  monitoring: boolean;\r\n}\r\n\r\nexport interface CacheConfig {\r\n  enabled: boolean;\r\n  ttl: number; // seconds\r\n  maxSize: number; // MB\r\n  strategy: 'lru' | 'fifo' | 'lfu';\r\n}\r\n\r\nexport interface PaginationConfig {\r\n  defaultPageSize: number;\r\n  pageSizeOptions: number[];\r\n  maxPageSize: number;\r\n}\r\n\r\nexport interface APIConfig {\r\n  baseURL: string;\r\n  timeout: number;\r\n  retryAttempts: number;\r\n  retryDelay: number;\r\n  maxConcurrentRequests: number;\r\n}\r\n\r\nexport interface EnterpriseConfig {\r\n  database: DatabaseConfig;\r\n  security: SecurityConfig;\r\n  cors: CORSConfig;\r\n  redis: RedisConfig;\r\n  email: EmailConfig;\r\n  ocr: OCRConfig;\r\n  upload: UploadConfig;\r\n  telegram: TelegramConfig;\r\n  app: AppConfig;\r\n  ui: UIConfig;\r\n  features: FeatureConfig;\r\n  cache: CacheConfig;\r\n  pagination: PaginationConfig;\r\n  api: APIConfig;\r\n}\r\n\r\nclass ConfigManager {\r\n  private config: EnterpriseConfig;\r\n  private listeners: Array<(config: EnterpriseConfig) => void> = [];\r\n\r\n  constructor() {\r\n    this.config = this.loadConfig();\r\n    this.validateConfig();\r\n  }\r\n\r\n  private loadConfig(): EnterpriseConfig {\r\n    return {\r\n      database: {\r\n        url: process.env.REACT_APP_DATABASE_URL || 'mysql+pymysql://root:@localhost:3306/aibrands',\r\n        poolSize: parseInt(process.env.REACT_APP_DB_POOL_SIZE || '20'),\r\n        maxOverflow: parseInt(process.env.REACT_APP_DB_MAX_OVERFLOW || '30'),\r\n        poolTimeout: parseInt(process.env.REACT_APP_DB_POOL_TIMEOUT || '30'),\r\n        poolRecycle: parseInt(process.env.REACT_APP_DB_POOL_RECYCLE || '3600'),\r\n        echo: process.env.REACT_APP_DB_ECHO === 'true'\r\n      },\r\n      security: {\r\n        secretKey: process.env.REACT_APP_SECRET_KEY || 'your-secret-key-change-in-production',\r\n        algorithm: process.env.REACT_APP_JWT_ALGORITHM || 'HS256',\r\n        accessTokenExpireMinutes: parseInt(process.env.REACT_APP_ACCESS_TOKEN_EXPIRE_MINUTES || '15'),\r\n        refreshTokenExpireDays: parseInt(process.env.REACT_APP_REFRESH_TOKEN_EXPIRE_DAYS || '7'),\r\n        bcryptRounds: parseInt(process.env.REACT_APP_BCRYPT_ROUNDS || '12'),\r\n        maxLoginAttempts: parseInt(process.env.REACT_APP_MAX_LOGIN_ATTEMPTS || '5'),\r\n        lockoutDurationMinutes: parseInt(process.env.REACT_APP_LOCKOUT_DURATION_MINUTES || '15')\r\n      },\r\n      cors: {\r\n        allowedOrigins: (process.env.REACT_APP_ALLOWED_ORIGINS || 'http://localhost:3000,http://localhost:3001,http://localhost:3002,http://localhost:3003').split(','),\r\n        allowedMethods: (process.env.REACT_APP_ALLOWED_METHODS || 'GET,POST,PUT,DELETE,OPTIONS').split(','),\r\n        allowedHeaders: (process.env.REACT_APP_ALLOWED_HEADERS || '*').split(',')\r\n      },\r\n      redis: {\r\n        url: process.env.REACT_APP_REDIS_URL || 'redis://localhost:6379',\r\n        enabled: process.env.REACT_APP_REDIS_ENABLED !== 'false',\r\n        timeout: parseInt(process.env.REACT_APP_REDIS_TIMEOUT || '5')\r\n      },\r\n      email: {\r\n        smtpServer: process.env.REACT_APP_SMTP_SERVER,\r\n        smtpPort: parseInt(process.env.REACT_APP_SMTP_PORT || '587'),\r\n        smtpUsername: process.env.REACT_APP_SMTP_USERNAME,\r\n        smtpPassword: process.env.REACT_APP_SMTP_PASSWORD,\r\n        fromEmail: process.env.REACT_APP_FROM_EMAIL || 'noreply@aibrands.com',\r\n        fromName: process.env.REACT_APP_FROM_NAME || 'AI Brands',\r\n        useSSL: process.env.REACT_APP_SMTP_USE_SSL === 'true',\r\n        useTLS: process.env.REACT_APP_SMTP_USE_TLS !== 'false'\r\n      },\r\n      ocr: {\r\n        googleAiApiKey: process.env.REACT_APP_GOOGLE_AI_API_KEY,\r\n        parallelWorkers: parseInt(process.env.REACT_APP_OCR_PARALLEL_WORKERS || '10'),\r\n        timeout: parseInt(process.env.REACT_APP_OCR_TIMEOUT || '30'),\r\n        retryCount: parseInt(process.env.REACT_APP_OCR_RETRY_COUNT || '3')\r\n      },\r\n      upload: {\r\n        maxFileCount: parseInt(process.env.REACT_APP_MAX_FILE_COUNT || '500'),\r\n        maxFileSizeMB: parseInt(process.env.REACT_APP_MAX_FILE_SIZE_MB || '10'),\r\n        allowedExtensions: (process.env.REACT_APP_ALLOWED_EXTENSIONS || 'jpg,jpeg,png,webp').split(','),\r\n        totalUploadSizeMB: parseInt(process.env.REACT_APP_TOTAL_UPLOAD_SIZE_MB || '500'),\r\n        storagePath: process.env.REACT_APP_STORAGE_PATH || 'uploads'\r\n      },\r\n      telegram: {\r\n        botToken: process.env.REACT_APP_TELEGRAM_BOT_TOKEN,\r\n        chatId: process.env.REACT_APP_TELEGRAM_CHAT_ID\r\n      },\r\n      app: {\r\n        name: process.env.REACT_APP_NAME || 'AI Brands',\r\n        version: process.env.REACT_APP_VERSION || '2.0.0',\r\n        description: process.env.REACT_APP_DESCRIPTION || 'AI Destekli Marka Yönetim Platformu',\r\n        author: process.env.REACT_APP_AUTHOR || 'AI Brands Team',\r\n        environment: (process.env.REACT_APP_ENVIRONMENT || 'development') as 'development' | 'staging' | 'production',\r\n        debug: process.env.REACT_APP_DEBUG === 'true',\r\n        backendUrl: process.env.REACT_APP_API_URL || 'http://localhost:8000',\r\n        frontendUrl: process.env.REACT_APP_FRONTEND_URL || 'http://localhost:3000'\r\n      },\r\n      ui: {\r\n        theme: (process.env.REACT_APP_THEME || 'light') as 'light' | 'dark' | 'system',\r\n        language: process.env.REACT_APP_LANGUAGE || 'tr',\r\n        dateFormat: process.env.REACT_APP_DATE_FORMAT || 'DD/MM/YYYY',\r\n        timeFormat: process.env.REACT_APP_TIME_FORMAT || 'HH:mm',\r\n        timezone: process.env.REACT_APP_TIMEZONE || 'Europe/Istanbul'\r\n      },\r\n      features: {\r\n        socialMedia: process.env.REACT_APP_FEATURE_SOCIAL_MEDIA !== 'false',\r\n        templates: process.env.REACT_APP_FEATURE_TEMPLATES !== 'false',\r\n        aiGeneration: process.env.REACT_APP_FEATURE_AI_GENERATION !== 'false',\r\n        multiLanguage: process.env.REACT_APP_FEATURE_MULTI_LANGUAGE === 'true',\r\n        analytics: process.env.REACT_APP_FEATURE_ANALYTICS !== 'false',\r\n        reporting: process.env.REACT_APP_FEATURE_REPORTING !== 'false',\r\n        monitoring: process.env.REACT_APP_FEATURE_MONITORING !== 'false'\r\n      },\r\n      cache: {\r\n        enabled: process.env.REACT_APP_CACHE_ENABLED !== 'false',\r\n        ttl: parseInt(process.env.REACT_APP_CACHE_TTL || '300'),\r\n        maxSize: parseInt(process.env.REACT_APP_CACHE_MAX_SIZE || '50'),\r\n        strategy: (process.env.REACT_APP_CACHE_STRATEGY || 'lru') as 'lru' | 'fifo' | 'lfu'\r\n      },\r\n      pagination: {\r\n        defaultPageSize: parseInt(process.env.REACT_APP_DEFAULT_PAGE_SIZE || '20'),\r\n        pageSizeOptions: (process.env.REACT_APP_PAGE_SIZE_OPTIONS || '10,20,50,100').split(',').map(Number),\r\n        maxPageSize: parseInt(process.env.REACT_APP_MAX_PAGE_SIZE || '1000')\r\n      },\r\n      api: {\r\n        baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000',\r\n        timeout: parseInt(process.env.REACT_APP_API_TIMEOUT || '30000'),\r\n        retryAttempts: parseInt(process.env.REACT_APP_API_RETRY_ATTEMPTS || '3'),\r\n        retryDelay: parseInt(process.env.REACT_APP_API_RETRY_DELAY || '1000'),\r\n        maxConcurrentRequests: parseInt(process.env.REACT_APP_API_MAX_CONCURRENT || '10')\r\n      }\r\n    };\r\n  }\r\n\r\n  private validateConfig(): void {\r\n    // Validate required fields\r\n    if (!this.config.app.name) {\r\n      throw new Error('App name is required');\r\n    }\r\n    if (!this.config.api.baseURL) {\r\n      throw new Error('API base URL is required');\r\n    }\r\n    if (!this.config.app.version) {\r\n      throw new Error('App version is required');\r\n    }\r\n\r\n    // Validate numeric fields\r\n    if (this.config.upload.maxFileSizeMB <= 0) {\r\n      throw new Error('Max file size must be positive');\r\n    }\r\n    if (this.config.upload.maxFileCount <= 0) {\r\n      throw new Error('Max file count must be positive');\r\n    }\r\n    if (this.config.pagination.defaultPageSize <= 0) {\r\n      throw new Error('Default page size must be positive');\r\n    }\r\n  }\r\n\r\n  public getConfig(): EnterpriseConfig {\r\n    return { ...this.config };\r\n  }\r\n\r\n  public get<K extends keyof EnterpriseConfig>(key: K): EnterpriseConfig[K] {\r\n    return this.config[key];\r\n  }\r\n\r\n  public updateConfig(updates: Partial<EnterpriseConfig>): void {\r\n    this.config = { ...this.config, ...updates };\r\n    this.validateConfig();\r\n    this.notifyListeners();\r\n  }\r\n\r\n  public subscribe(listener: (config: EnterpriseConfig) => void): () => void {\r\n    this.listeners.push(listener);\r\n    return () => {\r\n      const index = this.listeners.indexOf(listener);\r\n      if (index > -1) {\r\n        this.listeners.splice(index, 1);\r\n      }\r\n    };\r\n  }\r\n\r\n  private notifyListeners(): void {\r\n    this.listeners.forEach(listener => listener(this.config));\r\n  }\r\n\r\n  public isProduction(): boolean {\r\n    return this.config.app.environment === 'production';\r\n  }\r\n\r\n  public isDevelopment(): boolean {\r\n    return this.config.app.environment === 'development';\r\n  }\r\n\r\n  public isStaging(): boolean {\r\n    return this.config.app.environment === 'staging';\r\n  }\r\n\r\n  public getAppInfo() {\r\n    return {\r\n      name: this.config.app.name,\r\n      version: this.config.app.version,\r\n      description: this.config.app.description,\r\n      author: this.config.app.author,\r\n      environment: this.config.app.environment\r\n    };\r\n  }\r\n\r\n  public getUploadLimits() {\r\n    return {\r\n      maxFileCount: this.config.upload.maxFileCount,\r\n      maxFileSizeMB: this.config.upload.maxFileSizeMB,\r\n      allowedExtensions: this.config.upload.allowedExtensions,\r\n      totalUploadSizeMB: this.config.upload.totalUploadSizeMB,\r\n      storagePath: this.config.upload.storagePath\r\n    };\r\n  }\r\n\r\n  public getOCRConfig() {\r\n    return {\r\n      apiKey: this.config.ocr.googleAiApiKey,\r\n      parallelWorkers: this.config.ocr.parallelWorkers,\r\n      timeout: this.config.ocr.timeout,\r\n      retryCount: this.config.ocr.retryCount\r\n    };\r\n  }\r\n}\r\n\r\n// Singleton instance\r\nexport const configManager = new ConfigManager();\r\n\r\n// Export commonly used configs\r\nexport const databaseConfig = configManager.get('database');\r\nexport const securityConfig = configManager.get('security');\r\nexport const corsConfig = configManager.get('cors');\r\nexport const redisConfig = configManager.get('redis');\r\nexport const emailConfig = configManager.get('email');\r\nexport const ocrConfig = configManager.get('ocr');\r\nexport const uploadConfig = configManager.get('upload');\r\nexport const telegramConfig = configManager.get('telegram');\r\nexport const appConfig = configManager.get('app');\r\nexport const uiConfig = configManager.get('ui');\r\nexport const featuresConfig = configManager.get('features');\r\nexport const cacheConfig = configManager.get('cache');\r\nexport const paginationConfig = configManager.get('pagination');\r\nexport const apiConfig = configManager.get('api');\r\n\r\n// Export the main config\r\nexport const config = configManager.getConfig();\r\n\r\nexport default configManager;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}